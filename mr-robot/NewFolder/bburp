<?xml version="1.0"?>
<!DOCTYPE items [
<!ELEMENT items (item*)>
<!ATTLIST items burpVersion CDATA "">
<!ATTLIST items exportTime CDATA "">
<!ELEMENT item (time, url, host, port, protocol, method, path, extension, request, status, responselength, mimetype, response, comment)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT url (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT port (#PCDATA)>
<!ELEMENT protocol (#PCDATA)>
<!ELEMENT method (#PCDATA)>
<!ELEMENT path (#PCDATA)>
<!ELEMENT extension (#PCDATA)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT status (#PCDATA)>
<!ELEMENT responselength (#PCDATA)>
<!ELEMENT mimetype (#PCDATA)>
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT comment (#PCDATA)>
]>
<items burpVersion="2020.4" exportTime="Thu May 28 10:23:21 IST 2020">
  <item>
    <time>Thu May 28 09:48:48 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC8gSFRUUC8xLjENCkhvc3Q6IDEwLjEwLjEwLjE4DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29va2llOiBzX2NjPXRydWU7IHNfZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRTsgc19ucj0xNTkwNjM3MTM5MDAwOyBzX3NxPSU1QiU1QkIlNUQlNUQNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KDQo=]]></request>
    <status>200</status>
    <responselength>1468</responselength>
    <mimetype>HTML</mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjE4OjQ3IEdNVA0KU2VydmVyOiBBcGFjaGUNClgtRnJhbWUtT3B0aW9uczogU0FNRU9SSUdJTg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClZhcnk6IEFjY2VwdC1FbmNvZGluZw0KWC1Nb2QtUGFnZXNwZWVkOiAxLjkuMzIuMy00NTIzDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTAsIG5vLWNhY2hlDQpDb250ZW50LUxlbmd0aDogMTE4OA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtVHlwZTogdGV4dC9odG1sDQoNCjwhZG9jdHlwZSBodG1sPgo8IS0tClwgICAvL35+XCB8ICAgfCAgICAvXCAgfH5+XHx+fiAgfFwgIHwgL35+XH5+fH5+ICAgIC9cICB8ICAvfn5cIHxcICB8fH5+CiBcIC98ICAgIHx8ICAgfCAgIC9fX1wgfF9fL3wtLSAgfCBcIHx8ICAgIHwgfCAgICAgL19fXCB8IHwgICAgfHwgXCB8fC0tCiAgfCAgXF9fLyAgXF8vICAgLyAgICBcfCAgXHxfXyAgfCAgXHwgXF9fLyAgfCAgICAvICAgIFx8X19cX18vIHwgIFx8fF9fCi0tPgo8aHRtbCBjbGFzcz0ibm8tanMiIGxhbmc9IiI+CiAgPGhlYWQ+CiAgICAKCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9BLm1haW4tNjAwYTk3OTEuY3NzLnBhZ2VzcGVlZC5jZi5KSzZublpwU2QyLmNzcyI+CgogICAgPHNjcmlwdCBzcmM9ImpzL3ZlbmRvci92ZW5kb3ItNDhjYTQ1NWMuanMucGFnZXNwZWVkLmptLlY3UWZ3NmJkNUMuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQ+dmFyIFVTRVJfSVA9JzIwOC4xODUuMTE1LjYnO3ZhciBCQVNFX1VSTD0naW5kZXguaHRtbCc7dmFyIFJFVFVSTl9VUkw9J2luZGV4Lmh0bWwnO3ZhciBSRURJUkVDVD1mYWxzZTt3aW5kb3cubG9nPWZ1bmN0aW9uKCl7bG9nLmhpc3Rvcnk9bG9nLmhpc3Rvcnl8fFtdO2xvZy5oaXN0b3J5LnB1c2goYXJndW1lbnRzKTtpZih0aGlzLmNvbnNvbGUpe2NvbnNvbGUubG9nKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO319Ozwvc2NyaXB0PgoKICA8L2hlYWQ+CiAgPGJvZHk+CiAgICA8IS0tW2lmIGx0IElFIDldPgogICAgICA8cCBjbGFzcz0iYnJvd3NlcnVwZ3JhZGUiPllvdSBhcmUgdXNpbmcgYW4gPHN0cm9uZz5vdXRkYXRlZDwvc3Ryb25nPiBicm93c2VyLiBQbGVhc2UgPGEgaHJlZj0iaHR0cDovL2Jyb3dzZWhhcHB5LmNvbS8iPnVwZ3JhZGUgeW91ciBicm93c2VyPC9hPiB0byBpbXByb3ZlIHlvdXIgZXhwZXJpZW5jZS48L3A+CiAgICAKCiAgICA8IS0tIEdvb2dsZSBQbHVzIGNvbmZpcm1hdGlvbiAtLT4KICAgIDxkaXYgaWQ9ImFwcCI+PC9kaXY+CgogICAgCiAgICA8c2NyaXB0IHNyYz0ianMvc19jb2RlLmpzLnBhZ2VzcGVlZC5qbS5JNzhjZkhRcGJRLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9tYWluLWFjYmEwNmE1LmpzLnBhZ2VzcGVlZC5qbS5ZZFNiMnoxcmloLmpzIj48L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg==]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:53 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/audio/beep.ogg]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/audio/beep.ogg]]></path>
    <extension>ogg</extension>
    <request base64="true"><![CDATA[R0VUIC9hdWRpby9iZWVwLm9nZyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAuMTAuMTgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IHJ2OjY4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjguMA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KWC1SZXF1ZXN0ZWQtV2l0aDogWE1MSHR0cFJlcXVlc3QNCkROVDogMQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMC4xMC4xOC8NCkNvb2tpZTogc19jYz10cnVlOyBzX2ZpZD0xRDg3QzRDNUYxRkRENTE5LTIxODlGN0FEMDhCODVDMkU7IHNfbnI9MTU5MDYzNzEzOTAwMDsgc19zcT0lNUIlNUJCJTVEJTVEDQpJZi1Nb2RpZmllZC1TaW5jZTogTW9uLCAyOCBTZXAgMjAxNSAyMDoyOTozMiBHTVQNCklmLU5vbmUtTWF0Y2g6ICIxNTkwLTUyMGQ0OGUwZTIzMDAiDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCg0K]]></request>
    <status>304</status>
    <responselength>129</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzA0IE5vdCBNb2RpZmllZA0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoxODo1MiBHTVQNClNlcnZlcjogQXBhY2hlDQpDb25uZWN0aW9uOiBjbG9zZQ0KRVRhZzogIjE1OTAtNTIwZDQ4ZTBlMjMwMCINCg0K]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:52 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/audio/beep2.ogg]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/audio/beep2.ogg]]></path>
    <extension>ogg</extension>
    <request base64="true"><![CDATA[R0VUIC9hdWRpby9iZWVwMi5vZ2cgSFRUUC8xLjENCkhvc3Q6IDEwLjEwLjEwLjE4DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClgtUmVxdWVzdGVkLVdpdGg6IFhNTEh0dHBSZXF1ZXN0DQpETlQ6IDENCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAuMTAuMTgvDQpDb29raWU6IHNfY2M9dHJ1ZTsgc19maWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFOyBzX25yPTE1OTA2MzcxMzkwMDA7IHNfc3E9JTVCJTVCQiU1RCU1RA0KSWYtTW9kaWZpZWQtU2luY2U6IE1vbiwgMjggU2VwIDIwMTUgMjA6Mjk6MzMgR01UDQpJZi1Ob25lLU1hdGNoOiAiMTRkMC01MjBkNDhlMWQ2NTQwIg0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQoNCg==]]></request>
    <status>304</status>
    <responselength>129</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzA0IE5vdCBNb2RpZmllZA0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoxODo1MiBHTVQNClNlcnZlcjogQXBhY2hlDQpDb25uZWN0aW9uOiBjbG9zZQ0KRVRhZzogIjE0ZDAtNTIwZDQ4ZTFkNjU0MCINCg0K]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:52 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/audio/hum_loop.ogg]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/audio/hum_loop.ogg]]></path>
    <extension>ogg</extension>
    <request base64="true"><![CDATA[R0VUIC9hdWRpby9odW1fbG9vcC5vZ2cgSFRUUC8xLjENCkhvc3Q6IDEwLjEwLjEwLjE4DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNClgtUmVxdWVzdGVkLVdpdGg6IFhNTEh0dHBSZXF1ZXN0DQpETlQ6IDENCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAuMTAuMTgvDQpDb29raWU6IHNfY2M9dHJ1ZTsgc19maWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFOyBzX25yPTE1OTA2MzcxMzkwMDA7IHNfc3E9JTVCJTVCQiU1RCU1RA0KSWYtTW9kaWZpZWQtU2luY2U6IE1vbiwgMjggU2VwIDIwMTUgMjA6Mjk6MzMgR01UDQpJZi1Ob25lLU1hdGNoOiAiNDJmZTEtNTIwZDQ4ZTFkNjU0MCINCkNhY2hlLUNvbnRyb2w6IG1heC1hZ2U9MA0KDQo=]]></request>
    <status>304</status>
    <responselength>130</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzA0IE5vdCBNb2RpZmllZA0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoxODo1MSBHTVQNClNlcnZlcjogQXBhY2hlDQpDb25uZWN0aW9uOiBjbG9zZQ0KRVRhZzogIjQyZmUxLTUyMGQ0OGUxZDY1NDAiDQoNCg==]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:53 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/audio/type.ogg]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/audio/type.ogg]]></path>
    <extension>ogg</extension>
    <request base64="true"><![CDATA[R0VUIC9hdWRpby90eXBlLm9nZyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAuMTAuMTgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IHJ2OjY4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjguMA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KWC1SZXF1ZXN0ZWQtV2l0aDogWE1MSHR0cFJlcXVlc3QNCkROVDogMQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMC4xMC4xOC8NCkNvb2tpZTogc19jYz10cnVlOyBzX2ZpZD0xRDg3QzRDNUYxRkRENTE5LTIxODlGN0FEMDhCODVDMkU7IHNfbnI9MTU5MDYzNzEzOTAwMDsgc19zcT0lNUIlNUJCJTVEJTVEDQpJZi1Nb2RpZmllZC1TaW5jZTogTW9uLCAyOCBTZXAgMjAxNSAyMDoyOTozMyBHTVQNCklmLU5vbmUtTWF0Y2g6ICIxMjIzLTUyMGQ0OGUxZDY1NDAiDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTANCg0K]]></request>
    <status>304</status>
    <responselength>129</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzA0IE5vdCBNb2RpZmllZA0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoxODo1MiBHTVQNClNlcnZlcjogQXBhY2hlDQpDb25uZWN0aW9uOiBjbG9zZQ0KRVRhZzogIjEyMjMtNTIwZDQ4ZTFkNjU0MCINCg0K]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:51 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/favicon.ico]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/favicon.ico]]></path>
    <extension>ico</extension>
    <request base64="true"><![CDATA[R0VUIC9mYXZpY29uLmljbyBIVFRQLzEuMQ0KSG9zdDogMTAuMTAuMTAuMTgNClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IHJ2OjY4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjguMA0KQWNjZXB0OiBpbWFnZS93ZWJwLCovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENCkNvbm5lY3Rpb246IGNsb3NlDQpDb29raWU6IHNfY2M9dHJ1ZTsgc19maWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFOyBzX25yPTE1OTA2MzcxMzkwMDA7IHNfc3E9JTVCJTVCQiU1RCU1RA0KQ2FjaGUtQ29udHJvbDogbWF4LWFnZT0wDQoNCg==]]></request>
    <status>200</status>
    <responselength>205</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjE4OjUwIEdNVA0KU2VydmVyOiBBcGFjaGUNClgtUG93ZXJlZC1CeTogUEhQLzUuNS4yOQ0KWC1GcmFtZS1PcHRpb25zOiBTQU1FT1JJR0lODQpDb250ZW50LUxlbmd0aDogMA0KQ29ubmVjdGlvbjogY2xvc2UNCkNvbnRlbnQtVHlwZTogaW1hZ2Uvdm5kLm1pY3Jvc29mdC5pY29uDQoNCg==]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:50 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/js/main-acba06a5.js.pagespeed.jm.YdSb2z1rih.js]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/js/main-acba06a5.js.pagespeed.jm.YdSb2z1rih.js]]></path>
    <extension>js</extension>
    <request base64="true"><![CDATA[R0VUIC9qcy9tYWluLWFjYmEwNmE1LmpzLnBhZ2VzcGVlZC5qbS5ZZFNiMnoxcmloLmpzIEhUVFAvMS4xDQpIb3N0OiAxMC4xMC4xMC4xOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgcnY6NjguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC82OC4wDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAuMTAuMTgvDQpDb29raWU6IHNfY2M9dHJ1ZTsgc19maWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFOyBzX25yPTE1OTA2MzcxMzkwMDA7IHNfc3E9JTVCJTVCQiU1RCU1RA0KDQo=]]></request>
    <status>200</status>
    <responselength>496341</responselength>
    <mimetype>script</mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpEYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjE4OjQ4IEdNVA0KU2VydmVyOiBBcGFjaGUNClgtRnJhbWUtT3B0aW9uczogU0FNRU9SSUdJTg0KTGFzdC1Nb2RpZmllZDogU2F0LCAxNCBOb3YgMjAxNSAyMTowMjozMSBHTVQNCkFjY2VwdC1SYW5nZXM6IGJ5dGVzDQpWYXJ5OiBBY2NlcHQtRW5jb2RpbmcNCkV4cGlyZXM6IFRodSwgMjggTWF5IDIwMjAgMDQ6MjM6MjggR01UDQpDYWNoZS1Db250cm9sOiBtYXgtYWdlPTMwMCxwcml2YXRlDQpDb25uZWN0aW9uOiBjbG9zZQ0KQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0DQpDb250ZW50LUxlbmd0aDogNDk1OTkyDQoNCiEgZnVuY3Rpb24gdChlLCBuLCByKSB7CiAgICBmdW5jdGlvbiBpKGEsIHMpIHsKICAgICAgICBpZiAoIW5bYV0pIHsKICAgICAgICAgICAgaWYgKCFlW2FdKSB7CiAgICAgICAgICAgICAgICB2YXIgdSA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIHJlcXVpcmUgJiYgcmVxdWlyZTsKICAgICAgICAgICAgICAgIGlmICghcyAmJiB1KSByZXR1cm4gdShhLCAhMCk7CiAgICAgICAgICAgICAgICBpZiAobykgcmV0dXJuIG8oYSwgITApOwogICAgICAgICAgICAgICAgdmFyIGMgPSBuZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIiArIGEgKyAiJyIpOwogICAgICAgICAgICAgICAgdGhyb3cgYy5jb2RlID0gIk1PRFVMRV9OT1RfRk9VTkQiLCBjCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGwgPSBuW2FdID0gewogICAgICAgICAgICAgICAgZXhwb3J0czoge30KICAgICAgICAgICAgfTsKICAgICAgICAgICAgZVthXVswXS5jYWxsKGwuZXhwb3J0cywgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIG4gPSBlW2FdWzFdW3RdOwogICAgICAgICAgICAgICAgcmV0dXJuIGkobiA/IG4gOiB0KQogICAgICAgICAgICB9LCBsLCBsLmV4cG9ydHMsIHQsIGUsIG4sIHIpCiAgICAgICAgfQogICAgICAgIHJldHVybiBuW2FdLmV4cG9ydHMKICAgIH0KICAgIGZvciAodmFyIG8gPSAiZnVuY3Rpb24iID09IHR5cGVvZiByZXF1aXJlICYmIHJlcXVpcmUsIGEgPSAwOyBhIDwgci5sZW5ndGg7IGErKykgaShyW2FdKTsKICAgIHJldHVybiBpCn0oewogICAgMTogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHIgPSB0KCIuL3ZpZXdzL0FwcFZpZXciKTsKICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1GcmFtZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQodCwgMWUzIC8gNjApCiAgICAgICAgICAgIH0KICAgICAgICB9KCksICQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciB0ID0gJCgiI2FwcCIpOwogICAgICAgICAgICBuZXcgcih7CiAgICAgICAgICAgICAgICBlbDogdAogICAgICAgICAgICB9KQogICAgICAgIH0pCiAgICB9LCB7CiAgICAgICAgIi4vdmlld3MvQXBwVmlldyI6IDYKICAgIH1dLAogICAgMjogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHIgPSBbewogICAgICAgICAgICAgICAgZGlzcGxheTogITEsCiAgICAgICAgICAgICAgICBuYXZpZ2F0ZTogITEsCiAgICAgICAgICAgICAgICByZWdleDogL15oZWxwJC9pLAogICAgICAgICAgICAgICAgbGFiZWw6ICJoZWxwIiwKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiU2hvdyBjb21tYW5kcyIsCiAgICAgICAgICAgICAgICBvbnNlbGVjdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5TWVudSgpLCB0aGlzLnJ1bigpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICExLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICEwLAogICAgICAgICAgICAgICAgcmVnZXg6IC9eNDIwJC9pLAogICAgICAgICAgICAgICAgbGFiZWw6ICI0MjAiLAogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG51bGwsCiAgICAgICAgICAgICAgICBvbnNlbGVjdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJpbnN0cnVjdGlvbnM6Y2hhbmdlIiwgIjQyMCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICExLAogICAgICAgICAgICAgICAgcmVnZXg6IC9ecHJlcGFyZSQvaSwKICAgICAgICAgICAgICAgIGxhYmVsOiAicHJlcGFyZSIsCiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCwKICAgICAgICAgICAgICAgIG9uc2VsZWN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoImluc3RydWN0aW9uczpjaGFuZ2UiLCAicHJlcGFyZSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICEwLAogICAgICAgICAgICAgICAgcmVnZXg6IC9eZnNvY2lldHkkL2ksCiAgICAgICAgICAgICAgICBsYWJlbDogImZzb2NpZXR5IiwKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLAogICAgICAgICAgICAgICAgb25zZWxlY3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigiaW5zdHJ1Y3Rpb25zOmNoYW5nZSIsICJmc29jaWV0eSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICEwLAogICAgICAgICAgICAgICAgcmVnZXg6IC9eaW5mb3JtJC9pLAogICAgICAgICAgICAgICAgbGFiZWw6ICJpbmZvcm0iLAogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG51bGwsCiAgICAgICAgICAgICAgICBvbnNlbGVjdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJpbnN0cnVjdGlvbnM6Y2hhbmdlIiwgImluZm9ybSIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICEwLAogICAgICAgICAgICAgICAgcmVnZXg6IC9ecXVlc3Rpb24kL2ksCiAgICAgICAgICAgICAgICBsYWJlbDogInF1ZXN0aW9uIiwKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBudWxsLAogICAgICAgICAgICAgICAgb25zZWxlY3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigiaW5zdHJ1Y3Rpb25zOmNoYW5nZSIsICJxdWVzdGlvbiIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICEwLAogICAgICAgICAgICAgICAgcmVnZXg6IC9ed2FrZXVwJC9pLAogICAgICAgICAgICAgICAgbGFiZWw6ICJ3YWtldXAiLAogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG51bGwsCiAgICAgICAgICAgICAgICBvbnNlbGVjdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJpbnN0cnVjdGlvbnM6Y2hhbmdlIiwgIndha2V1cCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRpc3BsYXk6ICEwLAogICAgICAgICAgICAgICAgbmF2aWdhdGU6ICEwLAogICAgICAgICAgICAgICAgcmVnZXg6IC9eam9pbiQvaSwKICAgICAgICAgICAgICAgIGxhYmVsOiAiam9pbiIsCiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbCwKICAgICAgICAgICAgICAgIG9uc2VsZWN0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYWNrLm9tbmkoIkVtYWlsIFNpZ24tVXAiLCAiSW50cm8gVGV4dCIpLCB0aGlzLnRyaWdnZXIoImluc3RydWN0aW9uczpjaGFuZ2UiLCAiam9pbiIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1dLAogICAgICAgICAgICBpID0gewogICAgICAgICAgICAgICAgZGlzcGxheU1lbnU6ICEwLAogICAgICAgICAgICAgICAgcHJlZml4OiAicm9vdEBmc29jaWV0eTp+IyAiLAogICAgICAgICAgICAgICAgdHlwZTogInVzZXJQcm9tcHQiLAogICAgICAgICAgICAgICAgZGVsYXk6IDEwMCwKICAgICAgICAgICAgICAgIHByZWZpeFdlaWdodDogNzAwLAogICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgIGNvbW1hbmRzOiByCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG8gPSB7CiAgICAgICAgICAgICAgICBpbml0aWFsOiBbewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIHBsYXlTb3VuZDogImluaXQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJHUlVCIGxvYWRpbmcuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMWUzCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIldlbGNvbWUgdG8gR1JVQiEiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyZTMKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBjbGVhcjogITAsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDI1MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBjbGVhcjogITAsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIkxvYWRpbmcgTGludXggMy4yLjAtNC1hbWQ2NCAuLi4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA2MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiTG9hZGluZyBpbml0aWFsIHJhbWRpc2sgIC4uLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGNsZWFyOiAhMCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgY2xlYXI6ICEwLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJMb2FkaW5nLCBwbGVhc2Ugd2FpdCAuLi4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxMjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlsgICAgMi4xOTQ3ODVdIHNkIDA6MDowOjA6IFtzZGFdIEFzc3VtaW5nIGRyaXZlIGNhY2hlOiB3cml0ZSB0aHJvdWdoIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlsgICAgMi4xOTUyODRdIHNkIDA6MDowOjA6IFtzZGFdIEFzc3VtaW5nIGRyaXZlIGNhY2hlOiB3cml0ZSB0aHJvdWdoIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlsgICAgMi4xOTYxNjNdIHNkIDA6MDowOjA6IFtzZGFdIEFzc3VtaW5nIGRyaXZlIGNhY2hlOiB3cml0ZSB0aHJvdWdoIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIklOSVQ6IHZlcnNpb24gMi44OCBib290aW5nIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogODAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1s8c3BhbiBjbGFzcz0iYmwiPmluZm88L3NwYW4+XSBVc2luZyBtYWtlZmlsZS1zdHlsZSBjb25jdXJyZW50IGJvb3QgaW4gcnVubGV2ZWwgUy4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1sgPHNwYW4gY2xhc3M9ImduIj5vazwvc3Bhbj4gXSBTdGFydGluZyB0aGUgaG90IHBsdWcgZXZlbnRzIGRpc3BhdGNoZXI6IHVkZXZkLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDQwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIi4uLi5dIFN5bnRoZXNpemluZyB0aGUgaW5pdGlhbCBob3RwbHVnIGV2ZW50cy4uLlsgICAgMi43MDA2MDldIHBpaXhfc21idXMgMDAwMDowMDowNy4zOiBIb3N0IFNNQnVzIGNvbnRyb2xsZXIgbm90IGVuYWJsZWQhIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImRvbmUuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiWyA8c3BhbiBjbGFzcz1cImduXCI+b2s8L3NwYW4+IF0gV2FpdGluZyBmb3IgL2RldiB0byBiZSBmdWxseSBwb3B1bGF0ZWQuLi5bICAgIDMuMDYxNDg0XSBFcnJvcjogRHJpdmVyICdwYyBzcGtyJyBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQsIGFib3J0aW5nLi4uIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiZG9uZS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFNldHRpbmcgcHJlbGltaW5hcnkga2V5bWFwLi4uZG9uZS4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIEFjdGl2YXRpbmcgc3dhcC4uLmRvbmUuJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogMjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlsuLi4uXSBDaGVja2luZyByb290IGZpbGUgc3lzdGVtLi4uZnNjayBmcm9tIHV0aWwtbGludXggMi4yMC4xIC9kZXYvc2RhMTogY2xlYW4sIDM4MTkwLzEyNTY2NDAgZmlsZXMsIDM0MTk5My81MDE2ODMyIGJsb2NrcyIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDQwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImRvbmUuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWzxzcGFuIGNsYXNzPSJibCI+aW5mbzwvc3Bhbj5dIExvYWRpbmcga2VybmVsIG1vZHVsZSBsb29wLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDQwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1sgPHNwYW4gY2xhc3M9ImduIj5vazwvc3Bhbj4gXSBDbGVhbmluZyB1cCB0ZW1wb3JhcnkgZmlsZXMuLi4gL3RtcC4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA0MAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gQWN0aXZhdGluZyBsdm0gYW5kIG1kIHN3YXAuLi5kb25lLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDQwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlsuLi4uXSBDaGVja2luZyBmaWxlIHN5c3RlbXMuLi5mc2NrIGZyb20gdXRpbC1saW51eCAyLjIwLjEiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA4MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiZG9uZS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiWy4uLi5dIE1vdW50aW5nIGxvY2FsIGZpbGVzeXN0ZW1zLi4uZG9uZS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIEFjdGl2YXRpbmcgc3dhcGZpbGUgc3dhcC4uLmRvbmUuJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1sgPHNwYW4gY2xhc3M9ImduIj5vazwvc3Bhbj4gXSBDbGVhbmluZyB1cCB0ZW1wb3JhcnkgZmlsZXMuLi4uJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogMjAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFNldHRpbmcga2VybmVsIHZhcmlhYmxlcyAuLi5kb25lLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDEwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gQ29uZmlndXJpbmcgbmV0d29yayBpbnRlcmZhY2VzLi4uZG9uZS4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFN0YXJ0aW5nIHJwY2JpbmQgZGFlbW9uLi4uLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gU3RhcnRpbmcgTkZTIGNvbW1vbiB1dGlsaXRpZXM6IHN0YXRkIGlkbWFwZC4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIENsZWFuaW5nIHVwIHRlbXBvcmFyeSBmaWxlcy4uLi5kb25lLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbPHNwYW4gY2xhc3M9ImJsIj5pbmZvPC9zcGFuPl0gU2V0dGluZyBjb25zb2xlIHNjcmVlbiBtb2Rlcy4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA0MAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbPHNwYW4gY2xhc3M9ImJsIj5pbmZvPC9zcGFuPl0gU2tpcHBpbmcgZm9udCBhbmQga2V5bWFwIHNldHVwIChoYW5kbGVkIGJ5IGNvbnNvbGUtc2V0dXApLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDEwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlsuLi4uXSBTZXR0aW5nIHVwIGNvbnNvbGUgZm9udCBhbmQga2V5bWFwLi4uZG9uZS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA0MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiSU5JVDogRW50ZXJpbmcgcnVubGV2ZWw6IDIiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxZTMKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWzxzcGFuIGNsYXNzPSJibCI+aW5mbzwvc3Bhbj5dIFVzaW5nIG1ha2VmaWxlLXN0eWxlIGNvbmN1cnJlbnQgYm9vdCBpbiBydW5sZXZlbCAyLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDkwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ1sgPHNwYW4gY2xhc3M9ImduIj5vazwvc3Bhbj4gXSBTdGFydGluZyBORlMgY29tbW9uIHV0bGl0aWVzOiBzdGF0ZCBpZG1hcGQuJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogMjAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFN0YXJ0aW5nIHJwY2JpbmQgZGFlbW9uLi4uWy4uLi5dIEFscmVhZHkgcnVubmluZy4uJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFN0YXJ0aW5nIGVuaGFuY2VkIHN5c2xvZ2Q6IHJzeXNsb2dkLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDMwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gU3RhcnRpbmcgZGVmZXJyZWQgZXhlY3V0aW9uIHNjaGVkdWxlcjogYXRkLicsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDMwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gU3RhcnRpbmcgQUNQSSBzZXJ2aWNlcy4uLi4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFN0YXJ0aW5nIHBlcmlvZGljIGNvbW1hbmQgc2NoZWR1bGVyOiBjcm9uJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogODAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFN0YXJ0aW5nIHN5c3RlbSBtZXNzYWdlIGJ1czogZGJ1cycsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gU3RhcnRpbmcgQXZhaGkgbUROUy9ETlMtU0QgRGFlbW9uOiBhdmFoaS1kYWVtb24uJywKICAgICAgICAgICAgICAgICAgICBkZWxheTogNDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnWyA8c3BhbiBjbGFzcz0iZ24iPm9rPC9zcGFuPiBdIFN0YXJ0aW5nIENvbW1vbiBVbml4IFByaW50aW5nIFN5c3RlbTogY3Vwc2QnLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA5MAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdbIDxzcGFuIGNsYXNzPSJnbiI+b2s8L3NwYW4+IF0gU3RhcnRpbmcgTVRBOiBleGltNC4nLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGNsZWFyOiAhMCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiRGViaWFuIEdOVS9MaW51eCA3IG1ycm9ib3QgdHR5bCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICImbmJzcCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDQwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogInJvb3QiLAogICAgICAgICAgICAgICAgICAgIHByZWZpeDogIm1ycm9ib3QgbG9naW46ICIsCiAgICAgICAgICAgICAgICAgICAgcGxheVNvdW5kOiAiaW5pdCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDE1MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCi4oCiIiwKICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICJwYXNzd29yZDogIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNTAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgY2xlYXI6ICEwLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICIiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyNTAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICBjbGVhcjogITAsCiAgICAgICAgICAgICAgICAgICAgdGltZTogITAsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICIjMDA4YzIzIiwKICAgICAgICAgICAgICAgICAgICBwcmVmaXhDb2xvcjogIiMwMDhjMjMiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICItIS0gZnJpZW5kXyBbZnJpZW5kX0AiICsgVVNFUl9JUCArICJdIGhhcyBqb2luZWQgI2Zzb2NpZXR5LiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICImbmJzcDsiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0aW1lOiAhMCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiSGVsbG8gZnJpZW5kLiIsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAiPG1yLiByb2JvdD4iLAogICAgICAgICAgICAgICAgICAgIHByZWZpeENvbG9yOiAiIzAwOGMyMyIsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4V2VpZ2h0OiA3MDAsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDgwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIklmIHlvdSd2ZSBjb21lLCB5b3UndmUgY29tZSBmb3IgYSByZWFzb24uIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMWUzCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImNvbnRpbnVlVHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiWW91IG1heSBub3QgYmUgYWJsZSB0byBleHBsYWluIGl0IHlldCwiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxMjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImNvbnRpbnVlVHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiYnV0IHRoZXJlJ3MgYSBwYXJ0IG9mIHlvdSB0aGF0J3MgZXhoYXVzdGVkIHdpdGggdGhpcyB3b3JsZC4uLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImEgd29ybGQgdGhhdCBkZWNpZGVzIHdoZXJlIHlvdSB3b3JrLCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIndobyB5b3Ugc2VlLCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImFuZCBob3cgeW91IGVtcHR5IGFuZCBmaWxsIHlvdXIgZGVwcmVzc2luZyBiYW5rIGFjY291bnQuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogODAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImNvbnRpbnVlVHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiRXZlbiB0aGUgSW50ZXJuZXQgY29ubmVjdGlvbiB5b3UncmUgdXNpbmcgdG8gcmVhZCB0aGlzIGlzIGNvc3RpbmcgeW91LCBzbG93bHkgY2hpcHBpbmcgYXdheSBhdCB5b3VyIGV4aXN0ZW5jZS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxZTMKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiY29udGludWVUeXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJUaGVyZSBhcmUgdGhpbmdzIHlvdSB3YW50IHRvIHNheS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA2MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiY29udGludWVUeXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJTb29uIEkgd2lsbCBnaXZlIHlvdSBhIHZvaWNlLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDYwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIlRvZGF5IHlvdXIgZWR1Y2F0aW9uIGJlZ2lucy4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA2MDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAibWVudU9wdGlvbnMiLAogICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgY29tbWFuZHM6IHIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIGldLAogICAgICAgICAgICAgICAgam9pbjogW3sKICAgICAgICAgICAgICAgICAgICBjbGVhcjogITAsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGNsZWFyOiAhMCwKICAgICAgICAgICAgICAgICAgICB0aW1lOiAhMCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAidHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICI8bXIuIHJvYm90PiIsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4Q29sb3I6ICIjMDA4YzIzIiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiaGVsbG8gZnJpZW5kIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHRpbWU6ICEwLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIHByZWZpeDogIjxtci4gcm9ib3Q+IiwKICAgICAgICAgICAgICAgICAgICBwcmVmaXhDb2xvcjogIiMwMDhjMjMiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJ5b3UgZG9uJ3Qga25vdyBtZSwgYnV0IEkndmUgYmVlbiB3YXRjaGluZyB5b3UuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImkga25vdyB5b3UgZmVlbCBsaWtlIHlvdSBoYXZlIG5vIHZvaWNlLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDJlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImkga25vdyB5b3UgZmVlbCB0cmFwcGVkLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogImkga25vdyB5b3UgZmVlbCBjb250cm9sbGVkLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDEyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiY29udGludWVUeXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJidXQgaeKAmXZlIGJlZW4gZmlnaHRpbmcgZm9yIHlvdS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxMjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImNvbnRpbnVlVHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiYWxsIG9mIHlvdS4iLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAxMjAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImNvbnRpbnVlVHlwZWRUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiaXQncyB0aW1lIHRvIGJyZWFrIGZyZWUgZnJvbSBvdXIgY29ycG9yYXRlIG1hc3RlcnMuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJjb250aW51ZVR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogInlvdSd2ZSBiZWVuIGEgc2xhdmUgdG8gdGhlaXIgZGVidCBmYXIgdG9vIGxvbmcuIiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogMTIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHRpbWU6ICEwLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIHByZWZpeDogIjxtci4gcm9ib3Q+IiwKICAgICAgICAgICAgICAgICAgICBwcmVmaXhDb2xvcjogIiMwMDhjMjMiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJpZiB5b3UncmUgcmVhZHkgdG8gam9pbiBtZSwgZW50ZXIgeW91ciBlbWFpbCBhZGRyZXNzLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICImbmJzcDsiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0aW1lOiAhMCwKICAgICAgICAgICAgICAgICAgICBwcmVmaXhDb2xvcjogIiMwMDhjMjMiLAogICAgICAgICAgICAgICAgICAgIHByZWZpeDogIjxmcmllbmRfXz4iLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbFByb21wdCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICAgICBlbWFpbEVycm9yOiBbewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIHBsYXlTb3VuZDogImluY29ycmVjdCIsCiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICJyZWQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJFcnJvcjogSW52YWxpZCBlbWFpbC4gVHJ5IGFnYWluLiIKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0aW1lOiAhMCwKICAgICAgICAgICAgICAgICAgICBwcmVmaXhDb2xvcjogIiMwMDhjMjMiLAogICAgICAgICAgICAgICAgICAgIHByZWZpeDogIjxmcmllbmRfXz4iLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJlbWFpbFByb21wdCIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICAgICBlbWFpbFN1Y2Nlc3M6IFt7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImJhc2ljVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogIiZuYnNwOyIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDIwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHRpbWU6ICEwLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIHByZWZpeDogIjxtci4gcm9ib3Q+IiwKICAgICAgICAgICAgICAgICAgICBwcmVmaXhDb2xvcjogIiMwMDhjMjMiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICJ3ZSB3aWxsIGJlIGluIHRvdWNoLiIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDFlMwogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGNsZWFyOiAhMCwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFzaWNUZXh0IiwKICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAiJm5ic3A7IiwKICAgICAgICAgICAgICAgICAgICBkZWxheTogM2UzCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ0VudGVyIGNvbW1hbmQuIFR5cGUgImhlbHAiIHRvIHNlZSBhIGxpc3Qgb2YgY29tbWFuZHMuJywKICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICJyb290QGZzb2NpZXR5On4jICIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXNpY1RleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICImbmJzcDsiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiAyMDAKICAgICAgICAgICAgICAgIH0sIGldLAogICAgICAgICAgICAgICAgcXVlc3Rpb246IFt7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImltYWdlR2FsbGVyeSIsCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeU5hbWU6ICJGU29jaWV0eSBHYWxsZXJ5IiwKICAgICAgICAgICAgICAgICAgICB0cmFjazogewogICAgICAgICAgICAgICAgICAgICAgICBwcm9wMzogIkdhbGxlcnkiLAogICAgICAgICAgICAgICAgICAgICAgICBwcm9wNTogIk1yLiBSb2JvdCA6IFdobyBJcyBNci4gUm9ib3QgOiBGU29jaWV0eSBHYWxsZXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgcGFnZU5hbWU6ICJNci4gUm9ib3QgOiBXaG8gaXMgTXIuIFJvYm90IDogRlNvY2lldHkgR2FsbGVyeSA6IFBob3RvIDEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBpbWFnZXM6IFt7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImltYWdlcy9xdWVzdGlvbi9qZWZmZXJzb24uanBnIgogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaW1hZ2VzL3F1ZXN0aW9uL3N0ZWFscy5qcGciCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJpbWFnZXMvcXVlc3Rpb24vbWFkb2ZmLmpwZyIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImltYWdlcy9xdWVzdGlvbi9vd25lZC5qcGciCiAgICAgICAgICAgICAgICAgICAgfV0sCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDgwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdFbnRlciBjb21tYW5kLiBUeXBlICJoZWxwIiB0byBzZWUgYSBsaXN0IG9mIGNvbW1hbmRzLicsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAicm9vdEBmc29jaWV0eTp+IyAiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIGldLAogICAgICAgICAgICAgICAgZnNvY2lldHk6IFt7CiAgICAgICAgICAgICAgICAgICAgdmlkZW9OYW1lOiAiZnNvY2lldHkiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJmdWxsc2NyZWVuVmlkZW8iLAogICAgICAgICAgICAgICAgICAgIGNvdmVyOiAhMCwKICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJ2aWRlby9mc29jaWV0eS53ZWJtIiwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInZpZGVvL3dlYm0iCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJ2aWRlby9mc29jaWV0eS5tcDQiLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidmlkZW8vbXA0IgogICAgICAgICAgICAgICAgICAgIH1dLAogICAgICAgICAgICAgICAgICAgIHRyYWNrOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AzOiAiVmlkZW8iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNDAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ0VudGVyIGNvbW1hbmQuIFR5cGUgImhlbHAiIHRvIHNlZSBhIGxpc3Qgb2YgY29tbWFuZHMuJywKICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICJyb290QGZzb2NpZXR5On4jICIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfSwgaV0sCiAgICAgICAgICAgICAgICBwcmVwYXJlOiBbewogICAgICAgICAgICAgICAgICAgIHZpZGVvTmFtZTogInByZXBhcmUiLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJmdWxsc2NyZWVuVmlkZW8iLAogICAgICAgICAgICAgICAgICAgIGNvdmVyOiAhMCwKICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiBbewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJ2aWRlby9wcmVwYXJlLndlYm0iLAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAidmlkZW8vd2VibSIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogInZpZGVvL3ByZXBhcmUubXA0IiwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInZpZGVvL21wNCIKICAgICAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgICAgICB0cmFjazogewogICAgICAgICAgICAgICAgICAgICAgICBwcm9wMzogIlZpZGVvIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDQwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdFbnRlciBjb21tYW5kLiBUeXBlICJoZWxwIiB0byBzZWUgYSBsaXN0IG9mIGNvbW1hbmRzLicsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAicm9vdEBmc29jaWV0eTp+IyAiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIGldLAogICAgICAgICAgICAgICAgd2FrZXVwOiBbewogICAgICAgICAgICAgICAgICAgIHZpZGVvTmFtZTogIndha2V1cCIsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogImZ1bGxzY3JlZW5WaWRlbyIsCiAgICAgICAgICAgICAgICAgICAgY292ZXI6ICEwLAogICAgICAgICAgICAgICAgICAgIHNvdXJjZXM6IFt7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogInZpZGVvL3dha2V1cC53ZWJtIiwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInZpZGVvL3dlYm0iCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJ2aWRlby93YWtldXAubXA0IiwKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInZpZGVvL21wNCIKICAgICAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgICAgICB0cmFjazogewogICAgICAgICAgICAgICAgICAgICAgICBwcm9wMzogIlZpZGVvIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDgwMAogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdFbnRlciBjb21tYW5kLiBUeXBlICJoZWxwIiB0byBzZWUgYSBsaXN0IG9mIGNvbW1hbmRzLicsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAicm9vdEBmc29jaWV0eTp+IyAiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIGldLAogICAgICAgICAgICAgICAgNDIwOiBbewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJpbWFnZUdhbGxlcnkiLAogICAgICAgICAgICAgICAgICAgIGdhbGxlcnlOYW1lOiAiNDIwIEhpZGRlbiBJbWFnZSIsCiAgICAgICAgICAgICAgICAgICAgdHJhY2s6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDM6ICJHYWxsZXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDU6ICJNci4gUm9ib3QgOiBXaG8gaXMgTXIuIFJvYm90IDogNDIwIEhpZGRlbiBJbWFnZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VOYW1lOiAiTXIuIFJvYm90IDogV2hvIGlzIE1yLiBSb2JvdCA6IDQyMCBIaWRkZW4gSW1hZ2UiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBpbWFnZXM6IFt7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImltYWdlcy80MjAvNDIwLmpwZyIKICAgICAgICAgICAgICAgICAgICB9XSwKICAgICAgICAgICAgICAgICAgICBkZWxheTogNDAwCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ0VudGVyIGNvbW1hbmQuIFR5cGUgImhlbHAiIHRvIHNlZSBhIGxpc3Qgb2YgY29tbWFuZHMuJywKICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICJyb290QGZzb2NpZXR5On4jICIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfSwgaV0sCiAgICAgICAgICAgICAgICBpbmZvcm06IFt7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogImltYWdlR2FsbGVyeSIsCiAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeU5hbWU6ICJJbmZvcm0gR2FsbGVyeSIsCiAgICAgICAgICAgICAgICAgICAgdHJhY2s6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDM6ICJHYWxsZXJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDU6ICJNci4gUm9ib3QgOiBXaG8gSXMgTXIuIFJvYm90IDogSW5mb3JtIEdhbGxlcnkiLAogICAgICAgICAgICAgICAgICAgICAgICBwYWdlTmFtZTogIk1yLiBSb2JvdCA6IFdobyBpcyBNci4gUm9ib3QgOiBJbmZvcm0gR2FsbGVyeSA6IFBob3RvIDEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBpbWFnZXM6IFt7CiAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImltYWdlcy9oZWFkbGluZXMvZGVmbGF0ZWdhdGUuanBnIgogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiaW1hZ2VzL2hlYWRsaW5lcy9iaWxsaW9uYWlyZS5qcGciCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJpbWFnZXMvaGVhZGxpbmVzL2NyZWRpdGNhcmRzMi5qcGciCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJpbWFnZXMvaGVhZGxpbmVzL21ldGdhbGEuanBnIgogICAgICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogInR5cGVkVGV4dCIsCiAgICAgICAgICAgICAgICAgICAgY29udGVudDogJ0VudGVyIGNvbW1hbmQuIFR5cGUgImhlbHAiIHRvIHNlZSBhIGxpc3Qgb2YgY29tbWFuZHMuJywKICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICJyb290QGZzb2NpZXR5On4jICIsCiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IDUwMAogICAgICAgICAgICAgICAgfSwgaV0sCiAgICAgICAgICAgICAgICBtZW51UHJvbXB0OiBbewogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJ0eXBlZFRleHQiLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdFbnRlciBjb21tYW5kLiBUeXBlICJoZWxwIiB0byBzZWUgYSBsaXN0IG9mIGNvbW1hbmRzLicsCiAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAicm9vdEBmc29jaWV0eTp+IyAiLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA1MDAKICAgICAgICAgICAgICAgIH0sIGldLAogICAgICAgICAgICAgICAgbGl2ZTogW3sKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiYmFja2JvbmVWaWV3IiwKICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGRlbGF5OiA0MDAsCiAgICAgICAgICAgICAgICAgICAgdmlldzogIkxpdmUiCiAgICAgICAgICAgICAgICB9XQogICAgICAgICAgICB9OwogICAgICAgIGUuZXhwb3J0cyA9IG8KICAgIH0sIHt9XSwKICAgIDM6IFtmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBlID0gdCgiaG9nYW4uanMiKSwKICAgICAgICAgICAgICAgIG4gPSB7fTsKICAgICAgICAgICAgcmV0dXJuIG4uYXBwID0gbmV3IGUuVGVtcGxhdGUoewogICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpczsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5iKG4gPSBuIHx8ICIiKSwgci5iKCc8ZGl2IGNsYXNzPSJ0ZXJtaW5hbC13cmFwcGVyIj4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcgIDxkaXYgY2xhc3M9InRlcm1pbmFsLWNvbnRlbnQiPjwvZGl2PicpLCByLmIoIlxuIiArIG4pLCByLmIoJyAgPHRleHRhcmVhIGF1dG9jYXBpdGFsaXplPSJvZmYiIGlkPSJoaWRkZW4tdGV4dGFyZWEiPjwvdGV4dGFyZWE+JyksIHIuYigiXG4iICsgbiksIHIuYigiPC9kaXY+IiksIHIuYigiXG4iICsgbiksIHIuYignPGZvb3Rlcj48ZGl2IGNsYXNzPSJmb290ZXItbGlua3MiPjxzcGFuPjxhIGhyZWY9IiIgdGFyZ2V0PSJfYmxhbmsiPjwvYT48L3NwYW4+PHNwYW4+PGEgaHJlZj0iIiB0YXJnZXQ9Il9ibGFuayI+PC9hPjwvc3Bhbj48L2Rpdj48L2Zvb3Rlcj4nKSwgci5mbCgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGFydGlhbHM6IHt9LAogICAgICAgICAgICAgICAgc3Viczoge30KICAgICAgICAgICAgfSksIG4uYXJyb3cgPSBuZXcgZS5UZW1wbGF0ZSh7CiAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByLmIobiA9IG4gfHwgIiIpLCByLmIoJzxidXR0b24gY2xhc3M9IicpLCByLmIoci52KHIuZigiYnV0dG9uQ2xhc3MiLCB0LCBlLCAwKSkpLCByLmIoJyI+JyksIHIuYigiXG4iICsgbiksIHIuYignCTxzdmcgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2ZXJzaW9uPSIxLjEiIHZpZXdCb3g9IjAgMCAxNSAyMCIgd2lkdGg9IjEwMCUiIGhlaWdodD0iMTAwJSI+JyksIHIuYigiXG4iICsgbiksIHIuYignCSAgPHBvbHlnb24gcG9pbnRzPSInKSwgci5iKHIudihyLmYoInBvbHlnb25Qb2ludHMiLCB0LCBlLCAwKSkpLCByLmIoJyIgLz4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCIJPC9zdmc+IiksIHIuYigiXG4iICsgbiksIHIuYigiPC9idXR0b24+IiksIHIuZmwoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7fSwKICAgICAgICAgICAgICAgIHN1YnM6IHt9CiAgICAgICAgICAgIH0pLCBuLmNsb3NlID0gbmV3IGUuVGVtcGxhdGUoewogICAgICAgICAgICAgICAgY29kZTogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpczsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5iKG4gPSBuIHx8ICIiKSwgci5iKCc8YnV0dG9uIGNsYXNzPSJidG4tY2xvc2UiPicpLCByLmIoIlxuIiArIG4pLCByLmIoJwk8c3ZnIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmVyc2lvbj0iMS4xIiB2aWV3Qm94PSIwIDAgMTUgMjAiIHdpZHRoPSIxMDAlIiBoZWlnaHQ9IjEwMCUiPicpLCByLmIoIlxuIiArIG4pLCByLmIoJwkgIDxwb2x5Z29uIHBvaW50cz0iMCw0IDQsMCAxOSwxNSAxNSwxOSAiLz4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcJCTxwb2x5Z29uIHBvaW50cz0iMTUsMCAxOSw0IDQsMTkgMCwxNSAiLz4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCIJPC9zdmc+IiksIHIuYigiXG4iICsgbiksIHIuYigiPC9idXR0b24+IiksIHIuZmwoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7fSwKICAgICAgICAgICAgICAgIHN1YnM6IHt9CiAgICAgICAgICAgIH0pLCBuLmltYWdlZ2FsbGVyeSA9IG5ldyBlLlRlbXBsYXRlKHsKICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuYihuID0gbiB8fCAiIiksIHIuYignPGJ1dHRvbiBjbGFzcz0iYnRuLWNsb3NlIj4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcJPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgdmlld0JveD0iMCAwIDE1IDIwIiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSIxMDAlIj4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcJCTxwb2x5Z29uIHBvaW50cz0iMCwzIDMsMCAxOCwxNCAxNCwxOCAiLz4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcJCTxwb2x5Z29uIHBvaW50cz0iMTQsMCAxOCwzIDMsMTggMCwxNCAiLz4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCIJPC9zdmc+IiksIHIuYigiXG4iICsgbiksIHIuYigiPC9idXR0b24+IiksIHIuYigiXG4iICsgbiksIHIuYignPGRpdiBjbGFzcz0iaW1hZ2UtZ2FsbGVyeSI+JyksIHIuYigiXG4iICsgbiksIHIucyhyLmYoImltYWdlcyIsIHQsIGUsIDEpLCB0LCBlLCAwLCAyNzQsIDQxMiwgInt7IH19IikgJiYgKHIucnModCwgZSwgZnVuY3Rpb24odCwgZSwgcikgewogICAgICAgICAgICAgICAgICAgICAgICByLmIoJwk8ZGl2IGNsYXNzPSJpbWFnZS1pdGVtIj4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcJCTxpbWcgc3JjPSInKSwgci5iKHIudihyLmYoInNyYyIsIHQsIGUsIDApKSksIHIuYignIiAvPicpLCByLmIoIlxuIiArIG4pLCByLnMoci5mKCJjYXB0aW9uIiwgdCwgZSwgMSksIHQsIGUsIDAsIDMzOSwgMzkwLCAie3sgfX0iKSAmJiAoci5ycyh0LCBlLCBmdW5jdGlvbih0LCBlLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmIoJwkJCTxkaXYgY2xhc3M9ImltYWdlLWNhcHRpb24iPicpLCByLmIoci52KHIuZigiY2FwdGlvbiIsIHQsIGUsIDApKSksIHIuYigiPC9kaXY+IiksIHIuYigiXG4iICsgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSksIHQucG9wKCkpLCByLmIoIgk8L2Rpdj4iKSwgci5iKCJcbiIgKyBuKQogICAgICAgICAgICAgICAgICAgIH0pLCB0LnBvcCgpKSwgci5iKCI8L2Rpdj4iKSwgci5mbCgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGFydGlhbHM6IHt9LAogICAgICAgICAgICAgICAgc3Viczoge30KICAgICAgICAgICAgfSksIG4uaW5saW5laW1hZ2UgPSBuZXcgZS5UZW1wbGF0ZSh7CiAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByLmIobiA9IG4gfHwgIiIpLCByLmIoJzxkaXYgY2xhc3M9ImlubGluZS1pbWFnZSI+PGltZyBzcmM9IicpLCByLmIoci52KHIuZigiaW1hZ2UiLCB0LCBlLCAwKSkpLCByLmIoJyIgLz48L2Rpdj4nKSwgci5mbCgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGFydGlhbHM6IHt9LAogICAgICAgICAgICAgICAgc3Viczoge30KICAgICAgICAgICAgfSksIG4ubWVudSA9IG5ldyBlLlRlbXBsYXRlKHsKICAgICAgICAgICAgICAgIGNvZGU6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuYihuID0gbiB8fCAiIiksIHIuYignPGRpdiBjbGFzcz0ibGluZSI+Jm5ic3A7PC9kaXY+JyksIHIuYigiXG4iICsgbiksIHIuYignPGRpdiBjbGFzcz0ibGluZSI+JyksIHIuYigiXG4iICsgbiksIHIuYigiPHN0cm9uZz5Db21tYW5kczo8L3N0cm9uZz4iKSwgci5iKCJcbiIgKyBuKSwgci5iKCI8L2Rpdj4iKSwgci5iKCJcbiIgKyBuKSwgci5iKCc8ZGl2IGNsYXNzPSJsaW5lIj4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCcJPGRpdiBjbGFzcz0ibWVudSI+JyksIHIuYigiXG4iICsgbiksIHIucyhyLmYoImNvbW1hbmRzIiwgdCwgZSwgMSksIHQsIGUsIDAsIDEzNywgMjA2LCAie3sgfX0iKSAmJiAoci5ycyh0LCBlLCBmdW5jdGlvbih0LCBlLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHIucyhyLmYoImRpc3BsYXkiLCB0LCBlLCAxKSwgdCwgZSwgMCwgMTUyLCAxOTIsICJ7eyB9fSIpICYmIChyLnJzKHQsIGUsIGZ1bmN0aW9uKHQsIGUsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuYignCQkJPGRpdiBjbGFzcz0ibGluZSI+JyksIHIuYihyLnYoci5mKCJsYWJlbCIsIHQsIGUsIDApKSksIHIuYigiPC9kaXY+IiksIHIuYigiXG4iICsgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSksIHQucG9wKCkpCiAgICAgICAgICAgICAgICAgICAgfSksIHQucG9wKCkpLCByLmIoIgk8L2Rpdj4iKSwgci5iKCJcbiIgKyBuKSwgci5iKCI8L2Rpdj4iKSwgci5iKCJcbiIgKyBuKSwgci5iKCc8ZGl2IGNsYXNzPSJsaW5lIj4mbmJzcDs8L2Rpdj4nKSwgci5mbCgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGFydGlhbHM6IHt9LAogICAgICAgICAgICAgICAgc3Viczoge30KICAgICAgICAgICAgfSksIG4udmlkZW8gPSBuZXcgZS5UZW1wbGF0ZSh7CiAgICAgICAgICAgICAgICBjb2RlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByLmIobiA9IG4gfHwgIiIpLCByLmIoJzxidXR0b24gY2xhc3M9ImJ0bi1wbGF5Ij48L2J1dHRvbj4nKSwgci5iKCJcbiIgKyBuKSwgci5iKCc8dmlkZW8gaWQ9InJvYm90LXZpZGVvIiB3aWR0aD0iMTYwMCIgaGVpZ2h0PSI5MDAiIHByZWxvYWQ9ImF1dG8iIGF1dG9wbGF5PicpLCByLmIoIlxuIiArIG4pLCByLnMoci5mKCJzb3VyY2VzIiwgdCwgZSwgMSksIHQsIGUsIDAsIDEyMywgMTY2LCAie3sgfX0iKSAmJiAoci5ycyh0LCBlLCBmdW5jdGlvbih0LCBlLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHIuYignCQk8c291cmNlIHNyYz0iJyksIHIuYihyLnYoci5mKCJzcmMiLCB0LCBlLCAwKSkpLCByLmIoJyIgdHlwZT0iJyksIHIuYihyLnYoci5mKCJ0eXBlIiwgdCwgZSwgMCkpKSwgci5iKCciPicpLCByLmIoIlxuIiArIG4pCiAgICAgICAgICAgICAgICAgICAgfSksIHQucG9wKCkpLCByLmIoIglZb3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0aGUgdmlkZW8gdGFnLiIpLCByLmIoIlxuIiArIG4pLCByLmIoIjwvdmlkZW8+IiksIHIuZmwoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7fSwKICAgICAgICAgICAgICAgIHN1YnM6IHt9CiAgICAgICAgICAgIH0pLCBuCiAgICAgICAgfSgpCiAgICB9LCB7CiAgICAgICAgImhvZ2FuLmpzIjogMTMKICAgIH1dLAogICAgNDogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHIgPSB0KCJxIiksCiAgICAgICAgICAgIGkgPSB0KCJsb2Rhc2giKSwKICAgICAgICAgICAgbyA9IHQoIi4vdGVtcGxhdGVzIiksCiAgICAgICAgICAgIGEgPSB0KCJiYWNrYm9uZSIpLkV2ZW50cywKICAgICAgICAgICAgcyA9IHQoIi4vaW5zdHJ1Y3Rpb25zIiksCiAgICAgICAgICAgIHUgPSB0KCIuL3RyYWNrIiksCiAgICAgICAgICAgIGMgPSB0KCIuL3ZpZXdzL0ltYWdlR2FsbGVyeSIpLAogICAgICAgICAgICBsID0gdCgiLi92aWV3cy9GdWxsU2NyZWVuVmlkZW8iKSwKICAgICAgICAgICAgZiA9IHt9LAogICAgICAgICAgICBwID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgZnVuY3Rpb24gbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHQgKiBULCAxMCkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHIuZGVmZXIoKTsKICAgICAgICAgICAgICAgICAgICBxLmh0bWwodCksIGUucmVzb2x2ZSgpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gaCh0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSByLmRlZmVyKCk7CiAgICAgICAgICAgICAgICAgICAgdCAmJiAiIiAhPT0gdCAmJiBQLmh0bWwodCksIGUucmVzb2x2ZSgpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZCh0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAiIjsKICAgICAgICAgICAgICAgICAgICB0LnRpbWUgJiYgKGUgKz0gYigpICsgIiAiKSwgdC5wcmVmaXggJiYgKGUgKz0gdC5wcmVmaXggKyAiICIpLCB0LnByZWZpeENvbG9yICYmIFAuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHQucHJlZml4Q29sb3IKICAgICAgICAgICAgICAgICAgICB9KSwgdC5wcmVmaXhXZWlnaHQgJiYgUC5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiB0LnByZWZpeFdlaWdodAogICAgICAgICAgICAgICAgICAgIH0pLCBQLnRleHQoZSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnKCkgewogICAgICAgICAgICAgICAgICAgIE4uZm9jdXMoKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHYodCkgewogICAgICAgICAgICAgICAgICAgIEkgJiYgKHQucHJldmVudERlZmF1bHQoKSwgZygpKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHkodCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbUZyYW1lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbihvKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgbysrCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcS50ZXh0KGEgKyB0LnN1YnN0cigwLCBuKyspKSwgdC5sZW5ndGggPD0gbiAtIDEgPyBpLnJlc29sdmUoKSA6IGUoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHIuZGVmZXIoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBxLnRleHQoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSgpLCBpLnByb21pc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBtKCkgewogICAgICAgICAgICAgICAgICAgIEEuc2Nyb2xsVG9wKFMub3V0ZXJIZWlnaHQoKSAtIEEub3V0ZXJIZWlnaHQoKSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBiKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gbmV3IERhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAodC5nZXRIb3VycygpIDwgMTAgPyAiMCIgOiAiIikgKyB0LmdldEhvdXJzKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAodC5nZXRNaW51dGVzKCkgPCAxMCA/ICIwIiA6ICIiKSArIHQuZ2V0TWludXRlcygpLAogICAgICAgICAgICAgICAgICAgICAgICByID0gZSArICI6IiArIG47CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB4KCkgewogICAgICAgICAgICAgICAgICAgIG0oKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHcgPSBbXTsKICAgICAgICAgICAgICAgIHRoaXMucm91dGVyID0gZSwgdGhpcy5oYXNJbml0aWFsaXplZCA9ICExLCB0aGlzLmZpcnN0Qm9vdCA9ICEwOwogICAgICAgICAgICAgICAgdmFyIF8gPSBSRURJUkVDVCA/ICIvbWVudSIgOiAiLyIsCiAgICAgICAgICAgICAgICAgICAgayA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2xlYXJUaW1lb3V0cygpLCB0aGlzLmNsZWFyKCksIHRoaXMuY2xlYXJQb3B1cHMoKSwgbG9nKCJST1VURToiLCB0KSwgUkVESVJFQ1QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiIiA9PT0gdCB8fCAibGl2ZSIgPT09IHQpIHJldHVybiB2b2lkKHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gQkFTRV9VUkwgKyAiL2xpdmUvIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIm1lbnUiICE9PSB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJ1bmRlZmluZWQiID09IHR5cGVvZiBzW3RdKSByZXR1cm4gdm9pZCh3aW5kb3cubG9jYXRpb24uaHJlZiA9IEJBU0VfVVJMICsgIi9saXZlLyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQoc1t0XSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmZpcnN0Qm9vdCA/ICh0aGlzLmZpcnN0Qm9vdCA9ICExLCB0aGlzLnRyYWNrLm9tbmkoIkVtYWlsIFNpZ24tVXAiLCAiTG9hZGluZyBTZXF1ZW5jZSIpLCB0aGlzLnN0YXJ0KHMuaW5pdGlhbCkpIDogdGhpcy5zdGFydChzLm1lbnVQcm9tcHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIiIgIT09IHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2Ygc1t0XSkgcmV0dXJuIHZvaWQod2luZG93LmxvY2F0aW9uLmhyZWYgPSBCQVNFX1VSTCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0KHNbdF0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoImxpdmUiID09PSB0KSByZXR1cm4gdm9pZCh3aW5kb3cubG9jYXRpb24uaHJlZiA9IEJBU0VfVVJMICsgIi9saXZlLyIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJzdEJvb3QgPyAodGhpcy5maXJzdEJvb3QgPSAhMSwgdGhpcy50cmFjay5vbW5pKCJFbWFpbCBTaWduLVVwIiwgIkxvYWRpbmcgU2VxdWVuY2UiKSwgdGhpcy5zdGFydChzLmluaXRpYWwpKSA6IHRoaXMuc3RhcnQocy5tZW51UHJvbXB0KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGdhKCJzZW5kIiwgInBhZ2V2aWV3IiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZTogIi8iICsgdAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSwKICAgICAgICAgICAgICAgICAgICBUID0gLjM7CiAgICAgICAgICAgICAgICBpLmV4dGVuZCh0aGlzLCBhKTsKICAgICAgICAgICAgICAgIHZhciBFLCBqID0gJCh3aW5kb3cpLAogICAgICAgICAgICAgICAgICAgIEMgPSAkKGRvY3VtZW50KSwKICAgICAgICAgICAgICAgICAgICBTID0gdCwKICAgICAgICAgICAgICAgICAgICBBID0gJCgiLnRlcm1pbmFsLXdyYXBwZXIiKSwKICAgICAgICAgICAgICAgICAgICBOID0gJCgiI2hpZGRlbi10ZXh0YXJlYSIpLAogICAgICAgICAgICAgICAgICAgIFIgPSAwLAogICAgICAgICAgICAgICAgICAgIEkgPSAhMSwKICAgICAgICAgICAgICAgICAgICBPID0ge30sCiAgICAgICAgICAgICAgICAgICAgTCA9IFtdOwogICAgICAgICAgICAgICAgdGhpcy50cmFjayA9IG5ldyB1OwogICAgICAgICAgICAgICAgdmFyIEQgPSAkKCI8c3BhbiAvPiIpLmFkZENsYXNzKCJwcm9tcHQiKS5odG1sKCImbmJzcDsiKSwKICAgICAgICAgICAgICAgICAgICBQID0gJCgiPHNwYW4gLz4iKS5hZGRDbGFzcygicHJlZml4IiksCiAgICAgICAgICAgICAgICAgICAgcSA9ICQoIjxzcGFuIC8+IikuYWRkQ2xhc3MoImlucHV0IiksCiAgICAgICAgICAgICAgICAgICAgSCA9ICQoIjxkaXYgLz4iKS5hZGRDbGFzcygibGluZSIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucnVuRXhpdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKQogICAgICAgICAgICAgICAgfSwgdGhpcy5hcHBlbmQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgUy5hcHBlbmQodCkKICAgICAgICAgICAgICAgIH0sIHRoaXMuY2xlYXJUaW1lb3V0cyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJUaW1lb3V0KHRoaXMuaXRlbVRpbWVvdXQpLCB0aGlzLmNsZWFyVGltZW91dCh0aGlzLnR5cGVUaW1lb3V0KQogICAgICAgICAgICAgICAgfSwgdGhpcy5jbGVhclRpbWVvdXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgIm51bWJlciIgPT0gdHlwZW9mIHQgJiYgd2luZG93LmNsZWFyVGltZW91dCh0KQogICAgICAgICAgICAgICAgfSwgdGhpcy5jaGFuZ2VJbnN0cnVjdGlvbnMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRzKCksIHRoaXMuY2xlYXIoKSwgdGhpcy5jbGVhclBvcHVwcygpLCB0aGlzLnN0YXJ0KHNbdF0pCiAgICAgICAgICAgICAgICB9LCB0aGlzLm9uKCJleGl0IiwgdGhpcy5ydW5FeGl0LmJpbmQodGhpcykpLCB0aGlzLm9uKCJpbnN0cnVjdGlvbnM6Y2hhbmdlIiwgdGhpcy5jaGFuZ2VJbnN0cnVjdGlvbnMpLCB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZExpc3RlbmVycygpLCB0aGlzLmNsZWFyKCksIHRoaXMuaGFzSW5pdGlhbGl6ZWQgPSAhMAogICAgICAgICAgICAgICAgfSwgdGhpcy5zdGFydCA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBSID0gMCwgRSA9IHQsIHRoaXMucnVuKCkKICAgICAgICAgICAgICAgIH0sIHRoaXMucnVuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBFW1JdOwogICAgICAgICAgICAgICAgICAgIHRoaXMucnVuSXRlbSh0KQogICAgICAgICAgICAgICAgfSwgdGhpcy5ydW5JdGVtID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICJ1bmRlZmluZWQiICE9IHR5cGVvZiB0ICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIHRoaXNbdC50eXBlXSAmJiAodGhpcy5pdGVtVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzW3QudHlwZV0odCkKICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcyksIG4odC5kZWxheSkpKQogICAgICAgICAgICAgICAgfSwgdGhpcy5tZW51T3B0aW9ucyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBPID0gdC5vcHRpb25zLCB0aGlzLmRpc3BsYXlNZW51KCksIHRoaXMubmV4dEl0ZW0oKQogICAgICAgICAgICAgICAgfSwgdGhpcy50eXBlZFRleHQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdC5jbGVhciAmJiB0aGlzLmNsZWFyKCksIHQucGxheVNvdW5kICYmIGNyZWF0ZWpzLlNvdW5kLnBsYXkodC5wbGF5U291bmQpOwogICAgICAgICAgICAgICAgICAgIHZhciBlID0gMDsKICAgICAgICAgICAgICAgICAgICB0LnByZWZpeCAmJiAoaChkKHQpKSwgZSA9IDEyMDApLCB0aGlzLnR5cGVUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHkodC5jb250ZW50KS50aGVuKHRoaXMuaGFuZGxlVHlwaW5nLmJpbmQodGhpcykpCiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLCBlKQogICAgICAgICAgICAgICAgfSwgdGhpcy5pbWFnZUdhbGxlcnkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgRC5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBjKHsKICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VzOiB0LmltYWdlcywKICAgICAgICAgICAgICAgICAgICAgICAgZ2FsbGVyeU5hbWU6IHQuZ2FsbGVyeU5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrOiB0LnRyYWNrCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdy5wdXNoKGUpLCBlLiRlbC5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwCiAgICAgICAgICAgICAgICAgICAgfSksIGUub24oImxvYWRlZCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBlLiRlbC5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pLCBlLm9uKCJjbG9zZWQiLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVOZXdMaW5lKCksIHRoaXMubmV4dEl0ZW0oKSwgdGhpcy5yb3V0ZXIubmF2aWdhdGUoXywgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogITAKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9LmJpbmQodGhpcykpLCAkKCIjYXBwIikuYXBwZW5kKGUucmVuZGVyKCkuYWRkTGlzdGVuZXJzKCkuJGVsKQogICAgICAgICAgICAgICAgfSwgdGhpcy5oYW5kbGVUeXBpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAiY29udGludWVUeXBlZFRleHQiID09PSBFW1IgKyAxXS50eXBlID8gdGhpcy5uZXh0SXRlbSgpIDogKHRoaXMuaGFuZGxlTmV3TGluZSgpLCB0aGlzLm5leHRJdGVtKCkpCiAgICAgICAgICAgICAgICB9LCB0aGlzLmNsZWFyUG9wdXBzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDAsIGUgPSB3Lmxlbmd0aDsgZSA+IHQ7IHQrKykgd1t0XS5yZW1vdmVFbCgpCiAgICAgICAgICAgICAgICB9LCB0aGlzLmJhY2tib25lVmlldyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBmW3Qudmlld10odC5vcHRpb25zKTsKICAgICAgICAgICAgICAgICAgICB3LnB1c2goZSksIGUub24oImNsb3NlZCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU5ld0xpbmUoKSwgdGhpcy5uZXh0SXRlbSgpLCB0aGlzLnJvdXRlci5uYXZpZ2F0ZShfLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAhMAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSksICQoIiNhcHAiKS5hcHBlbmQoZS5yZW5kZXIoKS5hZGRMaXN0ZW5lcnMoKS4kZWwpCiAgICAgICAgICAgICAgICB9LCB0aGlzLmZ1bGxzY3JlZW5WaWRlbyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBELnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgIHZhciBlID0gbmV3IGwoewogICAgICAgICAgICAgICAgICAgICAgICB2aWRlb05hbWU6IHQudmlkZW9OYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiB0LnNvdXJjZXMsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdmVyOiB0LmNvdmVyLAogICAgICAgICAgICAgICAgICAgICAgICB0cmFjazogdC50cmFjawogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHcucHVzaChlKSwgZS5vbigiZW5kZWQiLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVOZXdMaW5lKCksIHRoaXMubmV4dEl0ZW0oKQogICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKSksICQoIiNhcHAiKS5hcHBlbmQoZS5yZW5kZXIoKS5hZGRMaXN0ZW5lcnMoKS4kZWwpLCBlLnBsYXkoKQogICAgICAgICAgICAgICAgfSwgdGhpcy5jb250aW51ZVR5cGVkVGV4dCA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB0Lm5ld2xpbmUgJiYgdGhpcy5oYW5kbGVOZXdMaW5lKCksIHkoIiAiICsgdC5jb250ZW50KS50aGVuKHRoaXMuaGFuZGxlVHlwaW5nLmJpbmQodGhpcykpCiAgICAgICAgICAgICAgICB9LCB0aGlzLmJhc2ljVGV4dCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB0LmNsZWFyICYmIHRoaXMuY2xlYXIoKSwgdC50cmFjayAmJiB0aGlzLnRyYWNrLm9tbmkodm9pZCAwLCB2b2lkIDAsIHQudHJhY2spLCBoKGQodCkpLCBwKHQuY29udGVudCksIHQuY2xhc3NOYW1lICYmIHEuYWRkQ2xhc3ModC5jbGFzc05hbWUpLCB0LmNvbG9yICYmIHEuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHQuY29sb3IKICAgICAgICAgICAgICAgICAgICB9KSwgdC5wbGF5U291bmQgJiYgY3JlYXRlanMuU291bmQucGxheSh0LnBsYXlTb3VuZCksIHRoaXMuaGFuZGxlTmV3TGluZSgpLCBxLnJlbW92ZUNsYXNzKHQuY2xhc3NOYW1lKSwgZSB8fCB0aGlzLm5leHRJdGVtKCkKICAgICAgICAgICAgICAgIH0sIHRoaXMuaW5saW5lSW1hZ2UgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdC5jbGVhciAmJiB0aGlzLmNsZWFyKCksIHQudHJhY2sgJiYgdGhpcy50cmFjay5vbW5pKHZvaWQgMCwgdm9pZCAwLCB0LnRyYWNrKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBJbWFnZTsKICAgICAgICAgICAgICAgICAgICBuLm9ubG9hZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBtKCkKICAgICAgICAgICAgICAgICAgICB9LCBuLnNyYyA9IHQuY29udGVudCwgcChvLmlubGluZWltYWdlLnJlbmRlcih7CiAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlOiB0LmNvbnRlbnQKICAgICAgICAgICAgICAgICAgICB9KSksIHQuY2xhc3NOYW1lICYmIHEuYWRkQ2xhc3ModC5jbGFzc05hbWUpLCB0LmNvbG9yICYmIHEuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IHQuY29sb3IKICAgICAgICAgICAgICAgICAgICB9KSwgdC5wbGF5U291bmQgJiYgY3JlYXRlanMuU291bmQucGxheSh0LnBsYXlTb3VuZCksIHRoaXMuaGFuZGxlTmV3TGluZSgpLCBxLnJlbW92ZUNsYXNzKHQuY2xhc3NOYW1lKSwgbSgpLCBlIHx8IHRoaXMubmV4dEl0ZW0oKQogICAgICAgICAgICAgICAgfSwgdGhpcy51c2VyUHJvbXB0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIGgoZCh0KSksIHRoaXMucHJvbXB0KHQub3B0aW9ucykKICAgICAgICAgICAgICAgIH0sIHRoaXMuZW1haWxQcm9tcHQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgaChkKHQpKSwgZygpLCBJID0gITAKICAgICAgICAgICAgICAgIH0sIHRoaXMubmV4dEl0ZW0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBSKyssIHRoaXMucnVuKCkKICAgICAgICAgICAgICAgIH0sIHRoaXMuY2xlYXIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBTLmVtcHR5KCksIHRoaXMuc3RhcnRMaW5lKCkKICAgICAgICAgICAgICAgIH0sIHRoaXMuc3RhcnRMaW5lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgSC5hcHBlbmQoUCkuYXBwZW5kKHEpLmFwcGVuZChEKSwgUy5hcHBlbmQoSCkKICAgICAgICAgICAgICAgIH0sIHRoaXMucHJvbXB0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIE8gPSB0LCBJID0gITAsIGcoKQogICAgICAgICAgICAgICAgfSwgdGhpcy5zdWJtaXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBJID0gITEsIHRoaXMuaGFuZGxlTmV3TGluZSgpLCBOLmJsdXIoKSwgImVtYWlsUHJvbXB0IiA9PT0gRVtSXS50eXBlID8gdGhpcy5pbnRlcnByZXRFbWFpbChMW0wubGVuZ3RoIC0gMV0uaW5wdXQpIDogdGhpcy5pbnRlcnByZXQoTFtMLmxlbmd0aCAtIDFdLmlucHV0KQogICAgICAgICAgICAgICAgfSwgdGhpcy5oYW5kbGVOZXdMaW5lID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yZUNvbW1hbmQoKSwgcS5lbXB0eSgpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiaW5oZXJpdCIKICAgICAgICAgICAgICAgICAgICB9KSwgUC5lbXB0eSgpLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAiaW5oZXJpdCIKICAgICAgICAgICAgICAgICAgICB9KSwgTi52YWwoIiIpLCB0aGlzLnN0YXJ0TGluZSgpLCBtKCkKICAgICAgICAgICAgICAgIH0sIHRoaXMuaW50ZXJwcmV0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCBuID0gTy5jb21tYW5kcy5sZW5ndGg7IG4gPiBlOyBlKyspCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm1hdGNoKE8uY29tbWFuZHNbZV0ucmVnZXgpKSByZXR1cm4gY3JlYXRlanMuU291bmQucGxheSgiaW5pdCIpLCBPLmNvbW1hbmRzW2VdLm5hdmlnYXRlICYmIHRoaXMucm91dGVyLm5hdmlnYXRlKCIvIiArIHQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXI6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBPLmNvbW1hbmRzW2VdLm9uc2VsZWN0LmNhbGwodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheUVycm9yKCkKICAgICAgICAgICAgICAgIH0sIHRoaXMuaW50ZXJwcmV0RW1haWwgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCJlbWFpbDpzdWJtaXQiLCB0KQogICAgICAgICAgICAgICAgfSwgdGhpcy5kaXNwbGF5TWVudSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIEQucmVtb3ZlKCksIHRoaXMuc3RvcmVDb21tYW5kKCksIHRoaXMuYmFzaWNUZXh0KHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogby5tZW51LnJlbmRlcih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kczogTy5jb21tYW5kcwogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0sICEwKQogICAgICAgICAgICAgICAgfSwgdGhpcy5kaXNwbGF5RXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU5ld0xpbmUoKSwgY3JlYXRlanMuU291bmQucGxheSgiaW5jb3JyZWN0IiksIHEudGV4dCgiRXJyb3I6IENvbW1hbmQgbm90IHJlY29nbml6ZWQuIFR5cGUgaGVscCBmb3IgYSBsaXN0IG9mIGNvbW1hbmRzLiIpLmFkZENsYXNzKCJlcnJvciIpLCB0aGlzLmhhbmRsZU5ld0xpbmUoKSwgdGhpcy5ydW4oKQogICAgICAgICAgICAgICAgfSwgdGhpcy5zdG9yZUNvbW1hbmQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBELnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gSC5jbG9uZSgpOwogICAgICAgICAgICAgICAgICAgIFMuYXBwZW5kKHQpLCBMLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogcS50ZXh0KCksCiAgICAgICAgICAgICAgICAgICAgICAgIGVsOiB0CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sIHRoaXMuYWRkTGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgQy5vbigia2V5ZG93biIsIHRoaXMua2V5ZG93bkhhbmRsZXIuYmluZCh0aGlzKSksIEMub24oImtleXVwIiwgdGhpcy5rZXl1cEhhbmRsZXIuYmluZCh0aGlzKSksIEMub24oImNsaWNrIiwgdiksIEMub24oInRvdWNoc3RhcnQiLCAiLmxpbmU6bGFzdCIsIHYpLCBqLm9uKCJyZXNpemUiLCB4KSwgTi5vbigiaW5wdXQiLCB0aGlzLmhhbmRsZVRleHRJbnB1dCkKICAgICAgICAgICAgICAgIH0sIHRoaXMua2V5ZG93bkhhbmRsZXIgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LmtleUNvZGUgPyB0LmtleUNvZGUgOiB0LndoaWNoOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAxMyA9PT0gZSA/ICh0LnByZXZlbnREZWZhdWx0KCksIHZvaWQgdGhpcy5zdWJtaXQoKSkgOiB2b2lkIDAKICAgICAgICAgICAgICAgIH0sIHRoaXMua2V5dXBIYW5kbGVyID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5rZXlDb2RlID8gdC5rZXlDb2RlIDogdC53aGljaDsKICAgICAgICAgICAgICAgICAgICAoOCA9PT0gZSB8fCA0NiA9PT0gZSkgJiYgdGhpcy5oYW5kbGVUZXh0SW5wdXQoKQogICAgICAgICAgICAgICAgfSwgdGhpcy5oYW5kbGVUZXh0SW5wdXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBJICYmIHEudGV4dChOLnZhbCgpKQogICAgICAgICAgICAgICAgfSwgdGhpcy5iYWNrc3BhY2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoSSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHEudGV4dCgpOwogICAgICAgICAgICAgICAgICAgICAgICBxLnRleHQodC5zdWJzdHJpbmcoMCwgdC5sZW5ndGggLSAxKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCB0aGlzLmluaXQoKSwgdGhpcy5yb3V0ZXIub24oInJvdXRlIiwgayksIHRoaXMKICAgICAgICAgICAgfTsKICAgICAgICBlLmV4cG9ydHMgPSBwCiAgICB9LCB7CiAgICAgICAgIi4vaW5zdHJ1Y3Rpb25zIjogMiwKICAgICAgICAiLi90ZW1wbGF0ZXMiOiAzLAogICAgICAgICIuL3RyYWNrIjogNSwKICAgICAgICAiLi92aWV3cy9GdWxsU2NyZWVuVmlkZW8iOiA3LAogICAgICAgICIuL3ZpZXdzL0ltYWdlR2FsbGVyeSI6IDgsCiAgICAgICAgYmFja2JvbmU6IDksCiAgICAgICAgbG9kYXNoOiAxNiwKICAgICAgICBxOiAxNwogICAgfV0sCiAgICA1OiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICJ1c2Ugc3RyaWN0IjsKICAgICAgICB2YXIgciA9IHQoImxvZGFzaCIpLAogICAgICAgICAgICBpID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB0aGlzLm9tbmkgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5udWxsaWZ5KCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAiTXIuIFJvYm90IiwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICJXaG8gSXMgTXIuIFJvYm90IiwKICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQsIGUgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSAoaSArICIgOiAiICsgbyArICIgOiAiICsgZS5qb2luKCIgOiAiKSkucmVwbGFjZSgvXCA6ICQvLCAiIikKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBzLnBhZ2VOYW1lID0gYSh0LCBlKSwgcy5wcm9wMiA9ICJEcmFtYSIsIHMucHJvcDMgPSAiRmVhdHVyZXMiLCBzLnByb3A0ID0gaSArICIgOiAiICsgbywgcy5wcm9wNSA9IGkgKyAiIDogIiArIG8gKyAiIDogIiArIHQsIHMucHJvcDggPSAiQ2FibGUiLCBzLnByb3A5ID0gIlVTQSBOZXR3b3JrIiwgcy5wcm9wMTAgPSBpLCBzLnByb3AzMiA9ICJOZXcgU2l0ZSIsIHMucHJvcDYwID0gIk5vdCBTcG9uc29yZWQiLCAoIkZTb2NpZXR5IEdhbGxlcnkiID09PSB0IHx8ICI0MjAgSGlkZGVuIEltYWdlIiA9PT0gdCkgJiYgKHMucHJvcDMgPSAiR2FsbGVyeSIpLCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgbiAmJiByLmV4dGVuZChzLCBuKSwgZSA/ICgiVmlkZW8iID09PSBlLnN1YlNlY3Rpb24gJiYgKHMucHJvcDMgPSAiVmlkZW8iKSwgLTEgIT09IGUuaW5kZXhPZigiQW5zd2VyIikgPyAocy5saW5rVHJhY2tWYXJzID0gImV2ZW50cyxldmVudDYscHJvcDU5LGVWYXI1OSIsIHMubGlua1RyYWNrRXZlbnRzID0gImV2ZW50NixldmVudDg5Iiwgcy5ldmVudHMgPSAiZXZlbnQ2LGV2ZW50ODkiLCBzLnByb3A1OSA9IHMuZVZhcjU5ID0gdCArICIgOiAiICsgZSwgcy50KHMsICJvIiwgIkFuc3dlciIpKSA6IC0xICE9PSBlLmluZGV4T2YoIlF1ZXN0aW9uIikgPyAocy5saW5rVHJhY2tWYXJzID0gImV2ZW50cyxldmVudDYscHJvcDU4LGVWYXI1OCIsIHMubGlua1RyYWNrRXZlbnRzID0gImV2ZW50NixldmVudDg4Iiwgcy5ldmVudHMgPSAiZXZlbnQ2LGV2ZW50ODgiLCBzLnByb3A1OCA9IHMuZVZhcjU4ID0gdCArICIgOiAiICsgZSwgcy50KHMsICJvIiwgIlBvbGwiKSkgOiAtMSAhPT0gZS5pbmRleE9mKCJWaWV3IFByb2dyZXNzIikgPyAocy5wYWdlTmFtZSA9IGkgKyAiIDogIiArIG8gKyAiIDogVmlldyBQcm9ncmVzcyIsIHMudHJhY2socywgIm8iLCBzLnBhZ2VOYW1lKSkgOiBzLnRyYWNrKHMsICJvIiwgcy5wYWdlTmFtZSkpIDogcy50cmFjayhzLCAibyIsIHMucGFnZU5hbWUpLCBsb2cocywgcy5wYWdlTmFtZSwgcy5wcm9wMywgcy5wcm9wNCwgcy5wcm9wNSkKICAgICAgICAgICAgICAgIH0sIHRoaXMuY2xpY2sgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5udWxsaWZ5KCksIHMubGlua1RyYWNrVmFycyA9ICJldmVudHMsZVZhcjY1LHByb3A2NSIsIHMubGlua1RyYWNrRXZlbnRzID0gImV2ZW50NjUiLCBzLmV2ZW50cyA9ICJldmVudDY1Iiwgcy5lVmFyNjUgPSBzLnByb3A2NSA9IHQsIHMudGwodGhpcywgIm8iLCAiUGFnZSBJdGVtIENsaWNrIiksIHMubWFuYWdlVmFycygiY2xlYXJWYXJzIiwgcy5saW5rVHJhY2tWYXJzLCAxKQogICAgICAgICAgICAgICAgfSwgdGhpcy5udWxsaWZ5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcy5wYWdlTmFtZSA9ICIiLCBzLnByb3AyID0gIiIsIHMucHJvcDMgPSAiIiwgcy5wcm9wNCA9ICIiLCBzLnByb3A1ID0gIiIsIHMucHJvcDggPSAiIiwgcy5wcm9wOSA9ICIiLCBzLnByb3AxMCA9ICIiLCBzLnByb3AzMSA9ICIiLCBzLnByb3AzMiA9ICIiLCBzLnByb3A1OCA9ICIiLCBzLnByb3A1OSA9ICIiLCBzLnByb3A2MCA9ICIiLCBzLmVWYXI1OCA9ICIiLCBzLmVWYXI1OSA9ICIiLCBzLmVWYXI3MyA9ICIiLCBzLmVWYXI3NCA9ICIiLCBzLmV2ZW50cyA9ICIiLCBzLmxpbmtUcmFja1ZhcnMgPSAiTm9uZSIsIHMubGlua1RyYWNrRXZlbnRzID0gIk5vbmUiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgZS5leHBvcnRzID0gaQogICAgfSwgewogICAgICAgIGxvZGFzaDogMTYKICAgIH1dLAogICAgNjogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHIgPSB0KCJsb2Rhc2giKSwKICAgICAgICAgICAgaSA9IHQoImJhY2tib25lIiksCiAgICAgICAgICAgIG8gPSB0KCIuLi90ZW1wbGF0ZXMiKSwKICAgICAgICAgICAgYSA9IHQoIi4uL3Rlcm1pbmFsIiksCiAgICAgICAgICAgIHMgPSB0KCIuLi9pbnN0cnVjdGlvbnMiKSwKICAgICAgICAgICAgdSA9IHQoInN1cGVyYWdlbnQiKTsKICAgICAgICBpLiQgPSAkOwogICAgICAgIHZhciBjID0gaS5Sb3V0ZXIuZXh0ZW5kKHsKICAgICAgICAgICAgICAgIHJvdXRlczogewogICAgICAgICAgICAgICAgICAgICIiOiAiIiwKICAgICAgICAgICAgICAgICAgICBpbmZvcm06ICJpbmZvcm0iLAogICAgICAgICAgICAgICAgICAgIDQyMDogIjQyMCIsCiAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb246ICJxdWVzdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgd2FrZXVwOiAid2FrZXVwIiwKICAgICAgICAgICAgICAgICAgICBqb2luOiAiam9pbiIsCiAgICAgICAgICAgICAgICAgICAgcHJlcGFyZTogInByZXBhcmUiLAogICAgICAgICAgICAgICAgICAgIGZzb2NpZXR5OiAiZnNvY2lldHkiLAogICAgICAgICAgICAgICAgICAgIG1lbnU6ICJtZW51IiwKICAgICAgICAgICAgICAgICAgICAiKnBhdGgiOiAiZGVmYXVsdCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIGwgPSBpLlZpZXcuZXh0ZW5kKHsKICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBvLmFwcCwKICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHIuYmluZEFsbCh0aGlzKSwgdGhpcy5yb3V0ZXIgPSBuZXcgYywgdGhpcy5yZW5kZXIoKSwgdGhpcy5wcmVwYXJlU291bmRzKCksIHRoaXMudGVybWluYWwgPSBuZXcgYSh0aGlzLiQoIi50ZXJtaW5hbC1jb250ZW50IiksIHRoaXMucm91dGVyKSwgdGhpcy5hZGRIYW5kbGVycygpLCBpLmhpc3Rvcnkuc3RhcnQoewogICAgICAgICAgICAgICAgICAgICAgICBwdXNoU3RhdGU6ICEwCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwcmVwYXJlU291bmRzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBjcmVhdGVqcy5Tb3VuZC5pbml0aWFsaXplRGVmYXVsdFBsdWdpbnMoKSB8fCBsb2coIm5vIHNvdW5kcyIpOwogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gIi9hdWRpby8iLAogICAgICAgICAgICAgICAgICAgICAgICBlID0gW3sKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogImh1bV9sb29wLm9nZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImh1bSIKICAgICAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiAiYmVlcDIub2dnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAiaW5jb3JyZWN0IgogICAgICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6ICJiZWVwLm9nZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogImluaXQiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogInR5cGUub2dnIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAidHlwZSIKICAgICAgICAgICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlanMuU291bmQuYWx0ZXJuYXRlRXh0ZW5zaW9ucyA9IFsibXAzIl0sIGNyZWF0ZWpzLlNvdW5kLnJlZ2lzdGVyU291bmRzKGUsIHQpLCBjcmVhdGVqcy5Tb3VuZC5zZXRWb2x1bWUoLjQpLCAkKHdpbmRvdykub24oImNsaWNrIHRvdWNoc3RhcnQga2V5ZG93biBrZXlwcmVzcyIsIHRoaXMuaW5pdEF1ZGlvKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGluaXRBdWRpbzogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBjcmVhdGVqcy5Tb3VuZC5wbGF5KCJodW0iKTsKICAgICAgICAgICAgICAgICAgICB0LnBhdXNlKCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC5vbigidmlkZW86cGxheSIsIHRoaXMuc3RhcnRWaWRlbyksIHRoaXMudGVybWluYWwub24oImVtYWlsOnN1Ym1pdCIsIHRoaXMuc3VibWl0RW1haWwpLCB0aGlzLnRlcm1pbmFsLmNsZWFyKCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWJtaXRFbWFpbDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGUodCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IC9eKChbXjw+KClbXF1cXC4sOzpcc0BcIl0rKFwuW148PigpW1xdXFwuLDs6XHNAXCJdKykqKXwoXCIuK1wiKSlAKChcW1swLTldezEsM31cLlswLTldezEsM31cLlswLTldezEsM31cLlswLTldezEsM31cXSl8KChbYS16QS1aXC0wLTldK1wuKStbYS16QS1aXXsyLH0pKSQvOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KHQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGUodCkgPyB0aGlzLnBvc3RFbWFpbCh0KSA6IHRoaXMuaGFuZGxlRW1haWxFcnJvcigpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaGFuZGxlRW1haWxFcnJvcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXJtaW5hbC5zdGFydChzLmVtYWlsRXJyb3IpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcG9zdEVtYWlsOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdS5wb3N0KCIiKS50eXBlKCJmb3JtIikuc2VuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsOiB0CiAgICAgICAgICAgICAgICAgICAgfSkuZW5kKHRoaXMuaGFuZGxlRW1haWxSZXNwb25zZSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBoYW5kbGVFbWFpbFJlc3BvbnNlOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgLy8iZXJyb3IiID09PSB0LmJvZHkudHlwZSA/IHRoaXMuaGFuZGxlRW1haWxFcnJvcigpIDogdGhpcy5oYW5kbGVFbWFpbFN1Y2Nlc3MoKQogICAgICAgICAgICAgICAgICAgIHRoaXMudGVybWluYWwuc3RhcnQocy5lbWFpbFN1Y2Nlc3MpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaGFuZGxlRW1haWxTdWNjZXNzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnRlcm1pbmFsLnN0YXJ0KHMuZW1haWxTdWNjZXNzKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlLnJlbmRlcigpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICBlLmV4cG9ydHMgPSBsCiAgICB9LCB7CiAgICAgICAgIi4uL2luc3RydWN0aW9ucyI6IDIsCiAgICAgICAgIi4uL3RlbXBsYXRlcyI6IDMsCiAgICAgICAgIi4uL3Rlcm1pbmFsIjogNCwKICAgICAgICBiYWNrYm9uZTogOSwKICAgICAgICBsb2Rhc2g6IDE2LAogICAgICAgIHN1cGVyYWdlbnQ6IDE4CiAgICB9XSwKICAgIDc6IFtmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgInVzZSBzdHJpY3QiOwogICAgICAgIHZhciByID0gdCgibG9kYXNoIiksCiAgICAgICAgICAgIGkgPSB0KCJiYWNrYm9uZSIpLAogICAgICAgICAgICBvID0gdCgiLi4vdGVtcGxhdGVzIiksCiAgICAgICAgICAgIGEgPSB0KCIuLi90cmFjayIpLAogICAgICAgICAgICBzID0gbmV3IGE7CiAgICAgICAgaS4kID0gJDsKICAgICAgICB2YXIgdSA9ICQod2luZG93KSwKICAgICAgICAgICAgYyA9IGkuVmlldy5leHRlbmQoewogICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAidmlkZW8tY29udGFpbmVyIiwKICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBvLnZpZGVvLAogICAgICAgICAgICAgICAgZXZlbnRzOiB7CiAgICAgICAgICAgICAgICAgICAgImNsaWNrIHZpZGVvIjogInBsYXkiLAogICAgICAgICAgICAgICAgICAgICJjbGljayAuYnRuLXBsYXkiOiAicGxheSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgci5iaW5kQWxsKHRoaXMpLCByLmV4dGVuZCh0aGlzLCB0KSwgci5leHRlbmQodGhpcywgaS5FdmVudHMpLCBzLm9tbmkodGhpcy52aWRlb05hbWUsIHZvaWQgMCwgdGhpcy50cmFjaykKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvblZpZGVvRW5kOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVycygpLCB0aGlzLnRyaWdnZXIoImVuZGVkIiksIHRoaXMucmVtb3ZlRWwoKSwgcy5vbW5pKCJIZWxwIikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZW1vdmVFbDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKSwgdGhpcy51bmJpbmQoKSwgdGhpcy5yZW1vdmUoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kKCJ2aWRlbyIpLm9mZigiZW5kZWQiLCB0aGlzLm9uVmlkZW9FbmQpLCB1Lm9mZigicmVzaXplIiwgdGhpcy5oYW5kbGVSZXNpemUpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcGxheTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJCgidmlkZW8iKVswXS5wbGF5KCksIHRoaXMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhZGRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiQoInZpZGVvIikub24oImVuZGVkIiwgdGhpcy5vblZpZGVvRW5kKSwgdGhpcy4kKCJ2aWRlbyIpLm9uKCJwbGF5IiwgdGhpcy5yZW1vdmVQbGF5QnV0dG9uKSwgdS5vbigicmVzaXplIiwgdGhpcy5oYW5kbGVSZXNpemUpLCB0aGlzCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVtb3ZlUGxheUJ1dHRvbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kKCJidXR0b24uYnRuLXBsYXkiKS5yZW1vdmUoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGhhbmRsZVJlc2l6ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB1LndpZHRoKCksCiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB1LmhlaWdodCgpLAogICAgICAgICAgICAgICAgICAgICAgICBuID0gdCwKICAgICAgICAgICAgICAgICAgICAgICAgciA9IGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0IC8gZSwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHRoaXMuYXNwZWN0UmF0aW8gfHwgMTYgLyA5OwogICAgICAgICAgICAgICAgICAgIHRoaXMuY292ZXIgPyBpID4gbyA/IChyID0gdCAqICgxIC8gbyksIHRoaXMuJGVsLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0LAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogLSgociAtIGUpIC8gMiksCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAKICAgICAgICAgICAgICAgICAgICB9KSkgOiAobiA9IGUgKiBvLCB0aGlzLiRlbC5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogbiwKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBlLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiAtKChuIC0gdCkgLyAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwCiAgICAgICAgICAgICAgICAgICAgfSkpIDogaSA+IG8gPyB0aGlzLiRlbC5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGUsCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBlICogbywKICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogIjUwJSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogIjUwJSIsCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IC0oZSAqIG8gLyAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAtKGUgLyAyKQogICAgICAgICAgICAgICAgICAgIH0pIDogdGhpcy4kZWwuY3NzKHsKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogdCAqICgxIC8gbyksCiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICI1MCUiLAogICAgICAgICAgICAgICAgICAgICAgICB0b3A6ICI1MCUiLAogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiAtKHQgLyAyKSwKICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luVG9wOiAtKHQgKiAoMSAvIG8pIC8gMikKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZS5yZW5kZXIoewogICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzOiB0aGlzLnNvdXJjZXMKICAgICAgICAgICAgICAgICAgICB9KSksIHRoaXMuaGFuZGxlUmVzaXplKCksIHRoaXMuJGVsLmZhZGVJbigpLCB0aGlzCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIGUuZXhwb3J0cyA9IGMKICAgIH0sIHsKICAgICAgICAiLi4vdGVtcGxhdGVzIjogMywKICAgICAgICAiLi4vdHJhY2siOiA1LAogICAgICAgIGJhY2tib25lOiA5LAogICAgICAgIGxvZGFzaDogMTYKICAgIH1dLAogICAgODogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgdmFyIHIgPSB0KCJsb2Rhc2giKSwKICAgICAgICAgICAgaSA9IHQoImJhY2tib25lIiksCiAgICAgICAgICAgIG8gPSB0KCIuLi90ZW1wbGF0ZXMiKSwKICAgICAgICAgICAgYSA9IHQoIi4uL3RyYWNrIiksCiAgICAgICAgICAgIHMgPSBuZXcgYTsKICAgICAgICAkLmZuLmNvbnRhaW5pZnkgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnBhcmVudCgpLAogICAgICAgICAgICAgICAgZSA9IHRoaXMsCiAgICAgICAgICAgICAgICBuID0gdC53aWR0aCgpIC8gdC5oZWlnaHQoKSwKICAgICAgICAgICAgICAgIHIgPSBlLmdldCgwKS5uYXR1cmFsV2lkdGggLyBlLmdldCgwKS5uYXR1cmFsSGVpZ2h0OwogICAgICAgICAgICBuID4gciA/IGUuY3NzKHsKICAgICAgICAgICAgICAgIGxlZnQ6ICh0LndpZHRoKCkgLSB0LmhlaWdodCgpICogcikgLyAyLAogICAgICAgICAgICAgICAgdG9wOiAwLAogICAgICAgICAgICAgICAgaGVpZ2h0OiB0LmhlaWdodCgpLAogICAgICAgICAgICAgICAgd2lkdGg6IHQuaGVpZ2h0KCkgKiByCiAgICAgICAgICAgIH0pIDogZS5jc3MoewogICAgICAgICAgICAgICAgdG9wOiAodC5oZWlnaHQoKSAtIHQud2lkdGgoKSAqICgxIC8gcikpIC8gMiwKICAgICAgICAgICAgICAgIGxlZnQ6IDAsCiAgICAgICAgICAgICAgICBoZWlnaHQ6IHQud2lkdGgoKSAqICgxIC8gciksCiAgICAgICAgICAgICAgICB3aWR0aDogdC53aWR0aCgpCiAgICAgICAgICAgIH0pCiAgICAgICAgfSwgaS4kID0gJDsKICAgICAgICB2YXIgdSA9IGkuVmlldy5leHRlbmQoewogICAgICAgICAgICBjbGFzc05hbWU6ICJpbWFnZS1jb250YWluZXIiLAogICAgICAgICAgICB0ZW1wbGF0ZTogby5pbWFnZWdhbGxlcnksCiAgICAgICAgICAgIGV2ZW50czogewogICAgICAgICAgICAgICAgImNsaWNrIC5idG4tY2xvc2UiOiAiY2xvc2VHYWxsZXJ5IgogICAgICAgICAgICB9LAogICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByLmJpbmRBbGwodGhpcyksIHIuZXh0ZW5kKHRoaXMsIHQpLCByLmV4dGVuZCh0aGlzLCBpLkV2ZW50cyksIHRoaXMuaW1hZ2VzTG9hZGVkID0gMCwgdGhpcy5wcmVsb2FkSW1hZ2VzKCkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xvc2VHYWxsZXJ5OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigiY2xvc2VkIiksIHRoaXMuJCgiLmltYWdlLWdhbGxlcnkiKS5zbGljaygidW5zbGljayIpLCB0aGlzLnJlbW92ZUVsKCksIHMub21uaSgiSGVscCIpCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFkZExpc3RlbmVyczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgICAgICB9LAogICAgICAgICAgICByZXNpemVJbWFnZXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy4kaW1hZ2VzLmVhY2goZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICQoZSkuY29udGFpbmlmeSgpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LAogICAgICAgICAgICByZW1vdmVMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgIHByZWxvYWRJbWFnZXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDAsIGUgPSB0aGlzLmltYWdlcy5sZW5ndGg7IGUgPiB0OyB0KyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG5ldyBJbWFnZTsKICAgICAgICAgICAgICAgICAgICBuLm9ubG9hZCA9IHRoaXMub25JbWFnZUxvYWQsIG4uc3JjID0gdGhpcy5pbWFnZXNbdF0uc3JjCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNsaWRlQ2hhbmdlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICBzLm9tbmkodGhpcy5nYWxsZXJ5TmFtZSwgIlBob3RvICIgKyAobiArIDEpLCB7CiAgICAgICAgICAgICAgICAgICAgcHJvcDM6ICJHYWxsZXJ5IgogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW5pdENhcm91c2VsOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy4kKCIuaW1hZ2UtZ2FsbGVyeSIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHQuc2xpY2soewogICAgICAgICAgICAgICAgICAgIGRvdHM6ICEwLAogICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSwKICAgICAgICAgICAgICAgICAgICBwcmV2QXJyb3c6IG8uYXJyb3cucmVuZGVyKHsKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uQ2xhc3M6ICJzbGljay1wcmV2IiwKICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvblBvaW50czogIjE1LDAgMTUsMjAsIDAgMTAiCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgbmV4dEFycm93OiBvLmFycm93LnJlbmRlcih7CiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkNsYXNzOiAic2xpY2stbmV4dCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb25Qb2ludHM6ICIwLDAgMCwyMCwgMTUgMTAiCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0pLCB0aGlzLiRpbWFnZXMgPSB0aGlzLiQoIi5pbWFnZS1pdGVtIGltZyIpLCB0Lm9uKCJzZXRQb3NpdGlvbiIsIHRoaXMucmVzaXplSW1hZ2VzKSwgdC5vbigiYWZ0ZXJDaGFuZ2UiLCB0aGlzLnNsaWRlQ2hhbmdlKSwgdGhpcy5yZXNpemVJbWFnZXMoKSwgdGhpcy5pbWFnZXMubGVuZ3RoID4gMSA/IHMub21uaSh0aGlzLmdhbGxlcnlOYW1lLCAiUGhvdG8gMSIsIHRoaXMudHJhY2spIDogcy5vbW5pKHRoaXMuZ2FsbGVyeU5hbWUsIHZvaWQgMCwgdGhpcy50cmFjayksIHRoaXMKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb25JbWFnZUxvYWQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQrKywgdGhpcy5pbWFnZXNMb2FkZWQgPT09IHRoaXMuaW1hZ2VzLmxlbmd0aCAmJiAodGhpcy5pbml0Q2Fyb3VzZWwoKSwgdGhpcy50cmlnZ2VyKCJsb2FkZWQiKSkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVtb3ZlRWw6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcnMoKSwgdGhpcy51bmJpbmQoKSwgdGhpcy5yZW1vdmUoKQogICAgICAgICAgICB9LAogICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZS5yZW5kZXIoewogICAgICAgICAgICAgICAgICAgIGltYWdlczogdGhpcy5pbWFnZXMKICAgICAgICAgICAgICAgIH0pKSwgdGhpcwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgZS5leHBvcnRzID0gdQogICAgfSwgewogICAgICAgICIuLi90ZW1wbGF0ZXMiOiAzLAogICAgICAgICIuLi90cmFjayI6IDUsCiAgICAgICAgYmFja2JvbmU6IDksCiAgICAgICAgbG9kYXNoOiAxNgogICAgfV0sCiAgICA5OiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgIChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICEgZnVuY3Rpb24ocikgewogICAgICAgICAgICAgICAgdmFyIGkgPSAib2JqZWN0IiA9PSB0eXBlb2Ygc2VsZiAmJiBzZWxmLnNlbGYgPT0gc2VsZiAmJiBzZWxmIHx8ICJvYmplY3QiID09IHR5cGVvZiBlICYmIGUuZ2xvYmFsID09IGUgJiYgZTsKICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKFsidW5kZXJzY29yZSIsICJqcXVlcnkiLCAiZXhwb3J0cyJdLCBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaS5CYWNrYm9uZSA9IHIoaSwgbiwgdCwgZSkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbywgYSA9IHQoInVuZGVyc2NvcmUiKTsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBvID0gdCgianF1ZXJ5IikKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChzKSB7fQogICAgICAgICAgICAgICAgICAgIHIoaSwgbiwgYSwgbykKICAgICAgICAgICAgICAgIH0gZWxzZSBpLkJhY2tib25lID0gcihpLCB7fSwgaS5fLCBpLmpRdWVyeSB8fCBpLlplcHRvIHx8IGkuZW5kZXIgfHwgaS4kKQogICAgICAgICAgICB9KGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIHZhciBpID0gdC5CYWNrYm9uZSwKICAgICAgICAgICAgICAgICAgICBvID0gQXJyYXkucHJvdG90eXBlLnNsaWNlOwogICAgICAgICAgICAgICAgZS5WRVJTSU9OID0gIjEuMi4zIiwgZS4kID0gciwgZS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuQmFja2JvbmUgPSBpLCB0aGlzCiAgICAgICAgICAgICAgICB9LCBlLmVtdWxhdGVIVFRQID0gITEsIGUuZW11bGF0ZUpTT04gPSAhMTsKICAgICAgICAgICAgICAgIHZhciBhID0gZnVuY3Rpb24odCwgZSwgcikgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuW2VdKHRoaXNbcl0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbltlXSh0aGlzW3JdLCB0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHQsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5bZV0odGhpc1tyXSwgdSh0LCB0aGlzKSwgaSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0LCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuW2VdKHRoaXNbcl0sIHUodCwgdGhpcyksIGksIG8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG8uY2FsbChhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC51bnNoaWZ0KHRoaXNbcl0pLCBuW2VdLmFwcGx5KG4sIHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzID0gZnVuY3Rpb24odCwgZSwgcikgewogICAgICAgICAgICAgICAgICAgICAgICBuLmVhY2goZSwgZnVuY3Rpb24oZSwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbltpXSAmJiAodC5wcm90b3R5cGVbaV0gPSBhKGUsIGksIHIpKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uaXNGdW5jdGlvbih0KSA/IHQgOiBuLmlzT2JqZWN0KHQpICYmICFlLl9pc01vZGVsKHQpID8gYyh0KSA6IG4uaXNTdHJpbmcodCkgPyBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5nZXQodCkKICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHQKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gbi5tYXRjaGVzKHQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodC5hdHRyaWJ1dGVzKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBsID0gZS5FdmVudHMgPSB7fSwKICAgICAgICAgICAgICAgICAgICBmID0gL1xzKy8sCiAgICAgICAgICAgICAgICAgICAgcCA9IGZ1bmN0aW9uKHQsIGUsIHIsIGksIG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEsIHMgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAociAmJiAib2JqZWN0IiA9PSB0eXBlb2YgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBpICYmICJjb250ZXh0IiBpbiBvICYmIHZvaWQgMCA9PT0gby5jb250ZXh0ICYmIChvLmNvbnRleHQgPSBpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYSA9IG4ua2V5cyhyKTsgcyA8IGEubGVuZ3RoOyBzKyspIGUgPSBwKHQsIGUsIGFbc10sIHJbYVtzXV0sIG8pCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAociAmJiBmLnRlc3QocikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGEgPSByLnNwbGl0KGYpOyBzIDwgYS5sZW5ndGg7IHMrKykgZSA9IHQoZSwgYVtzXSwgaSwgbyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZSA9IHQoZSwgciwgaSwgbyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGwub24gPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgodGhpcywgdCwgZSwgbikKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgaCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodC5fZXZlbnRzID0gcChkLCB0Ll9ldmVudHMgfHwge30sIGUsIG4sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHg6IHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5pbmc6IGkKICAgICAgICAgICAgICAgICAgICAgICAgfSksIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0Ll9saXN0ZW5lcnMgfHwgKHQuX2xpc3RlbmVycyA9IHt9KTsKICAgICAgICAgICAgICAgICAgICAgICAgb1tpLmlkXSA9IGkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBsLmxpc3RlblRvID0gZnVuY3Rpb24odCwgZSwgcikgewogICAgICAgICAgICAgICAgICAgIGlmICghdCkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0Ll9saXN0ZW5JZCB8fCAodC5fbGlzdGVuSWQgPSBuLnVuaXF1ZUlkKCJsIikpLAogICAgICAgICAgICAgICAgICAgICAgICBvID0gdGhpcy5fbGlzdGVuaW5nVG8gfHwgKHRoaXMuX2xpc3RlbmluZ1RvID0ge30pLAogICAgICAgICAgICAgICAgICAgICAgICBhID0gb1tpXTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSB0aGlzLl9saXN0ZW5JZCB8fCAodGhpcy5fbGlzdGVuSWQgPSBuLnVuaXF1ZUlkKCJsIikpOwogICAgICAgICAgICAgICAgICAgICAgICBhID0gb1tpXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iajogdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iaklkOiBpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5pbmdUbzogbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiAwCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGgodCwgZSwgciwgdGhpcywgYSksIHRoaXMKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgZCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRbZV0gfHwgKHRbZV0gPSBbXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gci5jb250ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHIuY3R4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHIubGlzdGVuaW5nOwogICAgICAgICAgICAgICAgICAgICAgICBzICYmIHMuY291bnQrKywgaS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eDogbyB8fCBhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuaW5nOiBzCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgbC5vZmYgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50cyA/ICh0aGlzLl9ldmVudHMgPSBwKGcsIHRoaXMuX2V2ZW50cywgdCwgZSwgewogICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBuLAogICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IHRoaXMuX2xpc3RlbmVycwogICAgICAgICAgICAgICAgICAgIH0pLCB0aGlzKSA6IHRoaXMKICAgICAgICAgICAgICAgIH0sIGwuc3RvcExpc3RlbmluZyA9IGZ1bmN0aW9uKHQsIGUsIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuX2xpc3RlbmluZ1RvOwogICAgICAgICAgICAgICAgICAgIGlmICghaSkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IHQgPyBbdC5fbGlzdGVuSWRdIDogbi5rZXlzKGkpLCBhID0gMDsgYSA8IG8ubGVuZ3RoOyBhKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBpW29bYV1dOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXMpIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBzLm9iai5vZmYoZSwgciwgdGhpcykKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uaXNFbXB0eShpKSAmJiAodGhpcy5fbGlzdGVuaW5nVG8gPSB2b2lkIDApLCB0aGlzCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIGcgPSBmdW5jdGlvbih0LCBlLCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8sIGEgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGkuY29udGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBpLmxpc3RlbmVyczsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgfHwgciB8fCBzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gZSA/IFtlXSA6IG4ua2V5cyh0KTsgYSA8IGMubGVuZ3RoOyBhKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gY1thXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRbZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsKSBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmID0gW10sIHAgPSAwOyBwIDwgbC5sZW5ndGg7IHArKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGxbcF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgJiYgciAhPT0gaC5jYWxsYmFjayAmJiByICE9PSBoLmNhbGxiYWNrLl9jYWxsYmFjayB8fCBzICYmIHMgIT09IGguY29udGV4dCA/IGYucHVzaChoKSA6IChvID0gaC5saXN0ZW5pbmcsIG8gJiYgMCA9PT0gLS1vLmNvdW50ICYmIChkZWxldGUgdVtvLmlkXSwgZGVsZXRlIG8ubGlzdGVuaW5nVG9bby5vYmpJZF0pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLmxlbmd0aCA/IHRbZV0gPSBmIDogZGVsZXRlIHRbZV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNpemUodCkgPyB0IDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IG4ua2V5cyh1KTsgYSA8IGQubGVuZ3RoOyBhKyspIG8gPSB1W2RbYV1dLCBkZWxldGUgdVtvLmlkXSwgZGVsZXRlIG8ubGlzdGVuaW5nVG9bby5vYmpJZF0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgbC5vbmNlID0gZnVuY3Rpb24odCwgZSwgcikgewogICAgICAgICAgICAgICAgICAgIHZhciBpID0gcCh2LCB7fSwgdCwgZSwgbi5iaW5kKHRoaXMub2ZmLCB0aGlzKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oaSwgdm9pZCAwLCByKQogICAgICAgICAgICAgICAgfSwgbC5saXN0ZW5Ub09uY2UgPSBmdW5jdGlvbih0LCBlLCByKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBwKHYsIHt9LCBlLCByLCBuLmJpbmQodGhpcy5zdG9wTGlzdGVuaW5nLCB0aGlzLCB0KSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdGVuVG8odCwgaSkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB2YXIgdiA9IGZ1bmN0aW9uKHQsIGUsIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAocikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRbZV0gPSBuLm9uY2UoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKGUsIG8pLCByLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG8uX2NhbGxiYWNrID0gcgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGwudHJpZ2dlciA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IE1hdGgubWF4KDAsIGFyZ3VtZW50cy5sZW5ndGggLSAxKSwgbiA9IEFycmF5KGUpLCByID0gMDsgZSA+IHI7IHIrKykgbltyXSA9IGFyZ3VtZW50c1tyICsgMV07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHAoeSwgdGhpcy5fZXZlbnRzLCB0LCB2b2lkIDAsIG4pLCB0aGlzCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIHkgPSBmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRbZV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHQuYWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiBvICYmIChvID0gby5zbGljZSgpKSwgaSAmJiBtKGksIHIpLCBvICYmIG0obywgW2VdLmNvbmNhdChyKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgbSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4sIHIgPSAtMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGVbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gZVsyXTsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyArK3IgPCBpOykobiA9IHRbcl0pLmNhbGxiYWNrLmNhbGwobi5jdHgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgKytyIDwgaTspKG4gPSB0W3JdKS5jYWxsYmFjay5jYWxsKG4uY3R4LCBvKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICsrciA8IGk7KShuID0gdFtyXSkuY2FsbGJhY2suY2FsbChuLmN0eCwgbywgYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyArK3IgPCBpOykobiA9IHRbcl0pLmNhbGxiYWNrLmNhbGwobi5jdHgsIG8sIGEsIHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICsrciA8IGk7KShuID0gdFtyXSkuY2FsbGJhY2suYXBwbHkobi5jdHgsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGwuYmluZCA9IGwub24sIGwudW5iaW5kID0gbC5vZmYsIG4uZXh0ZW5kKGUsIGwpOwogICAgICAgICAgICAgICAgdmFyIGIgPSBlLk1vZGVsID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciByID0gdCB8fCB7fTsKICAgICAgICAgICAgICAgICAgICBlIHx8IChlID0ge30pLCB0aGlzLmNpZCA9IG4udW5pcXVlSWQodGhpcy5jaWRQcmVmaXgpLCB0aGlzLmF0dHJpYnV0ZXMgPSB7fSwgZS5jb2xsZWN0aW9uICYmICh0aGlzLmNvbGxlY3Rpb24gPSBlLmNvbGxlY3Rpb24pLCBlLnBhcnNlICYmIChyID0gdGhpcy5wYXJzZShyLCBlKSB8fCB7fSksIHIgPSBuLmRlZmF1bHRzKHt9LCByLCBuLnJlc3VsdCh0aGlzLCAiZGVmYXVsdHMiKSksIHRoaXMuc2V0KHIsIGUpLCB0aGlzLmNoYW5nZWQgPSB7fSwgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBuLmV4dGVuZChiLnByb3RvdHlwZSwgbCwgewogICAgICAgICAgICAgICAgICAgIGNoYW5nZWQ6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9yOiBudWxsLAogICAgICAgICAgICAgICAgICAgIGlkQXR0cmlidXRlOiAiaWQiLAogICAgICAgICAgICAgICAgICAgIGNpZFByZWZpeDogImMiLAogICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgICAgICAgICAgdG9KU09OOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmNsb25lKHRoaXMuYXR0cmlidXRlcykKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHN5bmM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW3RdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBlc2NhcGU6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZXNjYXBlKHRoaXMuZ2V0KHQpKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgaGFzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHRoaXMuZ2V0KHQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBtYXRjaGVzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIW4uaXRlcmF0ZWUodCwgdGhpcykodGhpcy5hdHRyaWJ1dGVzKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih0LCBlLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IHQpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJvYmplY3QiID09IHR5cGVvZiB0ID8gKGkgPSB0LCByID0gZSkgOiAoaSA9IHt9KVt0XSA9IGUsIHIgfHwgKHIgPSB7fSksICF0aGlzLl92YWxpZGF0ZShpLCByKSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHIudW5zZXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gci5zaWxlbnQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdGhpcy5fY2hhbmdpbmc7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5naW5nID0gITAsIHUgfHwgKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IG4uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKSwgdGhpcy5jaGFuZ2VkID0ge30pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMuYXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSB0aGlzLmNoYW5nZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIGkpIGUgPSBpW3BdLCBuLmlzRXF1YWwoY1twXSwgZSkgfHwgcy5wdXNoKHApLCBuLmlzRXF1YWwoZltwXSwgZSkgPyBkZWxldGUgbFtwXSA6IGxbcF0gPSBlLCBvID8gZGVsZXRlIGNbcF0gOiBjW3BdID0gZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWQgPSB0aGlzLmdldCh0aGlzLmlkQXR0cmlidXRlKSwgIWEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMubGVuZ3RoICYmICh0aGlzLl9wZW5kaW5nID0gcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IHMubGVuZ3RoOyBoKyspIHRoaXMudHJpZ2dlcigiY2hhbmdlOiIgKyBzW2hdLCB0aGlzLCBjW3NbaF1dLCByKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1KSByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IHRoaXMuX3BlbmRpbmc7KSByID0gdGhpcy5fcGVuZGluZywgdGhpcy5fcGVuZGluZyA9ICExLCB0aGlzLnRyaWdnZXIoImNoYW5nZSIsIHRoaXMsIHIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGVuZGluZyA9ICExLCB0aGlzLl9jaGFuZ2luZyA9ICExLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB1bnNldDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQodCwgdm9pZCAwLCBuLmV4dGVuZCh7fSwgZSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQ6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY2xlYXI6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciBpbiB0aGlzLmF0dHJpYnV0ZXMpIGVbcl0gPSB2b2lkIDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldChlLCBuLmV4dGVuZCh7fSwgdCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZXQ6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgaGFzQ2hhbmdlZDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gIW4uaXNFbXB0eSh0aGlzLmNoYW5nZWQpIDogbi5oYXModGhpcy5jaGFuZ2VkLCB0KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY2hhbmdlZEF0dHJpYnV0ZXM6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0KSByZXR1cm4gdGhpcy5oYXNDaGFuZ2VkKCkgPyBuLmNsb25lKHRoaXMuY2hhbmdlZCkgOiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9jaGFuZ2luZyA/IHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA6IHRoaXMuYXR0cmlidXRlcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmlzRXF1YWwoZVtpXSwgbykgfHwgKHJbaV0gPSBvKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnNpemUocikgPyByIDogITEKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHByZXZpb3VzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzID8gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzW3RdIDogbnVsbAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNBdHRyaWJ1dGVzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uY2xvbmUodGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdCA9IG4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlOiAhMAogICAgICAgICAgICAgICAgICAgICAgICB9LCB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHQuc3VjY2VzczsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc3VjY2VzcyA9IGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5wYXJzZSA/IGUucGFyc2UobiwgdCkgOiBuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc2V0KGksIHQpID8gKHIgJiYgci5jYWxsKHQuY29udGV4dCwgZSwgbiwgdCksIHZvaWQgZS50cmlnZ2VyKCJzeW5jIiwgZSwgbiwgdCkpIDogITEKICAgICAgICAgICAgICAgICAgICAgICAgfSwgRih0aGlzLCB0KSwgdGhpcy5zeW5jKCJyZWFkIiwgdGhpcywgdCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNhdmU6IGZ1bmN0aW9uKHQsIGUsIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGk7CiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT0gdCB8fCAib2JqZWN0IiA9PSB0eXBlb2YgdCA/IChpID0gdCwgciA9IGUpIDogKGkgPSB7fSlbdF0gPSBlLCByID0gbi5leHRlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGU6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2U6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHIpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHIud2FpdDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJiYgIW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zZXQoaSwgcikpIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl92YWxpZGF0ZShpLCByKSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gci5zdWNjZXNzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHRoaXMuYXR0cmlidXRlczsKICAgICAgICAgICAgICAgICAgICAgICAgci5zdWNjZXNzID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5hdHRyaWJ1dGVzID0gdTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gci5wYXJzZSA/IGEucGFyc2UodCwgcikgOiB0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8gJiYgKGUgPSBuLmV4dGVuZCh7fSwgaSwgZSkpLCBlICYmICFhLnNldChlLCByKSA/ICExIDogKHMgJiYgcy5jYWxsKHIuY29udGV4dCwgYSwgdCwgciksIHZvaWQgYS50cmlnZ2VyKCJzeW5jIiwgYSwgdCwgcikpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIEYodGhpcywgciksIGkgJiYgbyAmJiAodGhpcy5hdHRyaWJ1dGVzID0gbi5leHRlbmQoe30sIHUsIGkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLmlzTmV3KCkgPyAiY3JlYXRlIiA6IHIucGF0Y2ggPyAicGF0Y2giIDogInVwZGF0ZSI7CiAgICAgICAgICAgICAgICAgICAgICAgICJwYXRjaCIgIT09IGMgfHwgci5hdHRycyB8fCAoci5hdHRycyA9IGkpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRoaXMuc3luYyhjLCB0aGlzLCByKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlcyA9IHUsIGwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHQgPyBuLmNsb25lKHQpIDoge307CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0LnN1Y2Nlc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdC53YWl0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcExpc3RlbmluZygpLCBlLnRyaWdnZXIoImRlc3Ryb3kiLCBlLCBlLmNvbGxlY3Rpb24sIHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICB0LnN1Y2Nlc3MgPSBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpICYmIG8oKSwgciAmJiByLmNhbGwodC5jb250ZXh0LCBlLCBuLCB0KSwgZS5pc05ldygpIHx8IGUudHJpZ2dlcigic3luYyIsIGUsIG4sIHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzTmV3KCkgPyBuLmRlZmVyKHQuc3VjY2VzcykgOiAoRih0aGlzLCB0KSwgYSA9IHRoaXMuc3luYygiZGVsZXRlIiwgdGhpcywgdCkpLCBpIHx8IG8oKSwgYQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdXJsOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBuLnJlc3VsdCh0aGlzLCAidXJsUm9vdCIpIHx8IG4ucmVzdWx0KHRoaXMuY29sbGVjdGlvbiwgInVybCIpIHx8IE0oKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNOZXcoKSkgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5nZXQodGhpcy5pZEF0dHJpYnV0ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnJlcGxhY2UoL1teXC9dJC8sICIkJi8iKSArIGVuY29kZVVSSUNvbXBvbmVudChlKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcGFyc2U6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGNsb25lOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuYXR0cmlidXRlcykKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGlzTmV3OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLmhhcyh0aGlzLmlkQXR0cmlidXRlKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGUoe30sIG4uZGVmYXVsdHMoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGU6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHQpKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX3ZhbGlkYXRlOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZS52YWxpZGF0ZSB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgICAgICAgICB0ID0gbi5leHRlbmQoe30sIHRoaXMuYXR0cmlidXRlcywgdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdGhpcy52YWxpZGF0aW9uRXJyb3IgPSB0aGlzLnZhbGlkYXRlKHQsIGUpIHx8IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gKHRoaXMudHJpZ2dlcigiaW52YWxpZCIsIHRoaXMsIHIsIG4uZXh0ZW5kKGUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRpb25FcnJvcjogcgogICAgICAgICAgICAgICAgICAgICAgICB9KSksICExKSA6ICEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB2YXIgeCA9IHsKICAgICAgICAgICAgICAgICAgICBrZXlzOiAxLAogICAgICAgICAgICAgICAgICAgIHZhbHVlczogMSwKICAgICAgICAgICAgICAgICAgICBwYWlyczogMSwKICAgICAgICAgICAgICAgICAgICBpbnZlcnQ6IDEsCiAgICAgICAgICAgICAgICAgICAgcGljazogMCwKICAgICAgICAgICAgICAgICAgICBvbWl0OiAwLAogICAgICAgICAgICAgICAgICAgIGNoYWluOiAxLAogICAgICAgICAgICAgICAgICAgIGlzRW1wdHk6IDEKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBzKGIsIHgsICJhdHRyaWJ1dGVzIik7CiAgICAgICAgICAgICAgICB2YXIgdyA9IGUuQ29sbGVjdGlvbiA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSB8fCAoZSA9IHt9KSwgZS5tb2RlbCAmJiAodGhpcy5tb2RlbCA9IGUubW9kZWwpLCB2b2lkIDAgIT09IGUuY29tcGFyYXRvciAmJiAodGhpcy5jb21wYXJhdG9yID0gZS5jb21wYXJhdG9yKSwgdGhpcy5fcmVzZXQoKSwgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksIHQgJiYgdGhpcy5yZXNldCh0LCBuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWxlbnQ6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGUpKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgXyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgYWRkOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2U6ICEwCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBrID0gewogICAgICAgICAgICAgICAgICAgICAgICBhZGQ6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6ICExCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBUID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBuID0gTWF0aC5taW4oTWF0aC5tYXgobiwgMCksIHQubGVuZ3RoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IEFycmF5KHQubGVuZ3RoIC0gbiksIGkgPSBlLmxlbmd0aCwgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKSByW29dID0gdFtvICsgbl07CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyA9IDA7IGkgPiBvOyBvKyspIHRbbyArIG5dID0gZVtvXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvID0gMDsgbyA8IHIubGVuZ3RoOyBvKyspIHRbbyArIGkgKyBuXSA9IHJbb10KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgbi5leHRlbmQody5wcm90b3R5cGUsIGwsIHsKICAgICAgICAgICAgICAgICAgICBtb2RlbDogYiwKICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHt9LAogICAgICAgICAgICAgICAgICAgIHRvSlNPTjogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUudG9KU09OKHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzeW5jOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc3luYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBhZGQ6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KHQsIG4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlOiAhMQogICAgICAgICAgICAgICAgICAgICAgICB9LCBlLCBrKSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBlID0gbi5leHRlbmQoe30sIGUpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9ICFuLmlzQXJyYXkodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSByID8gW3RdIDogbi5jbG9uZSh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLl9yZW1vdmVNb2RlbHModCwgZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhZS5zaWxlbnQgJiYgaSAmJiB0aGlzLnRyaWdnZXIoInVwZGF0ZSIsIHRoaXMsIGUpLCByID8gaVswXSA6IGkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPSB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gbi5kZWZhdWx0cyh7fSwgZSwgXyksIGUucGFyc2UgJiYgIXRoaXMuX2lzTW9kZWwodCkgJiYgKHQgPSB0aGlzLnBhcnNlKHQsIGUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gIW4uaXNBcnJheSh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSByID8gW3RdIDogdC5zbGljZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLmF0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCAhPSBpICYmIChpID0gK2kpLCAwID4gaSAmJiAoaSArPSB0aGlzLmxlbmd0aCArIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbywgYSA9IFtdLCBzID0gW10sIHUgPSBbXSwgYyA9IHt9LCBsID0gZS5hZGQsIGYgPSBlLm1lcmdlLCBwID0gZS5yZW1vdmUsIGggPSAhMSwgZCA9IHRoaXMuY29tcGFyYXRvciAmJiBudWxsID09IGkgJiYgZS5zb3J0ICE9PSAhMSwgZyA9IG4uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSA/IHRoaXMuY29tcGFyYXRvciA6IG51bGwsIHYgPSAwOyB2IDwgdC5sZW5ndGg7IHYrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0W3ZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy5nZXQobyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGYgJiYgbyAhPT0geSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSB0aGlzLl9pc01vZGVsKG8pID8gby5hdHRyaWJ1dGVzIDogbzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucGFyc2UgJiYgKG0gPSB5LnBhcnNlKG0sIGUpKSwgeS5zZXQobSwgZSksIGQgJiYgIWggJiYgKGggPSB5Lmhhc0NoYW5nZWQoZykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1t5LmNpZF0gfHwgKGNbeS5jaWRdID0gITAsIGEucHVzaCh5KSksIHRbdl0gPSB5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGwgJiYgKG8gPSB0W3ZdID0gdGhpcy5fcHJlcGFyZU1vZGVsKG8sIGUpLCBvICYmIChzLnB1c2gobyksIHRoaXMuX2FkZFJlZmVyZW5jZShvLCBlKSwgY1tvLmNpZF0gPSAhMCwgYS5wdXNoKG8pKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2ID0gMDsgdiA8IHRoaXMubGVuZ3RoOyB2KyspIG8gPSB0aGlzLm1vZGVsc1t2XSwgY1tvLmNpZF0gfHwgdS5wdXNoKG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUubGVuZ3RoICYmIHRoaXMuX3JlbW92ZU1vZGVscyh1LCBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gIWQgJiYgbCAmJiBwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEubGVuZ3RoICYmIHggPyAoYiA9IHRoaXMubGVuZ3RoICE9IGEubGVuZ3RoIHx8IG4uc29tZSh0aGlzLm1vZGVscywgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCAhPT0gYVtlXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB0aGlzLm1vZGVscy5sZW5ndGggPSAwLCBUKHRoaXMubW9kZWxzLCBhLCAwKSwgdGhpcy5sZW5ndGggPSB0aGlzLm1vZGVscy5sZW5ndGgpIDogcy5sZW5ndGggJiYgKGQgJiYgKGggPSAhMCksIFQodGhpcy5tb2RlbHMsIHMsIG51bGwgPT0gaSA/IHRoaXMubGVuZ3RoIDogaSksIHRoaXMubGVuZ3RoID0gdGhpcy5tb2RlbHMubGVuZ3RoKSwgaCAmJiB0aGlzLnNvcnQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWxlbnQ6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksICFlLnNpbGVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodiA9IDA7IHYgPCBzLmxlbmd0aDsgdisrKSBudWxsICE9IGkgJiYgKGUuaW5kZXggPSBpICsgdiksIG8gPSBzW3ZdLCBvLnRyaWdnZXIoImFkZCIsIG8sIHRoaXMsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoIHx8IGIpICYmIHRoaXMudHJpZ2dlcigic29ydCIsIHRoaXMsIGUpLCAocy5sZW5ndGggfHwgdS5sZW5ndGgpICYmIHRoaXMudHJpZ2dlcigidXBkYXRlIiwgdGhpcywgZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gdFswXSA6IHQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzZXQ6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGUgPyBuLmNsb25lKGUpIDoge307CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgdGhpcy5tb2RlbHMubGVuZ3RoOyByKyspIHRoaXMuX3JlbW92ZVJlZmVyZW5jZSh0aGlzLm1vZGVsc1tyXSwgZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZpb3VzTW9kZWxzID0gdGhpcy5tb2RlbHMsIHRoaXMuX3Jlc2V0KCksIHQgPSB0aGlzLmFkZCh0LCBuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWxlbnQ6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGUpKSwgZS5zaWxlbnQgfHwgdGhpcy50cmlnZ2VyKCJyZXNldCIsIHRoaXMsIGUpLCB0CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwdXNoOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZCh0LCBuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdDogdGhpcy5sZW5ndGgKICAgICAgICAgICAgICAgICAgICAgICAgfSwgZSkpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwb3A6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmF0KHRoaXMubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZShlLCB0KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgdW5zaGlmdDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQodCwgbi5leHRlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXQ6IDAKICAgICAgICAgICAgICAgICAgICAgICAgfSwgZSkpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzaGlmdDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuYXQoMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZShlLCB0KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2xpY2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5hcHBseSh0aGlzLm1vZGVscywgYXJndW1lbnRzKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IHQpIHJldHVybiB2b2lkIDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5tb2RlbElkKHRoaXMuX2lzTW9kZWwodCkgPyB0LmF0dHJpYnV0ZXMgOiB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J5SWRbdF0gfHwgdGhpcy5fYnlJZFtlXSB8fCB0aGlzLl9ieUlkW3QuY2lkXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYXQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAgPiB0ICYmICh0ICs9IHRoaXMubGVuZ3RoKSwgdGhpcy5tb2RlbHNbdF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHdoZXJlOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW2UgPyAiZmluZCIgOiAiZmlsdGVyIl0odCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZpbmRXaGVyZTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53aGVyZSh0LCAhMCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNvcnQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLmNvbXBhcmF0b3I7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZSkgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3Qgc29ydCBhIHNldCB3aXRob3V0IGEgY29tcGFyYXRvciIpOwogICAgICAgICAgICAgICAgICAgICAgICB0IHx8ICh0ID0ge30pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5pc0Z1bmN0aW9uKGUpICYmIChlID0gbi5iaW5kKGUsIHRoaXMpKSwgMSA9PT0gciB8fCBuLmlzU3RyaW5nKGUpID8gdGhpcy5tb2RlbHMgPSB0aGlzLnNvcnRCeShlKSA6IHRoaXMubW9kZWxzLnNvcnQoZSksIHQuc2lsZW50IHx8IHRoaXMudHJpZ2dlcigic29ydCIsIHRoaXMsIHQpLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwbHVjazogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5pbnZva2UodGhpcy5tb2RlbHMsICJnZXQiLCB0KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZmV0Y2g6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdCA9IG4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlOiAhMAogICAgICAgICAgICAgICAgICAgICAgICB9LCB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LnN1Y2Nlc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc3VjY2VzcyA9IGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5yZXNldCA/ICJyZXNldCIgOiAic2V0IjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbaV0obiwgdCksIGUgJiYgZS5jYWxsKHQuY29udGV4dCwgciwgbiwgdCksIHIudHJpZ2dlcigic3luYyIsIHIsIG4sIHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIEYodGhpcywgdCksIHRoaXMuc3luYygicmVhZCIsIHRoaXMsIHQpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGUgPyBuLmNsb25lKGUpIDoge307CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gZS53YWl0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9IHRoaXMuX3ByZXBhcmVNb2RlbCh0LCBlKSwgIXQpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgciB8fCB0aGlzLmFkZCh0LCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGUuc3VjY2VzczsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuc3VjY2VzcyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgJiYgaS5hZGQodCwgbiksIG8gJiYgby5jYWxsKG4uY29udGV4dCwgdCwgZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdC5zYXZlKG51bGwsIGUpLCB0CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5tb2RlbHMsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB0aGlzLm1vZGVsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyYXRvcjogdGhpcy5jb21wYXJhdG9yCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBtb2RlbElkOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0W3RoaXMubW9kZWwucHJvdG90eXBlLmlkQXR0cmlidXRlIHx8ICJpZCJdCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfcmVzZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDAsIHRoaXMubW9kZWxzID0gW10sIHRoaXMuX2J5SWQgPSB7fQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX3ByZXBhcmVNb2RlbDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNNb2RlbCh0KSkgcmV0dXJuIHQuY29sbGVjdGlvbiB8fCAodC5jb2xsZWN0aW9uID0gdGhpcyksIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBlID8gbi5jbG9uZShlKSA6IHt9LCBlLmNvbGxlY3Rpb24gPSB0aGlzOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG5ldyB0aGlzLm1vZGVsKHQsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci52YWxpZGF0aW9uRXJyb3IgPyAodGhpcy50cmlnZ2VyKCJpbnZhbGlkIiwgdGhpcywgci52YWxpZGF0aW9uRXJyb3IsIGUpLCAhMSkgOiByCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlTW9kZWxzOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IDA7IHIgPCB0Lmxlbmd0aDsgcisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuZ2V0KHRbcl0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXMuaW5kZXhPZihpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVscy5zcGxpY2UobywgMSksIHRoaXMubGVuZ3RoLS0sIGUuc2lsZW50IHx8IChlLmluZGV4ID0gbywgaS50cmlnZ2VyKCJyZW1vdmUiLCBpLCB0aGlzLCBlKSksIG4ucHVzaChpKSwgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKGksIGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ubGVuZ3RoID8gbiA6ICExCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfaXNNb2RlbDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIGIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9hZGRSZWZlcmVuY2U6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnlJZFt0LmNpZF0gPSB0OwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMubW9kZWxJZCh0LmF0dHJpYnV0ZXMpOwogICAgICAgICAgICAgICAgICAgICAgICBudWxsICE9IG4gJiYgKHRoaXMuX2J5SWRbbl0gPSB0KSwgdC5vbigiYWxsIiwgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX3JlbW92ZVJlZmVyZW5jZTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFt0LmNpZF07CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5tb2RlbElkKHQuYXR0cmlidXRlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gbiAmJiBkZWxldGUgdGhpcy5fYnlJZFtuXSwgdGhpcyA9PT0gdC5jb2xsZWN0aW9uICYmIGRlbGV0ZSB0LmNvbGxlY3Rpb24sIHQub2ZmKCJhbGwiLCB0aGlzLl9vbk1vZGVsRXZlbnQsIHRoaXMpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfb25Nb2RlbEV2ZW50OiBmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiYWRkIiAhPT0gdCAmJiAicmVtb3ZlIiAhPT0gdCB8fCBuID09PSB0aGlzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoImRlc3Ryb3kiID09PSB0ICYmIHRoaXMucmVtb3ZlKGUsIHIpLCAiY2hhbmdlIiA9PT0gdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdGhpcy5tb2RlbElkKGUucHJldmlvdXNBdHRyaWJ1dGVzKCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdGhpcy5tb2RlbElkKGUuYXR0cmlidXRlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAhPT0gbyAmJiAobnVsbCAhPSBpICYmIGRlbGV0ZSB0aGlzLl9ieUlkW2ldLCBudWxsICE9IG8gJiYgKHRoaXMuX2J5SWRbb10gPSBlKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHZhciBFID0gewogICAgICAgICAgICAgICAgICAgIGZvckVhY2g6IDMsCiAgICAgICAgICAgICAgICAgICAgZWFjaDogMywKICAgICAgICAgICAgICAgICAgICBtYXA6IDMsCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdDogMywKICAgICAgICAgICAgICAgICAgICByZWR1Y2U6IDQsCiAgICAgICAgICAgICAgICAgICAgZm9sZGw6IDQsCiAgICAgICAgICAgICAgICAgICAgaW5qZWN0OiA0LAogICAgICAgICAgICAgICAgICAgIHJlZHVjZVJpZ2h0OiA0LAogICAgICAgICAgICAgICAgICAgIGZvbGRyOiA0LAogICAgICAgICAgICAgICAgICAgIGZpbmQ6IDMsCiAgICAgICAgICAgICAgICAgICAgZGV0ZWN0OiAzLAogICAgICAgICAgICAgICAgICAgIGZpbHRlcjogMywKICAgICAgICAgICAgICAgICAgICBzZWxlY3Q6IDMsCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0OiAzLAogICAgICAgICAgICAgICAgICAgIGV2ZXJ5OiAzLAogICAgICAgICAgICAgICAgICAgIGFsbDogMywKICAgICAgICAgICAgICAgICAgICBzb21lOiAzLAogICAgICAgICAgICAgICAgICAgIGFueTogMywKICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiAzLAogICAgICAgICAgICAgICAgICAgIGluY2x1ZGVzOiAzLAogICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zOiAzLAogICAgICAgICAgICAgICAgICAgIGludm9rZTogMCwKICAgICAgICAgICAgICAgICAgICBtYXg6IDMsCiAgICAgICAgICAgICAgICAgICAgbWluOiAzLAogICAgICAgICAgICAgICAgICAgIHRvQXJyYXk6IDEsCiAgICAgICAgICAgICAgICAgICAgc2l6ZTogMSwKICAgICAgICAgICAgICAgICAgICBmaXJzdDogMywKICAgICAgICAgICAgICAgICAgICBoZWFkOiAzLAogICAgICAgICAgICAgICAgICAgIHRha2U6IDMsCiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbDogMywKICAgICAgICAgICAgICAgICAgICByZXN0OiAzLAogICAgICAgICAgICAgICAgICAgIHRhaWw6IDMsCiAgICAgICAgICAgICAgICAgICAgZHJvcDogMywKICAgICAgICAgICAgICAgICAgICBsYXN0OiAzLAogICAgICAgICAgICAgICAgICAgIHdpdGhvdXQ6IDAsCiAgICAgICAgICAgICAgICAgICAgZGlmZmVyZW5jZTogMCwKICAgICAgICAgICAgICAgICAgICBpbmRleE9mOiAzLAogICAgICAgICAgICAgICAgICAgIHNodWZmbGU6IDEsCiAgICAgICAgICAgICAgICAgICAgbGFzdEluZGV4T2Y6IDMsCiAgICAgICAgICAgICAgICAgICAgaXNFbXB0eTogMSwKICAgICAgICAgICAgICAgICAgICBjaGFpbjogMSwKICAgICAgICAgICAgICAgICAgICBzYW1wbGU6IDMsCiAgICAgICAgICAgICAgICAgICAgcGFydGl0aW9uOiAzLAogICAgICAgICAgICAgICAgICAgIGdyb3VwQnk6IDMsCiAgICAgICAgICAgICAgICAgICAgY291bnRCeTogMywKICAgICAgICAgICAgICAgICAgICBzb3J0Qnk6IDMsCiAgICAgICAgICAgICAgICAgICAgaW5kZXhCeTogMwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHModywgRSwgIm1vZGVscyIpOwogICAgICAgICAgICAgICAgdmFyIGogPSBlLlZpZXcgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2lkID0gbi51bmlxdWVJZCgidmlldyIpLCBuLmV4dGVuZCh0aGlzLCBuLnBpY2sodCwgUykpLCB0aGlzLl9lbnN1cmVFbGVtZW50KCksIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBDID0gL14oXFMrKVxzKiguKikkLywKICAgICAgICAgICAgICAgICAgICBTID0gWyJtb2RlbCIsICJjb2xsZWN0aW9uIiwgImVsIiwgImlkIiwgImF0dHJpYnV0ZXMiLCAiY2xhc3NOYW1lIiwgInRhZ05hbWUiLCAiZXZlbnRzIl07CiAgICAgICAgICAgICAgICBuLmV4dGVuZChqLnByb3RvdHlwZSwgbCwgewogICAgICAgICAgICAgICAgICAgIHRhZ05hbWU6ICJkaXYiLAogICAgICAgICAgICAgICAgICAgICQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGVsLmZpbmQodCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZW1vdmVFbGVtZW50KCksIHRoaXMuc3RvcExpc3RlbmluZygpLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfcmVtb3ZlRWxlbWVudDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLnJlbW92ZSgpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzZXRFbGVtZW50OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKSwgdGhpcy5fc2V0RWxlbWVudCh0KSwgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfc2V0RWxlbWVudDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbCA9IHQgaW5zdGFuY2VvZiBlLiQgPyB0IDogZS4kKHQpLCB0aGlzLmVsID0gdGhpcy4kZWxbMF0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0IHx8ICh0ID0gbi5yZXN1bHQodGhpcywgImV2ZW50cyIpKSwgIXQpIHJldHVybiB0aGlzOwogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSBpbiB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRbZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5pc0Z1bmN0aW9uKHIpIHx8IChyID0gdGhpc1tyXSksIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGUubWF0Y2goQyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZShpWzFdLCBpWzJdLCBuLmJpbmQociwgdGhpcykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbC5vbih0ICsgIi5kZWxlZ2F0ZUV2ZW50cyIgKyB0aGlzLmNpZCwgZSwgbiksIHRoaXMKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHVuZGVsZWdhdGVFdmVudHM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kZWwgJiYgdGhpcy4kZWwub2ZmKCIuZGVsZWdhdGVFdmVudHMiICsgdGhpcy5jaWQpLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB1bmRlbGVnYXRlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRlbC5vZmYodCArICIuZGVsZWdhdGVFdmVudHMiICsgdGhpcy5jaWQsIGUsIG4pLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfY3JlYXRlRWxlbWVudDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbCkgdGhpcy5zZXRFbGVtZW50KG4ucmVzdWx0KHRoaXMsICJlbCIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG4uZXh0ZW5kKHt9LCBuLnJlc3VsdCh0aGlzLCAiYXR0cmlidXRlcyIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaWQgJiYgKHQuaWQgPSBuLnJlc3VsdCh0aGlzLCAiaWQiKSksIHRoaXMuY2xhc3NOYW1lICYmICh0WyJjbGFzcyJdID0gbi5yZXN1bHQodGhpcywgImNsYXNzTmFtZSIpKSwgdGhpcy5zZXRFbGVtZW50KHRoaXMuX2NyZWF0ZUVsZW1lbnQobi5yZXN1bHQodGhpcywgInRhZ05hbWUiKSkpLCB0aGlzLl9zZXRBdHRyaWJ1dGVzKHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9zZXRBdHRyaWJ1dGVzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVsLmF0dHIodCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwgZS5zeW5jID0gZnVuY3Rpb24odCwgciwgaSkgewogICAgICAgICAgICAgICAgICAgIHZhciBvID0gQVt0XTsKICAgICAgICAgICAgICAgICAgICBuLmRlZmF1bHRzKGkgfHwgKGkgPSB7fSksIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW11bGF0ZUhUVFA6IGUuZW11bGF0ZUhUVFAsCiAgICAgICAgICAgICAgICAgICAgICAgIGVtdWxhdGVKU09OOiBlLmVtdWxhdGVKU09OCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG8sCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIGlmIChpLnVybCB8fCAoYS51cmwgPSBuLnJlc3VsdChyLCAidXJsIikgfHwgTSgpKSwgbnVsbCAhPSBpLmRhdGEgfHwgIXIgfHwgImNyZWF0ZSIgIT09IHQgJiYgInVwZGF0ZSIgIT09IHQgJiYgInBhdGNoIiAhPT0gdCB8fCAoYS5jb250ZW50VHlwZSA9ICJhcHBsaWNhdGlvbi9qc29uIiwgYS5kYXRhID0gSlNPTi5zdHJpbmdpZnkoaS5hdHRycyB8fCByLnRvSlNPTihpKSkpLCBpLmVtdWxhdGVKU09OICYmIChhLmNvbnRlbnRUeXBlID0gImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsIGEuZGF0YSA9IGEuZGF0YSA/IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiBhLmRhdGEKICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHt9KSwgaS5lbXVsYXRlSFRUUCAmJiAoIlBVVCIgPT09IG8gfHwgIkRFTEVURSIgPT09IG8gfHwgIlBBVENIIiA9PT0gbykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYS50eXBlID0gIlBPU1QiLCBpLmVtdWxhdGVKU09OICYmIChhLmRhdGEuX21ldGhvZCA9IG8pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IGkuYmVmb3JlU2VuZDsKICAgICAgICAgICAgICAgICAgICAgICAgaS5iZWZvcmVTZW5kID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2V0UmVxdWVzdEhlYWRlcigiWC1IVFRQLU1ldGhvZC1PdmVycmlkZSIsIG8pLCBzID8gcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIkdFVCIgPT09IGEudHlwZSB8fCBpLmVtdWxhdGVKU09OIHx8IChhLnByb2Nlc3NEYXRhID0gITEpOwogICAgICAgICAgICAgICAgICAgIHZhciB1ID0gaS5lcnJvcjsKICAgICAgICAgICAgICAgICAgICBpLmVycm9yID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpLnRleHRTdGF0dXMgPSBlLCBpLmVycm9yVGhyb3duID0gbiwgdSAmJiB1LmNhbGwoaS5jb250ZXh0LCB0LCBlLCBuKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBpLnhociA9IGUuYWpheChuLmV4dGVuZChhLCBpKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIudHJpZ2dlcigicmVxdWVzdCIsIHIsIGMsIGkpLCBjCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIEEgPSB7CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgdXBkYXRlOiAiUFVUIiwKICAgICAgICAgICAgICAgICAgICBwYXRjaDogIlBBVENIIiwKICAgICAgICAgICAgICAgICAgICAiZGVsZXRlIjogIkRFTEVURSIsCiAgICAgICAgICAgICAgICAgICAgcmVhZDogIkdFVCIKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBlLmFqYXggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS4kLmFqYXguYXBwbHkoZS4kLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIE4gPSBlLlJvdXRlciA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdCB8fCAodCA9IHt9KSwgdC5yb3V0ZXMgJiYgKHRoaXMucm91dGVzID0gdC5yb3V0ZXMpLCB0aGlzLl9iaW5kUm91dGVzKCksIHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBSID0gL1woKC4qPylcKS9nLAogICAgICAgICAgICAgICAgICAgIEkgPSAvKFwoXD8pPzpcdysvZywKICAgICAgICAgICAgICAgICAgICBPID0gL1wqXHcrL2csCiAgICAgICAgICAgICAgICAgICAgTCA9IC9bXC17fVxbXF0rPy4sXFxcXiR8I1xzXS9nOwogICAgICAgICAgICAgICAgbi5leHRlbmQoTi5wcm90b3R5cGUsIGwsIHsKICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHt9LAogICAgICAgICAgICAgICAgICAgIHJvdXRlOiBmdW5jdGlvbih0LCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG4uaXNSZWdFeHAodCkgfHwgKHQgPSB0aGlzLl9yb3V0ZVRvUmVnRXhwKHQpKSwgbi5pc0Z1bmN0aW9uKHIpICYmIChpID0gciwgciA9ICIiKSwgaSB8fCAoaSA9IHRoaXNbcl0pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmhpc3Rvcnkucm91dGUodCwgZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBvLl9leHRyYWN0UGFyYW1ldGVycyh0LCBuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZXhlY3V0ZShpLCBhLCByKSAhPT0gITEgJiYgKG8udHJpZ2dlci5hcHBseShvLCBbInJvdXRlOiIgKyByXS5jb25jYXQoYSkpLCBvLnRyaWdnZXIoInJvdXRlIiwgciwgYSksIGUuaGlzdG9yeS50cmlnZ2VyKCJyb3V0ZSIsIG8sIHIsIGEpKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgdGhpcwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZTogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB0ICYmIHQuYXBwbHkodGhpcywgZSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbih0LCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmhpc3RvcnkubmF2aWdhdGUodCwgbiksIHRoaXMKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9iaW5kUm91dGVzOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucm91dGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlcyA9IG4ucmVzdWx0KHRoaXMsICJyb3V0ZXMiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQsIGUgPSBuLmtleXModGhpcy5yb3V0ZXMpOyBudWxsICE9ICh0ID0gZS5wb3AoKSk7KSB0aGlzLnJvdXRlKHQsIHRoaXMucm91dGVzW3RdKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBfcm91dGVUb1JlZ0V4cDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHQucmVwbGFjZShMLCAiXFwkJiIpLnJlcGxhY2UoUiwgIig/OiQxKT8iKS5yZXBsYWNlKEksIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID8gdCA6ICIoW14vP10rKSIKICAgICAgICAgICAgICAgICAgICAgICAgfSkucmVwbGFjZShPLCAiKFteP10qPykiKSwgbmV3IFJlZ0V4cCgiXiIgKyB0ICsgIig/OlxcPyhbXFxzXFxTXSopKT8kIikKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIF9leHRyYWN0UGFyYW1ldGVyczogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQuZXhlYyhlKS5zbGljZSgxKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4ubWFwKHIsIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID09PSByLmxlbmd0aCAtIDEgPyB0IHx8IG51bGwgOiB0ID8gZGVjb2RlVVJJQ29tcG9uZW50KHQpIDogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdmFyIEQgPSBlLkhpc3RvcnkgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVycyA9IFtdLCB0aGlzLmNoZWNrVXJsID0gbi5iaW5kKHRoaXMuY2hlY2tVcmwsIHRoaXMpLCAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ICYmICh0aGlzLmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLCB0aGlzLmhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFAgPSAvXlsjXC9dfFxzKyQvZywKICAgICAgICAgICAgICAgICAgICAkID0gL15cLyt8XC8rJC9nLAogICAgICAgICAgICAgICAgICAgIHEgPSAvIy4qJC87CiAgICAgICAgICAgICAgICBELnN0YXJ0ZWQgPSAhMSwgbi5leHRlbmQoRC5wcm90b3R5cGUsIGwsIHsKICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogNTAsCiAgICAgICAgICAgICAgICAgICAgYXRSb290OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1teXC9dJC8sICIkJi8iKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IHRoaXMucm9vdCAmJiAhdGhpcy5nZXRTZWFyY2goKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgbWF0Y2hSb290OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmRlY29kZUZyYWdtZW50KHRoaXMubG9jYXRpb24ucGF0aG5hbWUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHQuc2xpY2UoMCwgdGhpcy5yb290Lmxlbmd0aCAtIDEpICsgIi8iOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9PT0gdGhpcy5yb290CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkZWNvZGVGcmFnbWVudDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJKHQucmVwbGFjZSgvJTI1L2csICIlMjUyNSIpKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZ2V0U2VhcmNoOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmxvY2F0aW9uLmhyZWYucmVwbGFjZSgvIy4qLywgIiIpLm1hdGNoKC9cPy4rLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID8gdFswXSA6ICIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBnZXRIYXNoOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gKHQgfHwgdGhpcykubG9jYXRpb24uaHJlZi5tYXRjaCgvIyguKikkLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID8gZVsxXSA6ICIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBnZXRQYXRoOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLmRlY29kZUZyYWdtZW50KHRoaXMubG9jYXRpb24ucGF0aG5hbWUgKyB0aGlzLmdldFNlYXJjaCgpKS5zbGljZSh0aGlzLnJvb3QubGVuZ3RoIC0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiLyIgPT09IHQuY2hhckF0KDApID8gdC5zbGljZSgxKSA6IHQKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGdldEZyYWdtZW50OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgJiYgKHQgPSB0aGlzLl91c2VQdXNoU3RhdGUgfHwgIXRoaXMuX3dhbnRzSGFzaENoYW5nZSA/IHRoaXMuZ2V0UGF0aCgpIDogdGhpcy5nZXRIYXNoKCkpLCB0LnJlcGxhY2UoUCwgIiIpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoRC5zdGFydGVkKSB0aHJvdyBuZXcgRXJyb3IoIkJhY2tib25lLmhpc3RvcnkgaGFzIGFscmVhZHkgYmVlbiBzdGFydGVkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChELnN0YXJ0ZWQgPSAhMCwgdGhpcy5vcHRpb25zID0gbi5leHRlbmQoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6ICIvIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLCB0KSwgdGhpcy5yb290ID0gdGhpcy5vcHRpb25zLnJvb3QsIHRoaXMuX3dhbnRzSGFzaENoYW5nZSA9IHRoaXMub3B0aW9ucy5oYXNoQ2hhbmdlICE9PSAhMSwgdGhpcy5faGFzSGFzaENoYW5nZSA9ICJvbmhhc2hjaGFuZ2UiIGluIHdpbmRvdyAmJiAodm9pZCAwID09PSBkb2N1bWVudC5kb2N1bWVudE1vZGUgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gNyksIHRoaXMuX3VzZUhhc2hDaGFuZ2UgPSB0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgdGhpcy5faGFzSGFzaENoYW5nZSwgdGhpcy5fd2FudHNQdXNoU3RhdGUgPSAhIXRoaXMub3B0aW9ucy5wdXNoU3RhdGUsIHRoaXMuX2hhc1B1c2hTdGF0ZSA9ICEoIXRoaXMuaGlzdG9yeSB8fCAhdGhpcy5oaXN0b3J5LnB1c2hTdGF0ZSksIHRoaXMuX3VzZVB1c2hTdGF0ZSA9IHRoaXMuX3dhbnRzUHVzaFN0YXRlICYmIHRoaXMuX2hhc1B1c2hTdGF0ZSwgdGhpcy5mcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoKSwgdGhpcy5yb290ID0gKCIvIiArIHRoaXMucm9vdCArICIvIikucmVwbGFjZSgkLCAiLyIpLCB0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgdGhpcy5fd2FudHNQdXNoU3RhdGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faGFzUHVzaFN0YXRlICYmICF0aGlzLmF0Um9vdCgpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0aGlzLnJvb3Quc2xpY2UoMCwgLTEpIHx8ICIvIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5yZXBsYWNlKGUgKyAiIyIgKyB0aGlzLmdldFBhdGgoKSksICEwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNQdXNoU3RhdGUgJiYgdGhpcy5hdFJvb3QoKSAmJiB0aGlzLm5hdmlnYXRlKHRoaXMuZ2V0SGFzaCgpLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZTogITAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9oYXNIYXNoQ2hhbmdlICYmIHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiAhdGhpcy5fdXNlUHVzaFN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpLCB0aGlzLmlmcmFtZS5zcmMgPSAiamF2YXNjcmlwdDowIiwgdGhpcy5pZnJhbWUuc3R5bGUuZGlzcGxheSA9ICJub25lIiwgdGhpcy5pZnJhbWUudGFiSW5kZXggPSAtMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gZG9jdW1lbnQuYm9keSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gci5pbnNlcnRCZWZvcmUodGhpcy5pZnJhbWUsIHIuZmlyc3RDaGlsZCkuY29udGVudFdpbmRvdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZG9jdW1lbnQub3BlbigpLCBpLmRvY3VtZW50LmNsb3NlKCksIGkubG9jYXRpb24uaGFzaCA9ICIjIiArIHRoaXMuZnJhZ21lbnQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHRhY2hFdmVudCgib24iICsgdCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZVB1c2hTdGF0ZSA/IG8oInBvcHN0YXRlIiwgdGhpcy5jaGVja1VybCwgITEpIDogdGhpcy5fdXNlSGFzaENoYW5nZSAmJiAhdGhpcy5pZnJhbWUgPyBvKCJoYXNoY2hhbmdlIiwgdGhpcy5jaGVja1VybCwgITEpIDogdGhpcy5fd2FudHNIYXNoQ2hhbmdlICYmICh0aGlzLl9jaGVja1VybEludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5jaGVja1VybCwgdGhpcy5pbnRlcnZhbCkpLCB0aGlzLm9wdGlvbnMuc2lsZW50ID8gdm9pZCAwIDogdGhpcy5sb2FkVXJsKCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyIHx8IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXRhY2hFdmVudCgib24iICsgdCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXNlUHVzaFN0YXRlID8gdCgicG9wc3RhdGUiLCB0aGlzLmNoZWNrVXJsLCAhMSkgOiB0aGlzLl91c2VIYXNoQ2hhbmdlICYmICF0aGlzLmlmcmFtZSAmJiB0KCJoYXNoY2hhbmdlIiwgdGhpcy5jaGVja1VybCwgITEpLCB0aGlzLmlmcmFtZSAmJiAoZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmlmcmFtZSksIHRoaXMuaWZyYW1lID0gbnVsbCksIHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLl9jaGVja1VybEludGVydmFsKSwgRC5zdGFydGVkID0gITEKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJvdXRlOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlcnMudW5zaGlmdCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3V0ZTogdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjaGVja1VybDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMuZ2V0RnJhZ21lbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09IHRoaXMuZnJhZ21lbnQgJiYgdGhpcy5pZnJhbWUgJiYgKGUgPSB0aGlzLmdldEhhc2godGhpcy5pZnJhbWUuY29udGVudFdpbmRvdykpLCBlID09PSB0aGlzLmZyYWdtZW50ID8gITEgOiAodGhpcy5pZnJhbWUgJiYgdGhpcy5uYXZpZ2F0ZShlKSwgdm9pZCB0aGlzLmxvYWRVcmwoKSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGxvYWRVcmw6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hSb290KCkgPyAodCA9IHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KHQpLCBuLnNvbWUodGhpcy5oYW5kbGVycywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucm91dGUudGVzdCh0KSA/IChlLmNhbGxiYWNrKHQpLCAhMCkgOiB2b2lkIDAKICAgICAgICAgICAgICAgICAgICAgICAgfSkpIDogITEKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghRC5zdGFydGVkKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgZSAhPT0gITAgfHwgKGUgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiAhIWUKICAgICAgICAgICAgICAgICAgICAgICAgfSksIHQgPSB0aGlzLmdldEZyYWdtZW50KHQgfHwgIiIpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRoaXMucm9vdDsKICAgICAgICAgICAgICAgICAgICAgICAgKCIiID09PSB0IHx8ICI/IiA9PT0gdC5jaGFyQXQoMCkpICYmIChuID0gbi5zbGljZSgwLCAtMSkgfHwgIi8iKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBuICsgdDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPSB0aGlzLmRlY29kZUZyYWdtZW50KHQucmVwbGFjZShxLCAiIikpLCB0aGlzLmZyYWdtZW50ICE9PSB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5mcmFnbWVudCA9IHQsIHRoaXMuX3VzZVB1c2hTdGF0ZSkgdGhpcy5oaXN0b3J5W2UucmVwbGFjZSA/ICJyZXBsYWNlU3RhdGUiIDogInB1c2hTdGF0ZSJdKHt9LCBkb2N1bWVudC50aXRsZSwgcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3dhbnRzSGFzaENoYW5nZSkgcmV0dXJuIHRoaXMubG9jYXRpb24uYXNzaWduKHIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl91cGRhdGVIYXNoKHRoaXMubG9jYXRpb24sIHQsIGUucmVwbGFjZSksIHRoaXMuaWZyYW1lICYmIHQgIT09IHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZS5jb250ZW50V2luZG93KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuaWZyYW1lLmNvbnRlbnRXaW5kb3c7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucmVwbGFjZSB8fCAoaS5kb2N1bWVudC5vcGVuKCksIGkuZG9jdW1lbnQuY2xvc2UoKSksIHRoaXMuX3VwZGF0ZUhhc2goaS5sb2NhdGlvbiwgdCwgZS5yZXBsYWNlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRyaWdnZXIgPyB0aGlzLmxvYWRVcmwodCkgOiB2b2lkIDAKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgX3VwZGF0ZUhhc2g6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5ocmVmLnJlcGxhY2UoLyhqYXZhc2NyaXB0OnwjKS4qJC8sICIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucmVwbGFjZShyICsgIiMiICsgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHQuaGFzaCA9ICIjIiArIGUKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwgZS5oaXN0b3J5ID0gbmV3IEQ7CiAgICAgICAgICAgICAgICB2YXIgSCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSA9IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgciA9IHQgJiYgbi5oYXModCwgImNvbnN0cnVjdG9yIikgPyB0LmNvbnN0cnVjdG9yIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKICAgICAgICAgICAgICAgICAgICB9LCBuLmV4dGVuZChyLCBpLCBlKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gcgogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8ucHJvdG90eXBlID0gaS5wcm90b3R5cGUsIHIucHJvdG90eXBlID0gbmV3IG8sIHQgJiYgbi5leHRlbmQoci5wcm90b3R5cGUsIHQpLCByLl9fc3VwZXJfXyA9IGkucHJvdG90eXBlLCByCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgYi5leHRlbmQgPSB3LmV4dGVuZCA9IE4uZXh0ZW5kID0gai5leHRlbmQgPSBELmV4dGVuZCA9IEg7CiAgICAgICAgICAgICAgICB2YXIgTSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgInVybCIgcHJvcGVydHkgb3IgZnVuY3Rpb24gbXVzdCBiZSBzcGVjaWZpZWQnKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgRiA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlLmVycm9yOwogICAgICAgICAgICAgICAgICAgICAgICBlLmVycm9yID0gZnVuY3Rpb24ocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiAmJiBuLmNhbGwoZS5jb250ZXh0LCB0LCByLCBlKSwgdC50cmlnZ2VyKCJlcnJvciIsIHQsIHIsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgfSkKICAgICAgICB9KS5jYWxsKHRoaXMsICJ1bmRlZmluZWQiICE9IHR5cGVvZiBnbG9iYWwgPyBnbG9iYWwgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygc2VsZiA/IHNlbGYgOiAidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDoge30pCiAgICB9LCB7CiAgICAgICAganF1ZXJ5OiAxNSwKICAgICAgICB1bmRlcnNjb3JlOiAxMAogICAgfV0sCiAgICAxMDogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIHQodCkgewogICAgICAgICAgICAgICAgZnVuY3Rpb24gZShlLCBuLCByLCBpLCBvLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICg7IG8gPj0gMCAmJiBhID4gbzsgbyArPSB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaSA/IGlbb10gOiBvOwogICAgICAgICAgICAgICAgICAgICAgICByID0gbihyLCBlW3NdLCBzLCBlKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4sIHIsIGksIG8pIHsKICAgICAgICAgICAgICAgICAgICByID0gdyhyLCBvLCA0KTsKICAgICAgICAgICAgICAgICAgICB2YXIgYSA9ICFTKG4pICYmIHgua2V5cyhuKSwKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IChhIHx8IG4pLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHQgPiAwID8gMCA6IHMgLSAxOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMyAmJiAoaSA9IG5bYSA/IGFbdV0gOiB1XSwgdSArPSB0KSwgZShuLCByLCBpLCBhLCB1LCBzKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgbiA9IF8obiwgcik7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IEMoZSksIG8gPSB0ID4gMCA/IDAgOiBpIC0gMTsgbyA+PSAwICYmIGkgPiBvOyBvICs9IHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuKGVbb10sIG8sIGUpKSByZXR1cm4gbzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24ociwgaSwgbykgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IEMocik7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJudW1iZXIiID09IHR5cGVvZiBvKSB0ID4gMCA/IGEgPSBvID49IDAgPyBvIDogTWF0aC5tYXgobyArIHMsIGEpIDogcyA9IG8gPj0gMCA/IE1hdGgubWluKG8gKyAxLCBzKSA6IG8gKyBzICsgMTsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuICYmIG8gJiYgcykgcmV0dXJuIG8gPSBuKHIsIGkpLCByW29dID09PSBpID8gbyA6IC0xOwogICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpKSByZXR1cm4gbyA9IGUocC5jYWxsKHIsIGEsIHMpLCB4LmlzTmFOKSwgbyA+PSAwID8gbyArIGEgOiAtMTsKICAgICAgICAgICAgICAgICAgICBmb3IgKG8gPSB0ID4gMCA/IGEgOiBzIC0gMTsgbyA+PSAwICYmIHMgPiBvOyBvICs9IHQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyW29dID09PSBpKSByZXR1cm4gbzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gbyh0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IE8ubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIHIgPSB0LmNvbnN0cnVjdG9yLAogICAgICAgICAgICAgICAgICAgIGkgPSB4LmlzRnVuY3Rpb24ocikgJiYgci5wcm90b3R5cGUgfHwgYywKICAgICAgICAgICAgICAgICAgICBvID0gImNvbnN0cnVjdG9yIjsKICAgICAgICAgICAgICAgIGZvciAoeC5oYXModCwgbykgJiYgIXguY29udGFpbnMoZSwgbykgJiYgZS5wdXNoKG8pOyBuLS07KSBvID0gT1tuXSwgbyBpbiB0ICYmIHRbb10gIT09IGlbb10gJiYgIXguY29udGFpbnMoZSwgbykgJiYgZS5wdXNoKG8pCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGEgPSB0aGlzLAogICAgICAgICAgICAgICAgcyA9IGEuXywKICAgICAgICAgICAgICAgIHUgPSBBcnJheS5wcm90b3R5cGUsCiAgICAgICAgICAgICAgICBjID0gT2JqZWN0LnByb3RvdHlwZSwKICAgICAgICAgICAgICAgIGwgPSBGdW5jdGlvbi5wcm90b3R5cGUsCiAgICAgICAgICAgICAgICBmID0gdS5wdXNoLAogICAgICAgICAgICAgICAgcCA9IHUuc2xpY2UsCiAgICAgICAgICAgICAgICBoID0gYy50b1N0cmluZywKICAgICAgICAgICAgICAgIGQgPSBjLmhhc093blByb3BlcnR5LAogICAgICAgICAgICAgICAgZyA9IEFycmF5LmlzQXJyYXksCiAgICAgICAgICAgICAgICB2ID0gT2JqZWN0LmtleXMsCiAgICAgICAgICAgICAgICB5ID0gbC5iaW5kLAogICAgICAgICAgICAgICAgbSA9IE9iamVjdC5jcmVhdGUsCiAgICAgICAgICAgICAgICBiID0gZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgIHggPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiB4ID8gdCA6IHRoaXMgaW5zdGFuY2VvZiB4ID8gdm9pZCh0aGlzLl93cmFwcGVkID0gdCkgOiBuZXcgeCh0KQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgInVuZGVmaW5lZCIgIT0gdHlwZW9mIG4gPyAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIGUgJiYgZS5leHBvcnRzICYmIChuID0gZS5leHBvcnRzID0geCksIG4uXyA9IHgpIDogYS5fID0geCwgeC5WRVJTSU9OID0gIjEuOC4zIjsKICAgICAgICAgICAgdmFyIHcgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZSkgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChudWxsID09IG4gPyAzIDogbikgewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY2FsbChlLCBuLCByKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4sIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKGUsIG4sIHIsIGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obiwgciwgaSwgbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgbiwgciwgaSwgbykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5hcHBseShlLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF8gPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IHguaWRlbnRpdHkgOiB4LmlzRnVuY3Rpb24odCkgPyB3KHQsIGUsIG4pIDogeC5pc09iamVjdCh0KSA/IHgubWF0Y2hlcih0KSA6IHgucHJvcGVydHkodCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIHguaXRlcmF0ZWUgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gXyh0LCBlLCAxIC8gMCkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIGsgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBhcmd1bWVudHMubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMiA+IHIgfHwgbnVsbCA9PSBuKSByZXR1cm4gbjsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IHIgPiBpOyBpKyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gYXJndW1lbnRzW2ldLCBhID0gdChvKSwgcyA9IGEubGVuZ3RoLCB1ID0gMDsgcyA+IHU7IHUrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gYVt1XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlICYmIHZvaWQgMCAhPT0gbltjXSB8fCAobltjXSA9IG9bY10pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCF4LmlzT2JqZWN0KHQpKSByZXR1cm4ge307CiAgICAgICAgICAgICAgICAgICAgaWYgKG0pIHJldHVybiBtKHQpOwogICAgICAgICAgICAgICAgICAgIGIucHJvdG90eXBlID0gdDsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IG5ldyBiOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBiLnByb3RvdHlwZSA9IG51bGwsIGUKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBFID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IGUgPyB2b2lkIDAgOiBlW3RdCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGogPSBNYXRoLnBvdygyLCA1MykgLSAxLAogICAgICAgICAgICAgICAgQyA9IEUoImxlbmd0aCIpLAogICAgICAgICAgICAgICAgUyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IEModCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJudW1iZXIiID09IHR5cGVvZiBlICYmIGUgPj0gMCAmJiBqID49IGUKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIHguZWFjaCA9IHguZm9yRWFjaCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIGUgPSB3KGUsIG4pOwogICAgICAgICAgICAgICAgdmFyIHIsIGk7CiAgICAgICAgICAgICAgICBpZiAoUyh0KSkKICAgICAgICAgICAgICAgICAgICBmb3IgKHIgPSAwLCBpID0gdC5sZW5ndGg7IGkgPiByOyByKyspIGUodFtyXSwgciwgdCk7CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHgua2V5cyh0KTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHIgPSAwLCBpID0gby5sZW5ndGg7IGkgPiByOyByKyspIGUodFtvW3JdXSwgb1tyXSwgdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgIH0sIHgubWFwID0geC5jb2xsZWN0ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgZSA9IF8oZSwgbik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gIVModCkgJiYgeC5rZXlzKHQpLCBpID0gKHIgfHwgdCkubGVuZ3RoLCBvID0gQXJyYXkoaSksIGEgPSAwOyBpID4gYTsgYSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSByID8gclthXSA6IGE7CiAgICAgICAgICAgICAgICAgICAgb1thXSA9IGUodFtzXSwgcywgdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgIH0sIHgucmVkdWNlID0geC5mb2xkbCA9IHguaW5qZWN0ID0gdCgxKSwgeC5yZWR1Y2VSaWdodCA9IHguZm9sZHIgPSB0KC0xKSwgeC5maW5kID0geC5kZXRlY3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgcjsKICAgICAgICAgICAgICAgIHJldHVybiByID0gUyh0KSA/IHguZmluZEluZGV4KHQsIGUsIG4pIDogeC5maW5kS2V5KHQsIGUsIG4pLCB2b2lkIDAgIT09IHIgJiYgLTEgIT09IHIgPyB0W3JdIDogdm9pZCAwCiAgICAgICAgICAgIH0sIHguZmlsdGVyID0geC5zZWxlY3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IFtdOwogICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBfKGUsIG4pLCB4LmVhY2godCwgZnVuY3Rpb24odCwgbiwgaSkgewogICAgICAgICAgICAgICAgICAgIGUodCwgbiwgaSkgJiYgci5wdXNoKHQpCiAgICAgICAgICAgICAgICB9KSwgcgogICAgICAgICAgICB9LCB4LnJlamVjdCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHJldHVybiB4LmZpbHRlcih0LCB4Lm5lZ2F0ZShfKGUpKSwgbikKICAgICAgICAgICAgfSwgeC5ldmVyeSA9IHguYWxsID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgZSA9IF8oZSwgbik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gIVModCkgJiYgeC5rZXlzKHQpLCBpID0gKHIgfHwgdCkubGVuZ3RoLCBvID0gMDsgaSA+IG87IG8rKykgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gciA/IHJbb10gOiBvOwogICAgICAgICAgICAgICAgICAgIGlmICghZSh0W2FdLCBhLCB0KSkgcmV0dXJuICExCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gITAKICAgICAgICAgICAgfSwgeC5zb21lID0geC5hbnkgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICBlID0gXyhlLCBuKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAhUyh0KSAmJiB4LmtleXModCksIGkgPSAociB8fCB0KS5sZW5ndGgsIG8gPSAwOyBpID4gbzsgbysrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSByID8gcltvXSA6IG87CiAgICAgICAgICAgICAgICAgICAgaWYgKGUodFthXSwgYSwgdCkpIHJldHVybiAhMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuICExCiAgICAgICAgICAgIH0sIHguY29udGFpbnMgPSB4LmluY2x1ZGVzID0geC5pbmNsdWRlID0gZnVuY3Rpb24odCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgcmV0dXJuIFModCkgfHwgKHQgPSB4LnZhbHVlcyh0KSksICgibnVtYmVyIiAhPSB0eXBlb2YgbiB8fCByKSAmJiAobiA9IDApLCB4LmluZGV4T2YodCwgZSwgbikgPj0gMAogICAgICAgICAgICB9LCB4Lmludm9rZSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHZhciBuID0gcC5jYWxsKGFyZ3VtZW50cywgMiksCiAgICAgICAgICAgICAgICAgICAgciA9IHguaXNGdW5jdGlvbihlKTsKICAgICAgICAgICAgICAgIHJldHVybiB4Lm1hcCh0LCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSByID8gZSA6IHRbZV07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gaSA/IGkgOiBpLmFwcGx5KHQsIG4pCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LCB4LnBsdWNrID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHgubWFwKHQsIHgucHJvcGVydHkoZSkpCiAgICAgICAgICAgIH0sIHgud2hlcmUgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4geC5maWx0ZXIodCwgeC5tYXRjaGVyKGUpKQogICAgICAgICAgICB9LCB4LmZpbmRXaGVyZSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB4LmZpbmQodCwgeC5tYXRjaGVyKGUpKQogICAgICAgICAgICB9LCB4Lm1heCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHZhciByLCBpLCBvID0gLSgxIC8gMCksCiAgICAgICAgICAgICAgICAgICAgYSA9IC0oMSAvIDApOwogICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gZSAmJiBudWxsICE9IHQpIHsKICAgICAgICAgICAgICAgICAgICB0ID0gUyh0KSA/IHQgOiB4LnZhbHVlcyh0KTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMCwgdSA9IHQubGVuZ3RoOyB1ID4gczsgcysrKSByID0gdFtzXSwgciA+IG8gJiYgKG8gPSByKQogICAgICAgICAgICAgICAgfSBlbHNlIGUgPSBfKGUsIG4pLCB4LmVhY2godCwgZnVuY3Rpb24odCwgbiwgcikgewogICAgICAgICAgICAgICAgICAgIGkgPSBlKHQsIG4sIHIpLCAoaSA+IGEgfHwgaSA9PT0gLSgxIC8gMCkgJiYgbyA9PT0gLSgxIC8gMCkpICYmIChvID0gdCwgYSA9IGkpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgIH0sIHgubWluID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHIsIGksIG8gPSAxIC8gMCwKICAgICAgICAgICAgICAgICAgICBhID0gMSAvIDA7CiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBlICYmIG51bGwgIT0gdCkgewogICAgICAgICAgICAgICAgICAgIHQgPSBTKHQpID8gdCA6IHgudmFsdWVzKHQpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwLCB1ID0gdC5sZW5ndGg7IHUgPiBzOyBzKyspIHIgPSB0W3NdLCBvID4gciAmJiAobyA9IHIpCiAgICAgICAgICAgICAgICB9IGVsc2UgZSA9IF8oZSwgbiksIHguZWFjaCh0LCBmdW5jdGlvbih0LCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgaSA9IGUodCwgbiwgciksIChhID4gaSB8fCBpID09PSAxIC8gMCAmJiBvID09PSAxIC8gMCkgJiYgKG8gPSB0LCBhID0gaSkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIG8KICAgICAgICAgICAgfSwgeC5zaHVmZmxlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZSwgbiA9IFModCkgPyB0IDogeC52YWx1ZXModCksIHIgPSBuLmxlbmd0aCwgaSA9IEFycmF5KHIpLCBvID0gMDsgciA+IG87IG8rKykgZSA9IHgucmFuZG9tKDAsIG8pLCBlICE9PSBvICYmIChpW29dID0gaVtlXSksIGlbZV0gPSBuW29dOwogICAgICAgICAgICAgICAgcmV0dXJuIGkKICAgICAgICAgICAgfSwgeC5zYW1wbGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBlIHx8IG4gPyAoUyh0KSB8fCAodCA9IHgudmFsdWVzKHQpKSwgdFt4LnJhbmRvbSh0Lmxlbmd0aCAtIDEpXSkgOiB4LnNodWZmbGUodCkuc2xpY2UoMCwgTWF0aC5tYXgoMCwgZSkpCiAgICAgICAgICAgIH0sIHguc29ydEJ5ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBfKGUsIG4pLCB4LnBsdWNrKHgubWFwKHQsIGZ1bmN0aW9uKHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdCwKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG4sCiAgICAgICAgICAgICAgICAgICAgICAgIGNyaXRlcmlhOiBlKHQsIG4sIHIpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkuc29ydChmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LmNyaXRlcmlhLAogICAgICAgICAgICAgICAgICAgICAgICByID0gZS5jcml0ZXJpYTsKICAgICAgICAgICAgICAgICAgICBpZiAobiAhPT0gcikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA+IHIgfHwgdm9pZCAwID09PSBuKSByZXR1cm4gMTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPiBuIHx8IHZvaWQgMCA9PT0gcikgcmV0dXJuIC0xCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmluZGV4IC0gZS5pbmRleAogICAgICAgICAgICAgICAgfSksICJ2YWx1ZSIpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBBID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHt9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gXyhuLCByKSwgeC5lYWNoKGUsIGZ1bmN0aW9uKHIsIG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBuKHIsIG8sIGUpOwogICAgICAgICAgICAgICAgICAgICAgICB0KGksIHIsIGEpCiAgICAgICAgICAgICAgICAgICAgfSksIGkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgeC5ncm91cEJ5ID0gQShmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICB4Lmhhcyh0LCBuKSA/IHRbbl0ucHVzaChlKSA6IHRbbl0gPSBbZV0KICAgICAgICAgICAgfSksIHguaW5kZXhCeSA9IEEoZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgdFtuXSA9IGUKICAgICAgICAgICAgfSksIHguY291bnRCeSA9IEEoZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgeC5oYXModCwgbikgPyB0W25dKysgOiB0W25dID0gMQogICAgICAgICAgICB9KSwgeC50b0FycmF5ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHQgPyB4LmlzQXJyYXkodCkgPyBwLmNhbGwodCkgOiBTKHQpID8geC5tYXAodCwgeC5pZGVudGl0eSkgOiB4LnZhbHVlcyh0KSA6IFtdCiAgICAgICAgICAgIH0sIHguc2l6ZSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyAwIDogUyh0KSA/IHQubGVuZ3RoIDogeC5rZXlzKHQpLmxlbmd0aAogICAgICAgICAgICB9LCB4LnBhcnRpdGlvbiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIGUgPSBfKGUsIG4pOwogICAgICAgICAgICAgICAgdmFyIHIgPSBbXSwKICAgICAgICAgICAgICAgICAgICBpID0gW107CiAgICAgICAgICAgICAgICByZXR1cm4geC5lYWNoKHQsIGZ1bmN0aW9uKHQsIG4sIG8pIHsKICAgICAgICAgICAgICAgICAgICAoZSh0LCBuLCBvKSA/IHIgOiBpKS5wdXNoKHQpCiAgICAgICAgICAgICAgICB9KSwgW3IsIGldCiAgICAgICAgICAgIH0sIHguZmlyc3QgPSB4LmhlYWQgPSB4LnRha2UgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gdm9pZCAwIDogbnVsbCA9PSBlIHx8IG4gPyB0WzBdIDogeC5pbml0aWFsKHQsIHQubGVuZ3RoIC0gZSkKICAgICAgICAgICAgfSwgeC5pbml0aWFsID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgcmV0dXJuIHAuY2FsbCh0LCAwLCBNYXRoLm1heCgwLCB0Lmxlbmd0aCAtIChudWxsID09IGUgfHwgbiA/IDEgOiBlKSkpCiAgICAgICAgICAgIH0sIHgubGFzdCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyB2b2lkIDAgOiBudWxsID09IGUgfHwgbiA/IHRbdC5sZW5ndGggLSAxXSA6IHgucmVzdCh0LCBNYXRoLm1heCgwLCB0Lmxlbmd0aCAtIGUpKQogICAgICAgICAgICB9LCB4LnJlc3QgPSB4LnRhaWwgPSB4LmRyb3AgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcC5jYWxsKHQsIG51bGwgPT0gZSB8fCBuID8gMSA6IGUpCiAgICAgICAgICAgIH0sIHguY29tcGFjdCA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB4LmZpbHRlcih0LCB4LmlkZW50aXR5KQogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgTiA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBbXSwgbyA9IDAsIGEgPSByIHx8IDAsIHMgPSBDKHQpOyBzID4gYTsgYSsrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB0W2FdOwogICAgICAgICAgICAgICAgICAgIGlmIChTKHUpICYmICh4LmlzQXJyYXkodSkgfHwgeC5pc0FyZ3VtZW50cyh1KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSB8fCAodSA9IE4odSwgZSwgbikpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaS5sZW5ndGggKz0gbDsgbCA+IGM7KSBpW28rK10gPSB1W2MrK10KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbiB8fCAoaVtvKytdID0gdSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHguZmxhdHRlbiA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBOKHQsIGUsICExKQogICAgICAgICAgICB9LCB4LndpdGhvdXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4geC5kaWZmZXJlbmNlKHQsIHAuY2FsbChhcmd1bWVudHMsIDEpKQogICAgICAgICAgICB9LCB4LnVuaXEgPSB4LnVuaXF1ZSA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIHguaXNCb29sZWFuKGUpIHx8IChyID0gbiwgbiA9IGUsIGUgPSAhMSksIG51bGwgIT0gbiAmJiAobiA9IF8obiwgcikpOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IFtdLCBvID0gW10sIGEgPSAwLCBzID0gQyh0KTsgcyA+IGE7IGErKykgewogICAgICAgICAgICAgICAgICAgIHZhciB1ID0gdFthXSwKICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG4gPyBuKHUsIGEsIHQpIDogdTsKICAgICAgICAgICAgICAgICAgICBlID8gKGEgJiYgbyA9PT0gYyB8fCBpLnB1c2godSksIG8gPSBjKSA6IG4gPyB4LmNvbnRhaW5zKG8sIGMpIHx8IChvLnB1c2goYyksIGkucHVzaCh1KSkgOiB4LmNvbnRhaW5zKGksIHUpIHx8IGkucHVzaCh1KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGkKICAgICAgICAgICAgfSwgeC51bmlvbiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHgudW5pcShOKGFyZ3VtZW50cywgITAsICEwKSkKICAgICAgICAgICAgfSwgeC5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gW10sIG4gPSBhcmd1bWVudHMubGVuZ3RoLCByID0gMCwgaSA9IEModCk7IGkgPiByOyByKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHRbcl07CiAgICAgICAgICAgICAgICAgICAgaWYgKCF4LmNvbnRhaW5zKGUsIG8pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSAxOyBuID4gYSAmJiB4LmNvbnRhaW5zKGFyZ3VtZW50c1thXSwgbyk7IGErKyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGEgPT09IG4gJiYgZS5wdXNoKG8pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgfSwgeC5kaWZmZXJlbmNlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBOKGFyZ3VtZW50cywgITAsICEwLCAxKTsKICAgICAgICAgICAgICAgIHJldHVybiB4LmZpbHRlcih0LCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF4LmNvbnRhaW5zKGUsIHQpCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9LCB4LnppcCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHgudW56aXAoYXJndW1lbnRzKQogICAgICAgICAgICB9LCB4LnVuemlwID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IHQgJiYgeC5tYXgodCwgQykubGVuZ3RoIHx8IDAsIG4gPSBBcnJheShlKSwgciA9IDA7IGUgPiByOyByKyspIG5bcl0gPSB4LnBsdWNrKHQsIHIpOwogICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgfSwgeC5vYmplY3QgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0ge30sIHIgPSAwLCBpID0gQyh0KTsgaSA+IHI7IHIrKykgZSA/IG5bdFtyXV0gPSBlW3JdIDogblt0W3JdWzBdXSA9IHRbcl1bMV07CiAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICB9LCB4LmZpbmRJbmRleCA9IHIoMSksIHguZmluZExhc3RJbmRleCA9IHIoLTEpLCB4LnNvcnRlZEluZGV4ID0gZnVuY3Rpb24odCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgbiA9IF8obiwgciwgMSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gbihlKSwgbyA9IDAsIGEgPSBDKHQpOyBhID4gbzspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IE1hdGguZmxvb3IoKG8gKyBhKSAvIDIpOwogICAgICAgICAgICAgICAgICAgIG4odFtzXSkgPCBpID8gbyA9IHMgKyAxIDogYSA9IHMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgIH0sIHguaW5kZXhPZiA9IGkoMSwgeC5maW5kSW5kZXgsIHguc29ydGVkSW5kZXgpLCB4Lmxhc3RJbmRleE9mID0gaSgtMSwgeC5maW5kTGFzdEluZGV4KSwgeC5yYW5nZSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIG51bGwgPT0gZSAmJiAoZSA9IHQgfHwgMCwgdCA9IDApLCBuID0gbiB8fCAxOwogICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IE1hdGgubWF4KE1hdGguY2VpbCgoZSAtIHQpIC8gbiksIDApLCBpID0gQXJyYXkociksIG8gPSAwOyByID4gbzsgbysrLCB0ICs9IG4pIGlbb10gPSB0OwogICAgICAgICAgICAgICAgcmV0dXJuIGkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIFIgPSBmdW5jdGlvbih0LCBlLCBuLCByLCBpKSB7CiAgICAgICAgICAgICAgICBpZiAoIShyIGluc3RhbmNlb2YgZSkpIHJldHVybiB0LmFwcGx5KG4sIGkpOwogICAgICAgICAgICAgICAgdmFyIG8gPSBUKHQucHJvdG90eXBlKSwKICAgICAgICAgICAgICAgICAgICBhID0gdC5hcHBseShvLCBpKTsKICAgICAgICAgICAgICAgIHJldHVybiB4LmlzT2JqZWN0KGEpID8gYSA6IG8KICAgICAgICAgICAgfTsKICAgICAgICAgICAgeC5iaW5kID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgaWYgKHkgJiYgdC5iaW5kID09PSB5KSByZXR1cm4geS5hcHBseSh0LCBwLmNhbGwoYXJndW1lbnRzLCAxKSk7CiAgICAgICAgICAgICAgICBpZiAoIXguaXNGdW5jdGlvbih0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcigiQmluZCBtdXN0IGJlIGNhbGxlZCBvbiBhIGZ1bmN0aW9uIik7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHAuY2FsbChhcmd1bWVudHMsIDIpLAogICAgICAgICAgICAgICAgICAgIHIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFIodCwgciwgZSwgdGhpcywgbi5jb25jYXQocC5jYWxsKGFyZ3VtZW50cykpKQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gcgogICAgICAgICAgICB9LCB4LnBhcnRpYWwgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IHAuY2FsbChhcmd1bWVudHMsIDEpLAogICAgICAgICAgICAgICAgICAgIG4gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSBlLmxlbmd0aCwgbyA9IEFycmF5KGkpLCBhID0gMDsgaSA+IGE7IGErKykgb1thXSA9IGVbYV0gPT09IHggPyBhcmd1bWVudHNbcisrXSA6IGVbYV07CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByIDwgYXJndW1lbnRzLmxlbmd0aDspIG8ucHVzaChhcmd1bWVudHNbcisrXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSKHQsIG4sIHRoaXMsIHRoaXMsIG8pCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiBuCiAgICAgICAgICAgIH0sIHguYmluZEFsbCA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHZhciBlLCBuLCByID0gYXJndW1lbnRzLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmICgxID49IHIpIHRocm93IG5ldyBFcnJvcigiYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcyIpOwogICAgICAgICAgICAgICAgZm9yIChlID0gMTsgciA+IGU7IGUrKykgbiA9IGFyZ3VtZW50c1tlXSwgdFtuXSA9IHguYmluZCh0W25dLCB0KTsKICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgIH0sIHgubWVtb2l6ZSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHZhciBuID0gZnVuY3Rpb24ocikgewogICAgICAgICAgICAgICAgICAgIHZhciBpID0gbi5jYWNoZSwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICIiICsgKGUgPyBlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgOiByKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4geC5oYXMoaSwgbykgfHwgKGlbb10gPSB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpLCBpW29dCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIG4uY2FjaGUgPSB7fSwgbgogICAgICAgICAgICB9LCB4LmRlbGF5ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgdmFyIG4gPSBwLmNhbGwoYXJndW1lbnRzLCAyKTsKICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmFwcGx5KG51bGwsIG4pCiAgICAgICAgICAgICAgICB9LCBlKQogICAgICAgICAgICB9LCB4LmRlZmVyID0geC5wYXJ0aWFsKHguZGVsYXksIHgsIDEpLCB4LnRocm90dGxlID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIGEgPSBudWxsLAogICAgICAgICAgICAgICAgICAgIHMgPSAwOwogICAgICAgICAgICAgICAgbiB8fCAobiA9IHt9KTsKICAgICAgICAgICAgICAgIHZhciB1ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcyA9IG4ubGVhZGluZyA9PT0gITEgPyAwIDogeC5ub3coKSwgYSA9IG51bGwsIG8gPSB0LmFwcGx5KHIsIGkpLCBhIHx8IChyID0gaSA9IG51bGwpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjID0geC5ub3coKTsKICAgICAgICAgICAgICAgICAgICBzIHx8IG4ubGVhZGluZyAhPT0gITEgfHwgKHMgPSBjKTsKICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGUgLSAoYyAtIHMpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByID0gdGhpcywgaSA9IGFyZ3VtZW50cywgMCA+PSBsIHx8IGwgPiBlID8gKGEgJiYgKGNsZWFyVGltZW91dChhKSwgYSA9IG51bGwpLCBzID0gYywgbyA9IHQuYXBwbHkociwgaSksIGEgfHwgKHIgPSBpID0gbnVsbCkpIDogYSB8fCBuLnRyYWlsaW5nID09PSAhMSB8fCAoYSA9IHNldFRpbWVvdXQodSwgbCkpLCBvCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHguZGVib3VuY2UgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgciwgaSwgbywgYSwgcywgdSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciBjID0geC5ub3coKSAtIGE7CiAgICAgICAgICAgICAgICAgICAgZSA+IGMgJiYgYyA+PSAwID8gciA9IHNldFRpbWVvdXQodSwgZSAtIGMpIDogKHIgPSBudWxsLCBuIHx8IChzID0gdC5hcHBseShvLCBpKSwgciB8fCAobyA9IGkgPSBudWxsKSkpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLCBpID0gYXJndW1lbnRzLCBhID0geC5ub3coKTsKICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IG4gJiYgIXI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgfHwgKHIgPSBzZXRUaW1lb3V0KHUsIGUpKSwgYyAmJiAocyA9IHQuYXBwbHkobywgaSksIG8gPSBpID0gbnVsbCksIHMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgeC53cmFwID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHgucGFydGlhbChlLCB0KQogICAgICAgICAgICB9LCB4Lm5lZ2F0ZSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXQuYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB4LmNvbXBvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzLAogICAgICAgICAgICAgICAgICAgIGUgPSB0Lmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IGUsIHIgPSB0W2VdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IG4tLTspIHIgPSB0W25dLmNhbGwodGhpcywgcik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgeC5hZnRlciA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gLS10IDwgMSA/IGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA6IHZvaWQgMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB4LmJlZm9yZSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHZhciBuOwogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAtLXQgPiAwICYmIChuID0gZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgMSA+PSB0ICYmIChlID0gbnVsbCksIG4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgeC5vbmNlID0geC5wYXJ0aWFsKHguYmVmb3JlLCAyKTsKICAgICAgICAgICAgdmFyIEkgPSAhewogICAgICAgICAgICAgICAgICAgIHRvU3RyaW5nOiBudWxsCiAgICAgICAgICAgICAgICB9LnByb3BlcnR5SXNFbnVtZXJhYmxlKCJ0b1N0cmluZyIpLAogICAgICAgICAgICAgICAgTyA9IFsidmFsdWVPZiIsICJpc1Byb3RvdHlwZU9mIiwgInRvU3RyaW5nIiwgInByb3BlcnR5SXNFbnVtZXJhYmxlIiwgImhhc093blByb3BlcnR5IiwgInRvTG9jYWxlU3RyaW5nIl07CiAgICAgICAgICAgIHgua2V5cyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIGlmICgheC5pc09iamVjdCh0KSkgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgaWYgKHYpIHJldHVybiB2KHQpOwogICAgICAgICAgICAgICAgdmFyIGUgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIG4gaW4gdCkgeC5oYXModCwgbikgJiYgZS5wdXNoKG4pOwogICAgICAgICAgICAgICAgcmV0dXJuIEkgJiYgbyh0LCBlKSwgZQogICAgICAgICAgICB9LCB4LmFsbEtleXMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICBpZiAoIXguaXNPYmplY3QodCkpIHJldHVybiBbXTsKICAgICAgICAgICAgICAgIHZhciBlID0gW107CiAgICAgICAgICAgICAgICBmb3IgKHZhciBuIGluIHQpIGUucHVzaChuKTsKICAgICAgICAgICAgICAgIHJldHVybiBJICYmIG8odCwgZSksIGUKICAgICAgICAgICAgfSwgeC52YWx1ZXMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0geC5rZXlzKHQpLCBuID0gZS5sZW5ndGgsIHIgPSBBcnJheShuKSwgaSA9IDA7IG4gPiBpOyBpKyspIHJbaV0gPSB0W2VbaV1dOwogICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgfSwgeC5tYXBPYmplY3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICBlID0gXyhlLCBuKTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIsIGkgPSB4LmtleXModCksIG8gPSBpLmxlbmd0aCwgYSA9IHt9LCBzID0gMDsgbyA+IHM7IHMrKykgciA9IGlbc10sIGFbcl0gPSBlKHRbcl0sIHIsIHQpOwogICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgfSwgeC5wYWlycyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSB4LmtleXModCksIG4gPSBlLmxlbmd0aCwgciA9IEFycmF5KG4pLCBpID0gMDsgbiA+IGk7IGkrKykgcltpXSA9IFtlW2ldLCB0W2VbaV1dXTsKICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgICAgIH0sIHguaW52ZXJ0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IHt9LCBuID0geC5rZXlzKHQpLCByID0gMCwgaSA9IG4ubGVuZ3RoOyBpID4gcjsgcisrKSBlW3RbbltyXV1dID0gbltyXTsKICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgIH0sIHguZnVuY3Rpb25zID0geC5tZXRob2RzID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIG4gaW4gdCkgeC5pc0Z1bmN0aW9uKHRbbl0pICYmIGUucHVzaChuKTsKICAgICAgICAgICAgICAgIHJldHVybiBlLnNvcnQoKQogICAgICAgICAgICB9LCB4LmV4dGVuZCA9IGsoeC5hbGxLZXlzKSwgeC5leHRlbmRPd24gPSB4LmFzc2lnbiA9IGsoeC5rZXlzKSwgeC5maW5kS2V5ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgZSA9IF8oZSwgbik7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByLCBpID0geC5rZXlzKHQpLCBvID0gMCwgYSA9IGkubGVuZ3RoOyBhID4gbzsgbysrKQogICAgICAgICAgICAgICAgICAgIGlmIChyID0gaVtvXSwgZSh0W3JdLCByLCB0KSkgcmV0dXJuIHIKICAgICAgICAgICAgfSwgeC5waWNrID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHIsIGksIG8gPSB7fSwKICAgICAgICAgICAgICAgICAgICBhID0gdDsKICAgICAgICAgICAgICAgIGlmIChudWxsID09IGEpIHJldHVybiBvOwogICAgICAgICAgICAgICAgeC5pc0Z1bmN0aW9uKGUpID8gKGkgPSB4LmFsbEtleXMoYSksIHIgPSB3KGUsIG4pKSA6IChpID0gTihhcmd1bWVudHMsICExLCAhMSwgMSksIHIgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgaW4gbgogICAgICAgICAgICAgICAgfSwgYSA9IE9iamVjdChhKSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMCwgdSA9IGkubGVuZ3RoOyB1ID4gczsgcysrKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBpW3NdLAogICAgICAgICAgICAgICAgICAgICAgICBsID0gYVtjXTsKICAgICAgICAgICAgICAgICAgICByKGwsIGMsIGEpICYmIChvW2NdID0gbCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgIH0sIHgub21pdCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIGlmICh4LmlzRnVuY3Rpb24oZSkpIGUgPSB4Lm5lZ2F0ZShlKTsKICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciByID0geC5tYXAoTihhcmd1bWVudHMsICExLCAhMSwgMSksIFN0cmluZyk7CiAgICAgICAgICAgICAgICAgICAgZSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF4LmNvbnRhaW5zKHIsIGUpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHgucGljayh0LCBlLCBuKQogICAgICAgICAgICB9LCB4LmRlZmF1bHRzID0gayh4LmFsbEtleXMsICEwKSwgeC5jcmVhdGUgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IFQodCk7CiAgICAgICAgICAgICAgICByZXR1cm4gZSAmJiB4LmV4dGVuZE93bihuLCBlKSwgbgogICAgICAgICAgICB9LCB4LmNsb25lID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHguaXNPYmplY3QodCkgPyB4LmlzQXJyYXkodCkgPyB0LnNsaWNlKCkgOiB4LmV4dGVuZCh7fSwgdCkgOiB0CiAgICAgICAgICAgIH0sIHgudGFwID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUodCksIHQKICAgICAgICAgICAgfSwgeC5pc01hdGNoID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgdmFyIG4gPSB4LmtleXMoZSksCiAgICAgICAgICAgICAgICAgICAgciA9IG4ubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuICFyOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IE9iamVjdCh0KSwgbyA9IDA7IHIgPiBvOyBvKyspIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IG5bb107CiAgICAgICAgICAgICAgICAgICAgaWYgKGVbYV0gIT09IGlbYV0gfHwgIShhIGluIGkpKSByZXR1cm4gITEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgTCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIGlmICh0ID09PSBlKSByZXR1cm4gMCAhPT0gdCB8fCAxIC8gdCA9PT0gMSAvIGU7CiAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSB0IHx8IG51bGwgPT0gZSkgcmV0dXJuIHQgPT09IGU7CiAgICAgICAgICAgICAgICB0IGluc3RhbmNlb2YgeCAmJiAodCA9IHQuX3dyYXBwZWQpLCBlIGluc3RhbmNlb2YgeCAmJiAoZSA9IGUuX3dyYXBwZWQpOwogICAgICAgICAgICAgICAgdmFyIGkgPSBoLmNhbGwodCk7CiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaC5jYWxsKGUpKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGkpIHsKICAgICAgICAgICAgICAgICAgICBjYXNlICJbb2JqZWN0IFJlZ0V4cF0iOgogICAgICAgICAgICAgICAgICAgIGNhc2UgIltvYmplY3QgU3RyaW5nXSI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiIiArIHQgPT0gIiIgKyBlOwogICAgICAgICAgICAgICAgICAgIGNhc2UgIltvYmplY3QgTnVtYmVyXSI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiArdCAhPT0gK3QgPyArZSAhPT0gK2UgOiAwID09PSArdCA/IDEgLyArdCA9PT0gMSAvIGUgOiArdCA9PT0gK2U7CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiW29iamVjdCBEYXRlXSI6CiAgICAgICAgICAgICAgICAgICAgY2FzZSAiW29iamVjdCBCb29sZWFuXSI6CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiArdCA9PT0gK2UKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBvID0gIltvYmplY3QgQXJyYXldIiA9PT0gaTsKICAgICAgICAgICAgICAgIGlmICghbykgewogICAgICAgICAgICAgICAgICAgIGlmICgib2JqZWN0IiAhPSB0eXBlb2YgdCB8fCAib2JqZWN0IiAhPSB0eXBlb2YgZSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgIHZhciBhID0gdC5jb25zdHJ1Y3RvciwKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGUuY29uc3RydWN0b3I7CiAgICAgICAgICAgICAgICAgICAgaWYgKGEgIT09IHMgJiYgISh4LmlzRnVuY3Rpb24oYSkgJiYgYSBpbnN0YW5jZW9mIGEgJiYgeC5pc0Z1bmN0aW9uKHMpICYmIHMgaW5zdGFuY2VvZiBzKSAmJiAiY29uc3RydWN0b3IiIGluIHQgJiYgImNvbnN0cnVjdG9yIiBpbiBlKSByZXR1cm4gITEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG4gPSBuIHx8IFtdLCByID0gciB8fCBbXTsKICAgICAgICAgICAgICAgIGZvciAodmFyIHUgPSBuLmxlbmd0aDsgdS0tOykKICAgICAgICAgICAgICAgICAgICBpZiAoblt1XSA9PT0gdCkgcmV0dXJuIHJbdV0gPT09IGU7CiAgICAgICAgICAgICAgICBpZiAobi5wdXNoKHQpLCByLnB1c2goZSksIG8pIHsKICAgICAgICAgICAgICAgICAgICBpZiAodSA9IHQubGVuZ3RoLCB1ICE9PSBlLmxlbmd0aCkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgIGZvciAoOyB1LS07KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUwodFt1XSwgZVt1XSwgbiwgcikpIHJldHVybiAhMQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB2YXIgYywgbCA9IHgua2V5cyh0KTsKICAgICAgICAgICAgICAgICAgICBpZiAodSA9IGwubGVuZ3RoLCB4LmtleXMoZSkubGVuZ3RoICE9PSB1KSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHUtLTspCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjID0gbFt1XSwgIXguaGFzKGUsIGMpIHx8ICFMKHRbY10sIGVbY10sIG4sIHIpKSByZXR1cm4gITEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBuLnBvcCgpLCByLnBvcCgpLCAhMAogICAgICAgICAgICB9OwogICAgICAgICAgICB4LmlzRXF1YWwgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTCh0LCBlKQogICAgICAgICAgICB9LCB4LmlzRW1wdHkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gITAgOiBTKHQpICYmICh4LmlzQXJyYXkodCkgfHwgeC5pc1N0cmluZyh0KSB8fCB4LmlzQXJndW1lbnRzKHQpKSA/IDAgPT09IHQubGVuZ3RoIDogMCA9PT0geC5rZXlzKHQpLmxlbmd0aAogICAgICAgICAgICB9LCB4LmlzRWxlbWVudCA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhKCF0IHx8IDEgIT09IHQubm9kZVR5cGUpCiAgICAgICAgICAgIH0sIHguaXNBcnJheSA9IGcgfHwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuICJbb2JqZWN0IEFycmF5XSIgPT09IGguY2FsbCh0KQogICAgICAgICAgICB9LCB4LmlzT2JqZWN0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB0eXBlb2YgdDsKICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09PSBlIHx8ICJvYmplY3QiID09PSBlICYmICEhdAogICAgICAgICAgICB9LCB4LmVhY2goWyJBcmd1bWVudHMiLCAiRnVuY3Rpb24iLCAiU3RyaW5nIiwgIk51bWJlciIsICJEYXRlIiwgIlJlZ0V4cCIsICJFcnJvciJdLCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB4WyJpcyIgKyB0XSA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC5jYWxsKGUpID09PSAiW29iamVjdCAiICsgdCArICJdIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgeC5pc0FyZ3VtZW50cyhhcmd1bWVudHMpIHx8ICh4LmlzQXJndW1lbnRzID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHguaGFzKHQsICJjYWxsZWUiKQogICAgICAgICAgICB9KSwgImZ1bmN0aW9uIiAhPSB0eXBlb2YgLy4vICYmICJvYmplY3QiICE9IHR5cGVvZiBJbnQ4QXJyYXkgJiYgKHguaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiB0IHx8ICExCiAgICAgICAgICAgIH0pLCB4LmlzRmluaXRlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGlzRmluaXRlKHQpICYmICFpc05hTihwYXJzZUZsb2F0KHQpKQogICAgICAgICAgICB9LCB4LmlzTmFOID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHguaXNOdW1iZXIodCkgJiYgdCAhPT0gK3QKICAgICAgICAgICAgfSwgeC5pc0Jvb2xlYW4gPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gITAgfHwgdCA9PT0gITEgfHwgIltvYmplY3QgQm9vbGVhbl0iID09PSBoLmNhbGwodCkKICAgICAgICAgICAgfSwgeC5pc051bGwgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PT0gdAogICAgICAgICAgICB9LCB4LmlzVW5kZWZpbmVkID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdAogICAgICAgICAgICB9LCB4LmhhcyA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgZC5jYWxsKHQsIGUpCiAgICAgICAgICAgIH0sIHgubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGEuXyA9IHMsIHRoaXMKICAgICAgICAgICAgfSwgeC5pZGVudGl0eSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgIH0sIHguY29uc3RhbnQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgeC5ub29wID0gZnVuY3Rpb24oKSB7fSwgeC5wcm9wZXJ0eSA9IEUsIHgucHJvcGVydHlPZiA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBmdW5jdGlvbigpIHt9IDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0W2VdCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIHgubWF0Y2hlciA9IHgubWF0Y2hlcyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0ID0geC5leHRlbmRPd24oe30sIHQpLAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHguaXNNYXRjaChlLCB0KQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgeC50aW1lcyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHZhciByID0gQXJyYXkoTWF0aC5tYXgoMCwgdCkpOwogICAgICAgICAgICAgICAgZSA9IHcoZSwgbiwgMSk7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgdCA+IGk7IGkrKykgcltpXSA9IGUoaSk7CiAgICAgICAgICAgICAgICByZXR1cm4gcgogICAgICAgICAgICB9LCB4LnJhbmRvbSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IGUgJiYgKGUgPSB0LCB0ID0gMCksIHQgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZSAtIHQgKyAxKSkKICAgICAgICAgICAgfSwgeC5ub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiAobmV3IERhdGUpLmdldFRpbWUoKQogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgRCA9IHsKICAgICAgICAgICAgICAgICAgICAiJiI6ICImYW1wOyIsCiAgICAgICAgICAgICAgICAgICAgIjwiOiAiJmx0OyIsCiAgICAgICAgICAgICAgICAgICAgIj4iOiAiJmd0OyIsCiAgICAgICAgICAgICAgICAgICAgJyInOiAiJnF1b3Q7IiwKICAgICAgICAgICAgICAgICAgICAiJyI6ICImI3gyNzsiLAogICAgICAgICAgICAgICAgICAgICJgIjogIiYjeDYwOyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBQID0geC5pbnZlcnQoRCksCiAgICAgICAgICAgICAgICAkID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRbZV0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbiA9ICIoPzoiICsgeC5rZXlzKHQpLmpvaW4oInwiKSArICIpIiwKICAgICAgICAgICAgICAgICAgICAgICAgciA9IFJlZ0V4cChuKSwKICAgICAgICAgICAgICAgICAgICAgICAgaSA9IFJlZ0V4cChuLCAiZyIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gbnVsbCA9PSB0ID8gIiIgOiAiIiArIHQsIHIudGVzdCh0KSA/IHQucmVwbGFjZShpLCBlKSA6IHQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB4LmVzY2FwZSA9ICQoRCksIHgudW5lc2NhcGUgPSAkKFApLCB4LnJlc3VsdCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHZhciByID0gbnVsbCA9PSB0ID8gdm9pZCAwIDogdFtlXTsKICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IHIgJiYgKHIgPSBuKSwgeC5pc0Z1bmN0aW9uKHIpID8gci5jYWxsKHQpIDogcgogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgcSA9IDA7CiAgICAgICAgICAgIHgudW5pcXVlSWQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9ICsrcSArICIiOwogICAgICAgICAgICAgICAgcmV0dXJuIHQgPyB0ICsgZSA6IGUKICAgICAgICAgICAgfSwgeC50ZW1wbGF0ZVNldHRpbmdzID0gewogICAgICAgICAgICAgICAgZXZhbHVhdGU6IC88JShbXHNcU10rPyklPi9nLAogICAgICAgICAgICAgICAgaW50ZXJwb2xhdGU6IC88JT0oW1xzXFNdKz8pJT4vZywKICAgICAgICAgICAgICAgIGVzY2FwZTogLzwlLShbXHNcU10rPyklPi9nCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBIID0gLyguKV4vLAogICAgICAgICAgICAgICAgTSA9IHsKICAgICAgICAgICAgICAgICAgICAiJyI6ICInIiwKICAgICAgICAgICAgICAgICAgICAiXFwiOiAiXFwiLAogICAgICAgICAgICAgICAgICAgICJcciI6ICJyIiwKICAgICAgICAgICAgICAgICAgICAiXG4iOiAibiIsCiAgICAgICAgICAgICAgICAgICAgIlx1MjAyOCI6ICJ1MjAyOCIsCiAgICAgICAgICAgICAgICAgICAgIlx1MjAyOSI6ICJ1MjAyOSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBGID0gL1xcfCd8XHJ8XG58XHUyMDI4fFx1MjAyOS9nLAogICAgICAgICAgICAgICAgQiA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIlxcIiArIE1bdF0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIHgudGVtcGxhdGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAhZSAmJiBuICYmIChlID0gbiksIGUgPSB4LmRlZmF1bHRzKHt9LCBlLCB4LnRlbXBsYXRlU2V0dGluZ3MpOwogICAgICAgICAgICAgICAgdmFyIHIgPSBSZWdFeHAoWyhlLmVzY2FwZSB8fCBIKS5zb3VyY2UsIChlLmludGVycG9sYXRlIHx8IEgpLnNvdXJjZSwgKGUuZXZhbHVhdGUgfHwgSCkuc291cmNlXS5qb2luKCJ8IikgKyAifCQiLCAiZyIpLAogICAgICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgICAgIG8gPSAiX19wKz0nIjsKICAgICAgICAgICAgICAgIHQucmVwbGFjZShyLCBmdW5jdGlvbihlLCBuLCByLCBhLCBzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8gKz0gdC5zbGljZShpLCBzKS5yZXBsYWNlKEYsIEIpLCBpID0gcyArIGUubGVuZ3RoLCBuID8gbyArPSAiJytcbigoX190PSgiICsgbiArICIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcbiciIDogciA/IG8gKz0gIicrXG4oKF9fdD0oIiArIHIgKyAiKSk9PW51bGw/Jyc6X190KStcbiciIDogYSAmJiAobyArPSAiJztcbiIgKyBhICsgIlxuX19wKz0nIiksIGUKICAgICAgICAgICAgICAgIH0pLCBvICs9ICInO1xuIiwgZS52YXJpYWJsZSB8fCAobyA9ICJ3aXRoKG9ianx8e30pe1xuIiArIG8gKyAifVxuIiksIG8gPSAidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLHByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XG4iICsgbyArICJyZXR1cm4gX19wO1xuIjsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBuZXcgRnVuY3Rpb24oZS52YXJpYWJsZSB8fCAib2JqIiwgIl8iLCBvKQogICAgICAgICAgICAgICAgfSBjYXRjaCAocykgewogICAgICAgICAgICAgICAgICAgIHRocm93IHMuc291cmNlID0gbywgcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHUgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmNhbGwodGhpcywgdCwgeCkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGMgPSBlLnZhcmlhYmxlIHx8ICJvYmoiOwogICAgICAgICAgICAgICAgcmV0dXJuIHUuc291cmNlID0gImZ1bmN0aW9uKCIgKyBjICsgIil7XG4iICsgbyArICJ9IiwgdQogICAgICAgICAgICB9LCB4LmNoYWluID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSB4KHQpOwogICAgICAgICAgICAgICAgcmV0dXJuIGUuX2NoYWluID0gITAsIGUKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIFUgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdC5fY2hhaW4gPyB4KGUpLmNoYWluKCkgOiBlCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHgubWl4aW4gPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICB4LmVhY2goeC5mdW5jdGlvbnModCksIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHhbZV0gPSB0W2VdOwogICAgICAgICAgICAgICAgICAgIHgucHJvdG90eXBlW2VdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gW3RoaXMuX3dyYXBwZWRdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZi5hcHBseSh0LCBhcmd1bWVudHMpLCBVKHRoaXMsIG4uYXBwbHkoeCwgdCkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSwgeC5taXhpbih4KSwgeC5lYWNoKFsicG9wIiwgInB1c2giLCAicmV2ZXJzZSIsICJzaGlmdCIsICJzb3J0IiwgInNwbGljZSIsICJ1bnNoaWZ0Il0sIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdVt0XTsKICAgICAgICAgICAgICAgIHgucHJvdG90eXBlW3RdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl93cmFwcGVkOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmFwcGx5KG4sIGFyZ3VtZW50cyksICJzaGlmdCIgIT09IHQgJiYgInNwbGljZSIgIT09IHQgfHwgMCAhPT0gbi5sZW5ndGggfHwgZGVsZXRlIG5bMF0sIFUodGhpcywgbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIHguZWFjaChbImNvbmNhdCIsICJqb2luIiwgInNsaWNlIl0sIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gdVt0XTsKICAgICAgICAgICAgICAgIHgucHJvdG90eXBlW3RdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFUodGhpcywgZS5hcHBseSh0aGlzLl93cmFwcGVkLCBhcmd1bWVudHMpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgeC5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwcGVkCiAgICAgICAgICAgIH0sIHgucHJvdG90eXBlLnZhbHVlT2YgPSB4LnByb3RvdHlwZS50b0pTT04gPSB4LnByb3RvdHlwZS52YWx1ZSwgeC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiAiIiArIHRoaXMuX3dyYXBwZWQKICAgICAgICAgICAgfSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgZGVmaW5lICYmIGRlZmluZS5hbWQgJiYgZGVmaW5lKCJ1bmRlcnNjb3JlIiwgW10sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHgKICAgICAgICAgICAgfSkKICAgICAgICB9KS5jYWxsKHRoaXMpCiAgICB9LCB7fV0sCiAgICAxMTogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICBmdW5jdGlvbiByKCkgewogICAgICAgICAgICBpZiAoIXMpIHsKICAgICAgICAgICAgICAgIHMgPSAhMDsKICAgICAgICAgICAgICAgIGZvciAodmFyIHQsIGUgPSBhLmxlbmd0aDsgZTspIHsKICAgICAgICAgICAgICAgICAgICB0ID0gYSwgYSA9IFtdOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMTsgKytuIDwgZTspIHRbbl0oKTsKICAgICAgICAgICAgICAgICAgICBlID0gYS5sZW5ndGgKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHMgPSAhMQogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpKCkge30KICAgICAgICB2YXIgbyA9IGUuZXhwb3J0cyA9IHt9LAogICAgICAgICAgICBhID0gW10sCiAgICAgICAgICAgIHMgPSAhMTsKICAgICAgICBvLm5leHRUaWNrID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICBhLnB1c2godCksIHMgfHwgc2V0VGltZW91dChyLCAwKQogICAgICAgIH0sIG8udGl0bGUgPSAiYnJvd3NlciIsIG8uYnJvd3NlciA9ICEwLCBvLmVudiA9IHt9LCBvLmFyZ3YgPSBbXSwgby52ZXJzaW9uID0gIiIsIG8udmVyc2lvbnMgPSB7fSwgby5vbiA9IGksIG8uYWRkTGlzdGVuZXIgPSBpLCBvLm9uY2UgPSBpLCBvLm9mZiA9IGksIG8ucmVtb3ZlTGlzdGVuZXIgPSBpLCBvLnJlbW92ZUFsbExpc3RlbmVycyA9IGksIG8uZW1pdCA9IGksIG8uYmluZGluZyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpCiAgICAgICAgfSwgby5jd2QgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuICIvIgogICAgICAgIH0sIG8uY2hkaXIgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkIikKICAgICAgICB9LCBvLnVtYXNrID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiAwCiAgICAgICAgfQogICAgfSwge31dLAogICAgMTI6IFtmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgISBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCkgewogICAgICAgICAgICAgICAgIn0iID09PSB0Lm4uc3Vic3RyKHQubi5sZW5ndGggLSAxKSAmJiAodC5uID0gdC5uLnN1YnN0cmluZygwLCB0Lm4ubGVuZ3RoIC0gMSkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG4odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHQudHJpbSA/IHQudHJpbSgpIDogdC5yZXBsYWNlKC9eXHMqfFxzKiQvZywgIiIpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHIodCwgZSwgbikgewogICAgICAgICAgICAgICAgaWYgKGUuY2hhckF0KG4pICE9IHQuY2hhckF0KDApKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMSwgaSA9IHQubGVuZ3RoOyBpID4gcjsgcisrKQogICAgICAgICAgICAgICAgICAgIGlmIChlLmNoYXJBdChuICsgcikgIT0gdC5jaGFyQXQocikpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBpKGUsIG4sIHIsIHMpIHsKICAgICAgICAgICAgICAgIHZhciB1ID0gW10sCiAgICAgICAgICAgICAgICAgICAgYyA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgbCA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgZiA9IG51bGw7CiAgICAgICAgICAgICAgICBmb3IgKGwgPSByW3IubGVuZ3RoIC0gMV07IGUubGVuZ3RoID4gMDspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZiA9IGUuc2hpZnQoKSwgbCAmJiAiPCIgPT0gbC50YWcgJiYgIShmLnRhZyBpbiB3KSkgdGhyb3cgbmV3IEVycm9yKCJJbGxlZ2FsIGNvbnRlbnQgaW4gPCBzdXBlciB0YWcuIik7CiAgICAgICAgICAgICAgICAgICAgaWYgKHQudGFnc1tmLnRhZ10gPD0gdC50YWdzLiQgfHwgbyhmLCBzKSkgci5wdXNoKGYpLCBmLm5vZGVzID0gaShlLCBmLnRhZywgciwgcyk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiLyIgPT0gZi50YWcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgwID09PSByLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKCJDbG9zaW5nIHRhZyB3aXRob3V0IG9wZW5lcjogLyIgKyBmLm4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPSByLnBvcCgpLCBmLm4gIT0gYy5uICYmICFhKGYubiwgYy5uLCBzKSkgdGhyb3cgbmV3IEVycm9yKCJOZXN0aW5nIGVycm9yOiAiICsgYy5uICsgIiB2cy4gIiArIGYubik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5lbmQgPSBmLmksIHUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAiXG4iID09IGYudGFnICYmIChmLmxhc3QgPSAwID09IGUubGVuZ3RoIHx8ICJcbiIgPT0gZVswXS50YWcpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHUucHVzaChmKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHIubGVuZ3RoID4gMCkgdGhyb3cgbmV3IEVycm9yKCJtaXNzaW5nIGNsb3NpbmcgdGFnOiAiICsgci5wb3AoKS5uKTsKICAgICAgICAgICAgICAgIHJldHVybiB1CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG8odCwgZSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSBlLmxlbmd0aDsgciA+IG47IG4rKykKICAgICAgICAgICAgICAgICAgICBpZiAoZVtuXS5vID09IHQubikgcmV0dXJuIHQudGFnID0gIiMiLCAhMAogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBhKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBpID0gbi5sZW5ndGg7IGkgPiByOyByKyspCiAgICAgICAgICAgICAgICAgICAgaWYgKG5bcl0uYyA9PSB0ICYmIG5bcl0ubyA9PSBlKSByZXR1cm4gITAKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gcyh0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0KSBlLnB1c2goJyInICsgYyhuKSArICciOiBmdW5jdGlvbihjLHAsdCxpKSB7JyArIHRbbl0gKyAifSIpOwogICAgICAgICAgICAgICAgcmV0dXJuICJ7ICIgKyBlLmpvaW4oIiwiKSArICIgfSIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gdSh0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0LnBhcnRpYWxzKSBlLnB1c2goJyInICsgYyhuKSArICciOntuYW1lOiInICsgYyh0LnBhcnRpYWxzW25dLm5hbWUpICsgJyIsICcgKyB1KHQucGFydGlhbHNbbl0pICsgIn0iKTsKICAgICAgICAgICAgICAgIHJldHVybiAicGFydGlhbHM6IHsiICsgZS5qb2luKCIsIikgKyAifSwgc3ViczogIiArIHModC5zdWJzKQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0LnJlcGxhY2UobSwgIlxcXFwiKS5yZXBsYWNlKGcsICdcXCInKS5yZXBsYWNlKHYsICJcXG4iKS5yZXBsYWNlKHksICJcXHIiKS5yZXBsYWNlKGIsICJcXHUyMDI4IikucmVwbGFjZSh4LCAiXFx1MjAyOSIpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGwodCkgewogICAgICAgICAgICAgICAgcmV0dXJuIH50LmluZGV4T2YoIi4iKSA/ICJkIiA6ICJmIgogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBmKHQsIGUpIHsKICAgICAgICAgICAgICAgIHZhciBuID0gIjwiICsgKGUucHJlZml4IHx8ICIiKSwKICAgICAgICAgICAgICAgICAgICByID0gbiArIHQubiArIF8rKzsKICAgICAgICAgICAgICAgIHJldHVybiBlLnBhcnRpYWxzW3JdID0gewogICAgICAgICAgICAgICAgICAgIG5hbWU6IHQubiwKICAgICAgICAgICAgICAgICAgICBwYXJ0aWFsczoge30KICAgICAgICAgICAgICAgIH0sIGUuY29kZSArPSAndC5iKHQucnAoIicgKyBjKHIpICsgJyIsYyxwLCInICsgKHQuaW5kZW50IHx8ICIiKSArICciKSk7JywgcgogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBwKHQsIGUpIHsKICAgICAgICAgICAgICAgIGUuY29kZSArPSAidC5iKHQudCh0LiIgKyBsKHQubikgKyAnKCInICsgYyh0Lm4pICsgJyIsYyxwLDApKSk7JwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBoKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAidC5iKCIgKyB0ICsgIik7IgogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBkID0gL1xTLywKICAgICAgICAgICAgICAgIGcgPSAvXCIvZywKICAgICAgICAgICAgICAgIHYgPSAvXG4vZywKICAgICAgICAgICAgICAgIHkgPSAvXHIvZywKICAgICAgICAgICAgICAgIG0gPSAvXFwvZywKICAgICAgICAgICAgICAgIGIgPSAvXHUyMDI4LywKICAgICAgICAgICAgICAgIHggPSAvXHUyMDI5LzsKICAgICAgICAgICAgdC50YWdzID0gewogICAgICAgICAgICAgICAgIiMiOiAxLAogICAgICAgICAgICAgICAgIl4iOiAyLAogICAgICAgICAgICAgICAgIjwiOiAzLAogICAgICAgICAgICAgICAgJDogNCwKICAgICAgICAgICAgICAgICIvIjogNSwKICAgICAgICAgICAgICAgICIhIjogNiwKICAgICAgICAgICAgICAgICI+IjogNywKICAgICAgICAgICAgICAgICI9IjogOCwKICAgICAgICAgICAgICAgIF92OiA5LAogICAgICAgICAgICAgICAgInsiOiAxMCwKICAgICAgICAgICAgICAgICImIjogMTEsCiAgICAgICAgICAgICAgICBfdDogMTIKICAgICAgICAgICAgfSwgdC5zY2FuID0gZnVuY3Rpb24oaSwgbykgewogICAgICAgICAgICAgICAgZnVuY3Rpb24gYSgpIHsKICAgICAgICAgICAgICAgICAgICBtLmxlbmd0aCA+IDAgJiYgKGIucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogIl90IiwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbmV3IFN0cmluZyhtKQogICAgICAgICAgICAgICAgICAgIH0pLCBtID0gIiIpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gcygpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gITAsIG4gPSBfOyBuIDwgYi5sZW5ndGg7IG4rKykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSB0LnRhZ3NbYltuXS50YWddIDwgdC50YWdzLl92IHx8ICJfdCIgPT0gYltuXS50YWcgJiYgbnVsbCA9PT0gYltuXS50ZXh0Lm1hdGNoKGQpLCAhZSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gdSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGEoKSwgdCAmJiBzKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4sIHIgPSBfOyByIDwgYi5sZW5ndGg7IHIrKykgYltyXS50ZXh0ICYmICgobiA9IGJbciArIDFdKSAmJiAiPiIgPT0gbi50YWcgJiYgKG4uaW5kZW50ID0gYltyXS50ZXh0LnRvU3RyaW5nKCkpLCBiLnNwbGljZShyLCAxKSk7CiAgICAgICAgICAgICAgICAgICAgZWxzZSBlIHx8IGIucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogIlxuIgogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHggPSAhMSwgXyA9IGIubGVuZ3RoCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gYyh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAiPSIgKyBULAogICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5pbmRleE9mKHIsIGUpLAogICAgICAgICAgICAgICAgICAgICAgICBvID0gbih0LnN1YnN0cmluZyh0LmluZGV4T2YoIj0iLCBlKSArIDEsIGkpKS5zcGxpdCgiICIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBrID0gb1swXSwgVCA9IG9bby5sZW5ndGggLSAxXSwgaSArIHIubGVuZ3RoIC0gMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGwgPSBpLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBmID0gMCwKICAgICAgICAgICAgICAgICAgICBwID0gMSwKICAgICAgICAgICAgICAgICAgICBoID0gMiwKICAgICAgICAgICAgICAgICAgICBnID0gZiwKICAgICAgICAgICAgICAgICAgICB2ID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICB5ID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICBtID0gIiIsCiAgICAgICAgICAgICAgICAgICAgYiA9IFtdLAogICAgICAgICAgICAgICAgICAgIHggPSAhMSwKICAgICAgICAgICAgICAgICAgICB3ID0gMCwKICAgICAgICAgICAgICAgICAgICBfID0gMCwKICAgICAgICAgICAgICAgICAgICBrID0gInt7IiwKICAgICAgICAgICAgICAgICAgICBUID0gIn19IjsKICAgICAgICAgICAgICAgIGZvciAobyAmJiAobyA9IG8uc3BsaXQoIiAiKSwgayA9IG9bMF0sIFQgPSBvWzFdKSwgdyA9IDA7IGwgPiB3OyB3KyspIGcgPT0gZiA/IHIoaywgaSwgdykgPyAoLS13LCBhKCksIGcgPSBwKSA6ICJcbiIgPT0gaS5jaGFyQXQodykgPyB1KHgpIDogbSArPSBpLmNoYXJBdCh3KSA6IGcgPT0gcCA/ICh3ICs9IGsubGVuZ3RoIC0gMSwgeSA9IHQudGFnc1tpLmNoYXJBdCh3ICsgMSldLCB2ID0geSA/IGkuY2hhckF0KHcgKyAxKSA6ICJfdiIsICI9IiA9PSB2ID8gKHcgPSBjKGksIHcpLCBnID0gZikgOiAoeSAmJiB3KyssIGcgPSBoKSwgeCA9IHcpIDogcihULCBpLCB3KSA/IChiLnB1c2goewogICAgICAgICAgICAgICAgICAgIHRhZzogdiwKICAgICAgICAgICAgICAgICAgICBuOiBuKG0pLAogICAgICAgICAgICAgICAgICAgIG90YWc6IGssCiAgICAgICAgICAgICAgICAgICAgY3RhZzogVCwKICAgICAgICAgICAgICAgICAgICBpOiAiLyIgPT0gdiA/IHggLSBrLmxlbmd0aCA6IHcgKyBULmxlbmd0aAogICAgICAgICAgICAgICAgfSksIG0gPSAiIiwgdyArPSBULmxlbmd0aCAtIDEsIGcgPSBmLCAieyIgPT0gdiAmJiAoIn19IiA9PSBUID8gdysrIDogZShiW2IubGVuZ3RoIC0gMV0pKSkgOiBtICs9IGkuY2hhckF0KHcpOwogICAgICAgICAgICAgICAgcmV0dXJuIHUoeCwgITApLCBiCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciB3ID0gewogICAgICAgICAgICAgICAgX3Q6ICEwLAogICAgICAgICAgICAgICAgIlxuIjogITAsCiAgICAgICAgICAgICAgICAkOiAhMCwKICAgICAgICAgICAgICAgICIvIjogITAKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdC5zdHJpbmdpZnkgPSBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIntjb2RlOiBmdW5jdGlvbiAoYyxwLGkpIHsgIiArIHQud3JhcE1haW4oZS5jb2RlKSArICIgfSwiICsgdShlKSArICJ9IgogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgXyA9IDA7CiAgICAgICAgICAgIHQuZ2VuZXJhdGUgPSBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICBfID0gMDsKICAgICAgICAgICAgICAgIHZhciBpID0gewogICAgICAgICAgICAgICAgICAgIGNvZGU6ICIiLAogICAgICAgICAgICAgICAgICAgIHN1YnM6IHt9LAogICAgICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7fQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHJldHVybiB0LndhbGsoZSwgaSksIHIuYXNTdHJpbmcgPyB0aGlzLnN0cmluZ2lmeShpLCBuLCByKSA6IHRoaXMubWFrZVRlbXBsYXRlKGksIG4sIHIpCiAgICAgICAgICAgIH0sIHQud3JhcE1haW4gPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ3ZhciB0PXRoaXM7dC5iKGk9aXx8IiIpOycgKyB0ICsgInJldHVybiB0LmZsKCk7IgogICAgICAgICAgICB9LCB0LnRlbXBsYXRlID0gdC5UZW1wbGF0ZSwgdC5tYWtlVGVtcGxhdGUgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMubWFrZVBhcnRpYWxzKHQpOwogICAgICAgICAgICAgICAgcmV0dXJuIHIuY29kZSA9IG5ldyBGdW5jdGlvbigiYyIsICJwIiwgImkiLCB0aGlzLndyYXBNYWluKHQuY29kZSkpLCBuZXcgdGhpcy50ZW1wbGF0ZShyLCBlLCB0aGlzLCBuKQogICAgICAgICAgICB9LCB0Lm1ha2VQYXJ0aWFscyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHZhciBlLCBuID0gewogICAgICAgICAgICAgICAgICAgIHN1YnM6IHt9LAogICAgICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB0LnBhcnRpYWxzLAogICAgICAgICAgICAgICAgICAgIG5hbWU6IHQubmFtZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGZvciAoZSBpbiBuLnBhcnRpYWxzKSBuLnBhcnRpYWxzW2VdID0gdGhpcy5tYWtlUGFydGlhbHMobi5wYXJ0aWFsc1tlXSk7CiAgICAgICAgICAgICAgICBmb3IgKGUgaW4gdC5zdWJzKSBuLnN1YnNbZV0gPSBuZXcgRnVuY3Rpb24oImMiLCAicCIsICJ0IiwgImkiLCB0LnN1YnNbZV0pOwogICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgfSwgdC5jb2RlZ2VuID0gewogICAgICAgICAgICAgICAgIiMiOiBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgbi5jb2RlICs9ICJpZih0LnModC4iICsgbChlLm4pICsgJygiJyArIGMoZS5uKSArICciLGMscCwxKSxjLHAsMCwnICsgZS5pICsgIiwiICsgZS5lbmQgKyAnLCInICsgZS5vdGFnICsgIiAiICsgZS5jdGFnICsgJyIpKXt0LnJzKGMscCxmdW5jdGlvbihjLHAsdCl7JywgdC53YWxrKGUubm9kZXMsIG4pLCBuLmNvZGUgKz0gIn0pO2MucG9wKCk7fSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiXiI6IGZ1bmN0aW9uKGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICBuLmNvZGUgKz0gImlmKCF0LnModC4iICsgbChlLm4pICsgJygiJyArIGMoZS5uKSArICciLGMscCwxKSxjLHAsMSwwLDAsIiIpKXsnLCB0LndhbGsoZS5ub2RlcywgbiksIG4uY29kZSArPSAifTsiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIj4iOiBmLAogICAgICAgICAgICAgICAgIjwiOiBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpYWxzOiB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgY29kZTogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnM6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICBpblBhcnRpYWw6ICEwCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB0LndhbGsoZS5ub2Rlcywgcik7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuLnBhcnRpYWxzW2YoZSwgbildOwogICAgICAgICAgICAgICAgICAgIGkuc3VicyA9IHIuc3VicywgaS5wYXJ0aWFscyA9IHIucGFydGlhbHMKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAkOiBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnM6IHt9LAogICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiAiIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGFydGlhbHM6IG4ucGFydGlhbHMsCiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeDogZS5uCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB0LndhbGsoZS5ub2RlcywgciksIG4uc3Vic1tlLm5dID0gci5jb2RlLCBuLmluUGFydGlhbCB8fCAobi5jb2RlICs9ICd0LnN1YigiJyArIGMoZS5uKSArICciLGMscCxpKTsnKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJcbiI6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBlLmNvZGUgKz0gaCgnIlxcbiInICsgKHQubGFzdCA/ICIiIDogIiArIGkiKSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfdjogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIGUuY29kZSArPSAidC5iKHQudih0LiIgKyBsKHQubikgKyAnKCInICsgYyh0Lm4pICsgJyIsYyxwLDApKSk7JwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF90OiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5jb2RlICs9IGgoJyInICsgYyh0LnRleHQpICsgJyInKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJ7IjogcCwKICAgICAgICAgICAgICAgICImIjogcAogICAgICAgICAgICB9LCB0LndhbGsgPSBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByLCBpID0gMCwgbyA9IGUubGVuZ3RoOyBvID4gaTsgaSsrKSByID0gdC5jb2RlZ2VuW2VbaV0udGFnXSwgciAmJiByKGVbaV0sIG4pOwogICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgfSwgdC5wYXJzZSA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHJldHVybiBuID0gbiB8fCB7fSwgaSh0LCAiIiwgW10sIG4uc2VjdGlvblRhZ3MgfHwgW10pCiAgICAgICAgICAgIH0sIHQuY2FjaGUgPSB7fSwgdC5jYWNoZUtleSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbdCwgISFlLmFzU3RyaW5nLCAhIWUuZGlzYWJsZUxhbWJkYSwgZS5kZWxpbWl0ZXJzLCAhIWUubW9kZWxHZXRdLmpvaW4oInx8IikKICAgICAgICAgICAgfSwgdC5jb21waWxlID0gZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgbiA9IG4gfHwge307CiAgICAgICAgICAgICAgICB2YXIgciA9IHQuY2FjaGVLZXkoZSwgbiksCiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuY2FjaGVbcl07CiAgICAgICAgICAgICAgICBpZiAoaSkgewogICAgICAgICAgICAgICAgICAgIHZhciBvID0gaS5wYXJ0aWFsczsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhIGluIG8pIGRlbGV0ZSBvW2FdLmluc3RhbmNlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gaSA9IHRoaXMuZ2VuZXJhdGUodGhpcy5wYXJzZSh0aGlzLnNjYW4oZSwgbi5kZWxpbWl0ZXJzKSwgZSwgbiksIGUsIG4pLCB0aGlzLmNhY2hlW3JdID0gaQogICAgICAgICAgICB9CiAgICAgICAgfSgidW5kZWZpbmVkIiAhPSB0eXBlb2YgbiA/IG4gOiBIb2dhbikKICAgIH0sIHt9XSwKICAgIDEzOiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgIHZhciByID0gdCgiLi9jb21waWxlciIpOwogICAgICAgIHIuVGVtcGxhdGUgPSB0KCIuL3RlbXBsYXRlIikuVGVtcGxhdGUsIHIudGVtcGxhdGUgPSByLlRlbXBsYXRlLCBlLmV4cG9ydHMgPSByCiAgICB9LCB7CiAgICAgICAgIi4vY29tcGlsZXIiOiAxMiwKICAgICAgICAiLi90ZW1wbGF0ZSI6IDE0CiAgICB9XSwKICAgIDE0OiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgIHZhciByID0ge307CiAgICAgICAgISBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHI7CiAgICAgICAgICAgICAgICByZXR1cm4gZSAmJiAib2JqZWN0IiA9PSB0eXBlb2YgZSAmJiAodm9pZCAwICE9PSBlW3RdID8gciA9IGVbdF0gOiBuICYmIGUuZ2V0ICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUuZ2V0ICYmIChyID0gZS5nZXQodCkpKSwgcgogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBuKHQsIGUsIG4sIHIsIGksIG8pIHsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7fQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHMoKSB7fQogICAgICAgICAgICAgICAgYS5wcm90b3R5cGUgPSB0LCBzLnByb3RvdHlwZSA9IHQuc3ViczsKICAgICAgICAgICAgICAgIHZhciB1LCBjID0gbmV3IGE7CiAgICAgICAgICAgICAgICBjLnN1YnMgPSBuZXcgcywgYy5zdWJzVGV4dCA9IHt9LCBjLmJ1ZiA9ICIiLCByID0gciB8fCB7fSwgYy5zdGFja1N1YnMgPSByLCBjLnN1YnNUZXh0ID0gbzsKICAgICAgICAgICAgICAgIGZvciAodSBpbiBlKSByW3VdIHx8IChyW3VdID0gZVt1XSk7CiAgICAgICAgICAgICAgICBmb3IgKHUgaW4gcikgYy5zdWJzW3VdID0gclt1XTsKICAgICAgICAgICAgICAgIGkgPSBpIHx8IHt9LCBjLnN0YWNrUGFydGlhbHMgPSBpOwogICAgICAgICAgICAgICAgZm9yICh1IGluIG4pIGlbdV0gfHwgKGlbdV0gPSBuW3VdKTsKICAgICAgICAgICAgICAgIGZvciAodSBpbiBpKSBjLnBhcnRpYWxzW3VdID0gaVt1XTsKICAgICAgICAgICAgICAgIHJldHVybiBjCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHIodCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhudWxsID09PSB0IHx8IHZvaWQgMCA9PT0gdCA/ICIiIDogdCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gaSh0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHIodCksIGwudGVzdCh0KSA/IHQucmVwbGFjZShvLCAiJmFtcDsiKS5yZXBsYWNlKGEsICImbHQ7IikucmVwbGFjZShzLCAiJmd0OyIpLnJlcGxhY2UodSwgIiYjMzk7IikucmVwbGFjZShjLCAiJnF1b3Q7IikgOiB0CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdC5UZW1wbGF0ZSA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIHQgPSB0IHx8IHt9LCB0aGlzLnIgPSB0LmNvZGUgfHwgdGhpcy5yLCB0aGlzLmMgPSBuLCB0aGlzLm9wdGlvbnMgPSByIHx8IHt9LCB0aGlzLnRleHQgPSBlIHx8ICIiLCB0aGlzLnBhcnRpYWxzID0gdC5wYXJ0aWFscyB8fCB7fSwgdGhpcy5zdWJzID0gdC5zdWJzIHx8IHt9LCB0aGlzLmJ1ZiA9ICIiCiAgICAgICAgICAgIH0sIHQuVGVtcGxhdGUucHJvdG90eXBlID0gewogICAgICAgICAgICAgICAgcjogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHY6IGksCiAgICAgICAgICAgICAgICB0OiByLAogICAgICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmkoW3RdLCBlIHx8IHt9LCBuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJpOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucih0LCBlLCBuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVwOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLnBhcnRpYWxzW3RdLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gZVtyLm5hbWVdOwogICAgICAgICAgICAgICAgICAgIGlmIChyLmluc3RhbmNlICYmIHIuYmFzZSA9PSBpKSByZXR1cm4gci5pbnN0YW5jZTsKICAgICAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmMpIHRocm93IG5ldyBFcnJvcigiTm8gY29tcGlsZXIgYXZhaWxhYmxlLiIpOwogICAgICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5jLmNvbXBpbGUoaSwgdGhpcy5vcHRpb25zKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcnRpYWxzW3RdLmJhc2UgPSBpLCByLnN1YnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZS5zdGFja1RleHQgfHwgKGUuc3RhY2tUZXh0ID0ge30pOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiByLnN1YnMpIGUuc3RhY2tUZXh0W2tleV0gfHwgKGUuc3RhY2tUZXh0W2tleV0gPSB2b2lkIDAgIT09IHRoaXMuYWN0aXZlU3ViICYmIGUuc3RhY2tUZXh0W3RoaXMuYWN0aXZlU3ViXSA/IGUuc3RhY2tUZXh0W3RoaXMuYWN0aXZlU3ViXSA6IHRoaXMudGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBuKGksIHIuc3Vicywgci5wYXJ0aWFscywgdGhpcy5zdGFja1N1YnMsIHRoaXMuc3RhY2tQYXJ0aWFscywgZS5zdGFja1RleHQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnRpYWxzW3RdLmluc3RhbmNlID0gaSwgaQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJwOiBmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmVwKHQsIG4pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBpID8gaS5yaShlLCBuLCByKSA6ICIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcnM6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRbdC5sZW5ndGggLSAxXTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWYocikpIHJldHVybiB2b2lkIG4odCwgZSwgdGhpcyk7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSB0LnB1c2gocltpXSksIG4odCwgZSwgdGhpcyksIHQucG9wKCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzOiBmdW5jdGlvbih0LCBlLCBuLCByLCBpLCBvLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkgJiYgMCA9PT0gdC5sZW5ndGggPyAhMSA6ICgiZnVuY3Rpb24iID09IHR5cGVvZiB0ICYmICh0ID0gdGhpcy5tcyh0LCBlLCBuLCByLCBpLCBvLCBhKSksIHMgPSAhIXQsICFyICYmIHMgJiYgZSAmJiBlLnB1c2goIm9iamVjdCIgPT0gdHlwZW9mIHQgPyB0IDogZVtlLmxlbmd0aCAtIDFdKSwgcykKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkOiBmdW5jdGlvbih0LCBuLCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG8sIGEgPSB0LnNwbGl0KCIuIiksCiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0aGlzLmYoYVswXSwgbiwgciwgaSksCiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSB0aGlzLm9wdGlvbnMubW9kZWxHZXQsCiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBudWxsOwogICAgICAgICAgICAgICAgICAgIGlmICgiLiIgPT09IHQgJiYgZihuW24ubGVuZ3RoIC0gMl0pKSBzID0gbltuLmxlbmd0aCAtIDFdOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IDE7IGwgPCBhLmxlbmd0aDsgbCsrKSBvID0gZShhW2xdLCBzLCB1KSwgdm9pZCAwICE9PSBvID8gKGMgPSBzLCBzID0gbykgOiBzID0gIiI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgIXMgPyAhMSA6IChpIHx8ICJmdW5jdGlvbiIgIT0gdHlwZW9mIHMgfHwgKG4ucHVzaChjKSwgcyA9IHRoaXMubXYocywgbiwgciksIG4ucG9wKCkpLCBzKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGY6IGZ1bmN0aW9uKHQsIG4sIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gITEsIGEgPSBudWxsLCBzID0gITEsIHUgPSB0aGlzLm9wdGlvbnMubW9kZWxHZXQsIGMgPSBuLmxlbmd0aCAtIDE7IGMgPj0gMDsgYy0tKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA9IG5bY10sIG8gPSBlKHQsIGEsIHUpLCB2b2lkIDAgIT09IG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyA/IChpIHx8ICJmdW5jdGlvbiIgIT0gdHlwZW9mIG8gfHwgKG8gPSB0aGlzLm12KG8sIG4sIHIpKSwgbykgOiBpID8gITEgOiAiIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxzOiBmdW5jdGlvbih0LCBlLCBuLCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLm9wdGlvbnMuZGVsaW1pdGVyczsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmRlbGltaXRlcnMgPSBvLCB0aGlzLmIodGhpcy5jdChyKHQuY2FsbChlLCBpKSksIGUsIG4pKSwgdGhpcy5vcHRpb25zLmRlbGltaXRlcnMgPSBhLCAhMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGN0OiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kaXNhYmxlTGFtYmRhKSB0aHJvdyBuZXcgRXJyb3IoIkxhbWJkYSBmZWF0dXJlcyBkaXNhYmxlZC4iKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jLmNvbXBpbGUodCwgdGhpcy5vcHRpb25zKS5yZW5kZXIoZSwgbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBiOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWYgKz0gdAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZsOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMuYnVmOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1ZiA9ICIiLCB0CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbXM6IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGksIG8sIGEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcywgdSA9IGVbZS5sZW5ndGggLSAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHQuY2FsbCh1KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PSB0eXBlb2YgYyA/IHIgPyAhMCA6IChzID0gdGhpcy5hY3RpdmVTdWIgJiYgdGhpcy5zdWJzVGV4dCAmJiB0aGlzLnN1YnNUZXh0W3RoaXMuYWN0aXZlU3ViXSA/IHRoaXMuc3Vic1RleHRbdGhpcy5hY3RpdmVTdWJdIDogdGhpcy50ZXh0LCB0aGlzLmxzKGMsIHUsIG4sIHMuc3Vic3RyaW5nKGksIG8pLCBhKSkgOiBjCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbXY6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGVbZS5sZW5ndGggLSAxXSwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHQuY2FsbChpKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PSB0eXBlb2YgbyA/IHRoaXMuY3QocihvLmNhbGwoaSkpLCBpLCBuKSA6IG8KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWI6IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuc3Vic1t0XTsKICAgICAgICAgICAgICAgICAgICBpICYmICh0aGlzLmFjdGl2ZVN1YiA9IHQsIGkoZSwgbiwgdGhpcywgciksIHRoaXMuYWN0aXZlU3ViID0gITEpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciBvID0gLyYvZywKICAgICAgICAgICAgICAgIGEgPSAvPC9nLAogICAgICAgICAgICAgICAgcyA9IC8+L2csCiAgICAgICAgICAgICAgICB1ID0gL1wnL2csCiAgICAgICAgICAgICAgICBjID0gL1wiL2csCiAgICAgICAgICAgICAgICBsID0gL1smPD5cIlwnXS8sCiAgICAgICAgICAgICAgICBmID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJbb2JqZWN0IEFycmF5XSIgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KQogICAgICAgICAgICAgICAgfQogICAgICAgIH0oInVuZGVmaW5lZCIgIT0gdHlwZW9mIG4gPyBuIDogcikKICAgIH0sIHt9XSwKICAgIDE1OiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICEgZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAib2JqZWN0IiA9PSB0eXBlb2YgZSAmJiAib2JqZWN0IiA9PSB0eXBlb2YgZS5leHBvcnRzID8gZS5leHBvcnRzID0gdC5kb2N1bWVudCA/IG4odCwgITApIDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgaWYgKCF0LmRvY3VtZW50KSB0aHJvdyBuZXcgRXJyb3IoImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnQiKTsKICAgICAgICAgICAgICAgIHJldHVybiBuKHQpCiAgICAgICAgICAgIH0gOiBuKHQpCiAgICAgICAgfSgidW5kZWZpbmVkIiAhPSB0eXBlb2Ygd2luZG93ID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICBmdW5jdGlvbiBuKHQpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gImxlbmd0aCIgaW4gdCAmJiB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBuID0gWi50eXBlKHQpOwogICAgICAgICAgICAgICAgcmV0dXJuICJmdW5jdGlvbiIgPT09IG4gfHwgWi5pc1dpbmRvdyh0KSA/ICExIDogMSA9PT0gdC5ub2RlVHlwZSAmJiBlID8gITAgOiAiYXJyYXkiID09PSBuIHx8IDAgPT09IGUgfHwgIm51bWJlciIgPT0gdHlwZW9mIGUgJiYgZSA+IDAgJiYgZSAtIDEgaW4gdAogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiByKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIGlmIChaLmlzRnVuY3Rpb24oZSkpIHJldHVybiBaLmdyZXAodCwgZnVuY3Rpb24odCwgcikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIWUuY2FsbCh0LCByLCB0KSAhPT0gbgogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoZS5ub2RlVHlwZSkgcmV0dXJuIFouZ3JlcCh0LCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IGUgIT09IG4KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiBlKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0LnRlc3QoZSkpIHJldHVybiBaLmZpbHRlcihlLCB0LCBuKTsKICAgICAgICAgICAgICAgICAgICBlID0gWi5maWx0ZXIoZSwgdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiBaLmdyZXAodCwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBWLmNhbGwoZSwgdCkgPj0gMCAhPT0gbgogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gaSh0LCBlKSB7CiAgICAgICAgICAgICAgICBmb3IgKDsKICAgICAgICAgICAgICAgICAgICAodCA9IHRbZV0pICYmIDEgIT09IHQubm9kZVR5cGU7KTsKICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG8odCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBkdFt0XSA9IHt9OwogICAgICAgICAgICAgICAgcmV0dXJuIFouZWFjaCh0Lm1hdGNoKGh0KSB8fCBbXSwgZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAgICAgICAgIGVbbl0gPSAhMAogICAgICAgICAgICAgICAgfSksIGUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYSgpIHsKICAgICAgICAgICAgICAgIFEucmVtb3ZlRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGEsICExKSwgdC5yZW1vdmVFdmVudExpc3RlbmVyKCJsb2FkIiwgYSwgITEpLCBaLnJlYWR5KCkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gcygpIHsKICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmNhY2hlID0ge30sIDAsIHsKICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge30KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwgdGhpcy5leHBhbmRvID0gWi5leHBhbmRvICsgcy51aWQrKwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiB1KHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbiAmJiAxID09PSB0Lm5vZGVUeXBlKQogICAgICAgICAgICAgICAgICAgIGlmIChyID0gImRhdGEtIiArIGUucmVwbGFjZSh4dCwgIi0kMSIpLnRvTG93ZXJDYXNlKCksIG4gPSB0LmdldEF0dHJpYnV0ZShyKSwgInN0cmluZyIgPT0gdHlwZW9mIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAidHJ1ZSIgPT09IG4gPyAhMCA6ICJmYWxzZSIgPT09IG4gPyAhMSA6ICJudWxsIiA9PT0gbiA/IG51bGwgOiArbiArICIiID09PSBuID8gK24gOiBidC50ZXN0KG4pID8gWi5wYXJzZUpTT04obikgOiBuCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGkpIHt9CiAgICAgICAgICAgICAgICAgICAgICAgIG10LnNldCh0LCBlLCBuKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuID0gdm9pZCAwOwogICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYygpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBsKCkgewogICAgICAgICAgICAgICAgcmV0dXJuICExCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGYoKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBRLmFjdGl2ZUVsZW1lbnQKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHt9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHAodCwgZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIFoubm9kZU5hbWUodCwgInRhYmxlIikgJiYgWi5ub2RlTmFtZSgxMSAhPT0gZS5ub2RlVHlwZSA/IGUgOiBlLmZpcnN0Q2hpbGQsICJ0ciIpID8gdC5nZXRFbGVtZW50c0J5VGFnTmFtZSgidGJvZHkiKVswXSB8fCB0LmFwcGVuZENoaWxkKHQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KCJ0Ym9keSIpKSA6IHQKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gaCh0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdC50eXBlID0gKG51bGwgIT09IHQuZ2V0QXR0cmlidXRlKCJ0eXBlIikpICsgIi8iICsgdC50eXBlLCB0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGQodCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSBQdC5leGVjKHQudHlwZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gZSA/IHQudHlwZSA9IGVbMV0gOiB0LnJlbW92ZUF0dHJpYnV0ZSgidHlwZSIpLCB0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGcodCwgZSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSB0Lmxlbmd0aDsgciA+IG47IG4rKykgeXQuc2V0KHRbbl0sICJnbG9iYWxFdmFsIiwgIWUgfHwgeXQuZ2V0KGVbbl0sICJnbG9iYWxFdmFsIikpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHYodCwgZSkgewogICAgICAgICAgICAgICAgdmFyIG4sIHIsIGksIG8sIGEsIHMsIHUsIGM7CiAgICAgICAgICAgICAgICBpZiAoMSA9PT0gZS5ub2RlVHlwZSkgewogICAgICAgICAgICAgICAgICAgIGlmICh5dC5oYXNEYXRhKHQpICYmIChvID0geXQuYWNjZXNzKHQpLCBhID0geXQuc2V0KGUsIG8pLCBjID0gby5ldmVudHMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBhLmhhbmRsZSwgYS5ldmVudHMgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIGMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gPSAwLCByID0gY1tpXS5sZW5ndGg7IHIgPiBuOyBuKyspIFouZXZlbnQuYWRkKGUsIGksIGNbaV1bbl0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIG10Lmhhc0RhdGEodCkgJiYgKHMgPSBtdC5hY2Nlc3ModCksIHUgPSBaLmV4dGVuZCh7fSwgcyksIG10LnNldChlLCB1KSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24geSh0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPyB0LmdldEVsZW1lbnRzQnlUYWdOYW1lKGUgfHwgIioiKSA6IHQucXVlcnlTZWxlY3RvckFsbCA/IHQucXVlcnlTZWxlY3RvckFsbChlIHx8ICIqIikgOiBbXTsKICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGUgfHwgZSAmJiBaLm5vZGVOYW1lKHQsIGUpID8gWi5tZXJnZShbdF0sIG4pIDogbgogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBtKHQsIGUpIHsKICAgICAgICAgICAgICAgIHZhciBuID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgImlucHV0IiA9PT0gbiAmJiBUdC50ZXN0KHQudHlwZSkgPyBlLmNoZWNrZWQgPSB0LmNoZWNrZWQgOiAoImlucHV0IiA9PT0gbiB8fCAidGV4dGFyZWEiID09PSBuKSAmJiAoZS5kZWZhdWx0VmFsdWUgPSB0LmRlZmF1bHRWYWx1ZSkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYihlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgciwgaSA9IFoobi5jcmVhdGVFbGVtZW50KGUpKS5hcHBlbmRUbyhuLmJvZHkpLAogICAgICAgICAgICAgICAgICAgIG8gPSB0LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmIChyID0gdC5nZXREZWZhdWx0Q29tcHV0ZWRTdHlsZShpWzBdKSkgPyByLmRpc3BsYXkgOiBaLmNzcyhpWzBdLCAiZGlzcGxheSIpOwogICAgICAgICAgICAgICAgcmV0dXJuIGkuZGV0YWNoKCksIG8KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24geCh0KSB7CiAgICAgICAgICAgICAgICB2YXIgZSA9IFEsCiAgICAgICAgICAgICAgICAgICAgbiA9IE10W3RdOwogICAgICAgICAgICAgICAgcmV0dXJuIG4gfHwgKG4gPSBiKHQsIGUpLCAibm9uZSIgIT09IG4gJiYgbiB8fCAoSHQgPSAoSHQgfHwgWigiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPiIpKS5hcHBlbmRUbyhlLmRvY3VtZW50RWxlbWVudCksIGUgPSBIdFswXS5jb250ZW50RG9jdW1lbnQsIGUud3JpdGUoKSwgZS5jbG9zZSgpLCBuID0gYih0LCBlKSwgSHQuZGV0YWNoKCkpLCBNdFt0XSA9IG4pLCBuCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHcodCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIGEsIHMgPSB0LnN0eWxlOwogICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBuIHx8IFV0KHQpLCBuICYmIChhID0gbi5nZXRQcm9wZXJ0eVZhbHVlKGUpIHx8IG5bZV0pLCBuICYmICgiIiAhPT0gYSB8fCBaLmNvbnRhaW5zKHQub3duZXJEb2N1bWVudCwgdCkgfHwgKGEgPSBaLnN0eWxlKHQsIGUpKSwgQnQudGVzdChhKSAmJiBGdC50ZXN0KGUpICYmIChyID0gcy53aWR0aCwgaSA9IHMubWluV2lkdGgsIG8gPSBzLm1heFdpZHRoLCBzLm1pbldpZHRoID0gcy5tYXhXaWR0aCA9IHMud2lkdGggPSBhLCBhID0gbi53aWR0aCwgcy53aWR0aCA9IHIsIHMubWluV2lkdGggPSBpLCBzLm1heFdpZHRoID0gbykpLCB2b2lkIDAgIT09IGEgPyBhICsgIiIgOiBhCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIF8odCwgZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCgpID8gdm9pZCBkZWxldGUgdGhpcy5nZXQgOiAodGhpcy5nZXQgPSBlKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBrKHQsIGUpIHsKICAgICAgICAgICAgICAgIGlmIChlIGluIHQpIHJldHVybiBlOwogICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IGVbMF0udG9VcHBlckNhc2UoKSArIGUuc2xpY2UoMSksIHIgPSBlLCBpID0gSnQubGVuZ3RoOyBpLS07KQogICAgICAgICAgICAgICAgICAgIGlmIChlID0gSnRbaV0gKyBuLCBlIGluIHQpIHJldHVybiBlOwogICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gVCh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IHp0LmV4ZWMoZSk7CiAgICAgICAgICAgICAgICByZXR1cm4gciA/IE1hdGgubWF4KDAsIHJbMV0gLSAobiB8fCAwKSkgKyAoclsyXSB8fCAicHgiKSA6IGUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gRSh0LCBlLCBuLCByLCBpKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gbiA9PT0gKHIgPyAiYm9yZGVyIiA6ICJjb250ZW50IikgPyA0IDogIndpZHRoIiA9PT0gZSA/IDEgOiAwLCBhID0gMDsgNCA+IG87IG8gKz0gMikgIm1hcmdpbiIgPT09IG4gJiYgKGEgKz0gWi5jc3ModCwgbiArIF90W29dLCAhMCwgaSkpLCByID8gKCJjb250ZW50IiA9PT0gbiAmJiAoYSAtPSBaLmNzcyh0LCAicGFkZGluZyIgKyBfdFtvXSwgITAsIGkpKSwgIm1hcmdpbiIgIT09IG4gJiYgKGEgLT0gWi5jc3ModCwgImJvcmRlciIgKyBfdFtvXSArICJXaWR0aCIsICEwLCBpKSkpIDogKGEgKz0gWi5jc3ModCwgInBhZGRpbmciICsgX3Rbb10sICEwLCBpKSwgInBhZGRpbmciICE9PSBuICYmIChhICs9IFouY3NzKHQsICJib3JkZXIiICsgX3Rbb10gKyAiV2lkdGgiLCAhMCwgaSkpKTsKICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGoodCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHIgPSAhMCwKICAgICAgICAgICAgICAgICAgICBpID0gIndpZHRoIiA9PT0gZSA/IHQub2Zmc2V0V2lkdGggOiB0Lm9mZnNldEhlaWdodCwKICAgICAgICAgICAgICAgICAgICBvID0gVXQodCksCiAgICAgICAgICAgICAgICAgICAgYSA9ICJib3JkZXItYm94IiA9PT0gWi5jc3ModCwgImJveFNpemluZyIsICExLCBvKTsKICAgICAgICAgICAgICAgIGlmICgwID49IGkgfHwgbnVsbCA9PSBpKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPSB3KHQsIGUsIG8pLCAoMCA+IGkgfHwgbnVsbCA9PSBpKSAmJiAoaSA9IHQuc3R5bGVbZV0pLCBCdC50ZXN0KGkpKSByZXR1cm4gaTsKICAgICAgICAgICAgICAgICAgICByID0gYSAmJiAoWS5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGkgPT09IHQuc3R5bGVbZV0pLCBpID0gcGFyc2VGbG9hdChpKSB8fCAwCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gaSArIEUodCwgZSwgbiB8fCAoYSA/ICJib3JkZXIiIDogImNvbnRlbnQiKSwgciwgbykgKyAicHgiCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIEModCwgZSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgbiwgciwgaSwgbyA9IFtdLCBhID0gMCwgcyA9IHQubGVuZ3RoOyBzID4gYTsgYSsrKSByID0gdFthXSwgci5zdHlsZSAmJiAob1thXSA9IHl0LmdldChyLCAib2xkZGlzcGxheSIpLCBuID0gci5zdHlsZS5kaXNwbGF5LCBlID8gKG9bYV0gfHwgIm5vbmUiICE9PSBuIHx8IChyLnN0eWxlLmRpc3BsYXkgPSAiIiksICIiID09PSByLnN0eWxlLmRpc3BsYXkgJiYga3QocikgJiYgKG9bYV0gPSB5dC5hY2Nlc3MociwgIm9sZGRpc3BsYXkiLCB4KHIubm9kZU5hbWUpKSkpIDogKGkgPSBrdChyKSwgIm5vbmUiID09PSBuICYmIGkgfHwgeXQuc2V0KHIsICJvbGRkaXNwbGF5IiwgaSA/IG4gOiBaLmNzcyhyLCAiZGlzcGxheSIpKSkpOwogICAgICAgICAgICAgICAgZm9yIChhID0gMDsgcyA+IGE7IGErKykgciA9IHRbYV0sIHIuc3R5bGUgJiYgKGUgJiYgIm5vbmUiICE9PSByLnN0eWxlLmRpc3BsYXkgJiYgIiIgIT09IHIuc3R5bGUuZGlzcGxheSB8fCAoci5zdHlsZS5kaXNwbGF5ID0gZSA/IG9bYV0gfHwgIiIgOiAibm9uZSIpKTsKICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIFModCwgZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTLnByb3RvdHlwZS5pbml0KHQsIGUsIG4sIHIsIGkpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIEEoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBZdCA9IHZvaWQgMAogICAgICAgICAgICAgICAgfSksIFl0ID0gWi5ub3coKQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBOKHQsIGUpIHsKICAgICAgICAgICAgICAgIHZhciBuLCByID0gMCwKICAgICAgICAgICAgICAgICAgICBpID0gewogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHQKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZm9yIChlID0gZSA/IDEgOiAwOyA0ID4gcjsgciArPSAyIC0gZSkgbiA9IF90W3JdLCBpWyJtYXJnaW4iICsgbl0gPSBpWyJwYWRkaW5nIiArIG5dID0gdDsKICAgICAgICAgICAgICAgIHJldHVybiBlICYmIChpLm9wYWNpdHkgPSBpLndpZHRoID0gdCksIGkKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gUih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciByLCBpID0gKG5lW2VdIHx8IFtdKS5jb25jYXQobmVbIioiXSksIG8gPSAwLCBhID0gaS5sZW5ndGg7IGEgPiBvOyBvKyspCiAgICAgICAgICAgICAgICAgICAgaWYgKHIgPSBpW29dLmNhbGwobiwgZSwgdCkpIHJldHVybiByCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIEkodCwgZSwgbikgewogICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIGEsIHMsIHUsIGMsIGwsIGYgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgIHAgPSB7fSwKICAgICAgICAgICAgICAgICAgICBoID0gdC5zdHlsZSwKICAgICAgICAgICAgICAgICAgICBkID0gdC5ub2RlVHlwZSAmJiBrdCh0KSwKICAgICAgICAgICAgICAgICAgICBnID0geXQuZ2V0KHQsICJmeHNob3ciKTsKICAgICAgICAgICAgICAgIG4ucXVldWUgfHwgKHMgPSBaLl9xdWV1ZUhvb2tzKHQsICJmeCIpLCBudWxsID09IHMudW5xdWV1ZWQgJiYgKHMudW5xdWV1ZWQgPSAwLCB1ID0gcy5lbXB0eS5maXJlLCBzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBzLnVucXVldWVkIHx8IHUoKQogICAgICAgICAgICAgICAgfSksIHMudW5xdWV1ZWQrKywgZi5hbHdheXMoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgZi5hbHdheXMoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHMudW5xdWV1ZWQtLSwgWi5xdWV1ZSh0LCAiZngiKS5sZW5ndGggfHwgcy5lbXB0eS5maXJlKCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSkpLCAxID09PSB0Lm5vZGVUeXBlICYmICgiaGVpZ2h0IiBpbiBlIHx8ICJ3aWR0aCIgaW4gZSkgJiYgKG4ub3ZlcmZsb3cgPSBbaC5vdmVyZmxvdywgaC5vdmVyZmxvd1gsIGgub3ZlcmZsb3dZXSwgYyA9IFouY3NzKHQsICJkaXNwbGF5IiksIGwgPSAibm9uZSIgPT09IGMgPyB5dC5nZXQodCwgIm9sZGRpc3BsYXkiKSB8fCB4KHQubm9kZU5hbWUpIDogYywgImlubGluZSIgPT09IGwgJiYgIm5vbmUiID09PSBaLmNzcyh0LCAiZmxvYXQiKSAmJiAoaC5kaXNwbGF5ID0gImlubGluZS1ibG9jayIpKSwgbi5vdmVyZmxvdyAmJiAoaC5vdmVyZmxvdyA9ICJoaWRkZW4iLCBmLmFsd2F5cyhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBoLm92ZXJmbG93ID0gbi5vdmVyZmxvd1swXSwgaC5vdmVyZmxvd1ggPSBuLm92ZXJmbG93WzFdLCBoLm92ZXJmbG93WSA9IG4ub3ZlcmZsb3dbMl0KICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIGZvciAociBpbiBlKQogICAgICAgICAgICAgICAgICAgIGlmIChpID0gZVtyXSwgS3QuZXhlYyhpKSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVsZXRlIGVbcl0sIG8gPSBvIHx8ICJ0b2dnbGUiID09PSBpLCBpID09PSAoZCA/ICJoaWRlIiA6ICJzaG93IikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgic2hvdyIgIT09IGkgfHwgIWcgfHwgdm9pZCAwID09PSBnW3JdKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAhMAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHBbcl0gPSBnICYmIGdbcl0gfHwgWi5zdHlsZSh0LCByKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjID0gdm9pZCAwOwogICAgICAgICAgICAgICAgaWYgKFouaXNFbXB0eU9iamVjdChwKSkgImlubGluZSIgPT09ICgibm9uZSIgPT09IGMgPyB4KHQubm9kZU5hbWUpIDogYykgJiYgKGguZGlzcGxheSA9IGMpOwogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZyA/ICJoaWRkZW4iIGluIGcgJiYgKGQgPSBnLmhpZGRlbikgOiBnID0geXQuYWNjZXNzKHQsICJmeHNob3ciLCB7fSksIG8gJiYgKGcuaGlkZGVuID0gIWQpLCBkID8gWih0KS5zaG93KCkgOiBmLmRvbmUoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFoodCkuaGlkZSgpCiAgICAgICAgICAgICAgICAgICAgfSksIGYuZG9uZShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHl0LnJlbW92ZSh0LCAiZnhzaG93Iik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSBpbiBwKSBaLnN0eWxlKHQsIGUsIHBbZV0pCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgZm9yIChyIGluIHApIGEgPSBSKGQgPyBnW3JdIDogMCwgciwgZiksIHIgaW4gZyB8fCAoZ1tyXSA9IGEuc3RhcnQsIGQgJiYgKGEuZW5kID0gYS5zdGFydCwgYS5zdGFydCA9ICJ3aWR0aCIgPT09IHIgfHwgImhlaWdodCIgPT09IHIgPyAxIDogMCkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIE8odCwgZSkgewogICAgICAgICAgICAgICAgdmFyIG4sIHIsIGksIG8sIGE7CiAgICAgICAgICAgICAgICBmb3IgKG4gaW4gdCkKICAgICAgICAgICAgICAgICAgICBpZiAociA9IFouY2FtZWxDYXNlKG4pLCBpID0gZVtyXSwgbyA9IHRbbl0sIFouaXNBcnJheShvKSAmJiAoaSA9IG9bMV0sIG8gPSB0W25dID0gb1swXSksIG4gIT09IHIgJiYgKHRbcl0gPSBvLCBkZWxldGUgdFtuXSksIGEgPSBaLmNzc0hvb2tzW3JdLCBhICYmICJleHBhbmQiIGluIGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGEuZXhwYW5kKG8pLCBkZWxldGUgdFtyXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChuIGluIG8pIG4gaW4gdCB8fCAodFtuXSA9IG9bbl0sIGVbbl0gPSBpKQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBlW3JdID0gaQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBMKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHZhciByLCBpLCBvID0gMCwKICAgICAgICAgICAgICAgICAgICBhID0gZWUubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgIHMgPSBaLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdS5lbGVtCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgdSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gWXQgfHwgQSgpLCBuID0gTWF0aC5tYXgoMCwgYy5zdGFydFRpbWUgKyBjLmR1cmF0aW9uIC0gZSksIHIgPSBuIC8gYy5kdXJhdGlvbiB8fCAwLCBvID0gMSAtIHIsIGEgPSAwLCB1ID0gYy50d2VlbnMubGVuZ3RoOyB1ID4gYTsgYSsrKSBjLnR3ZWVuc1thXS5ydW4obyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLm5vdGlmeVdpdGgodCwgW2MsIG8sIG5dKSwgMSA+IG8gJiYgdSA/IG4gOiAocy5yZXNvbHZlV2l0aCh0LCBbY10pLCAhMSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGMgPSBzLnByb21pc2UoewogICAgICAgICAgICAgICAgICAgICAgICBlbGVtOiB0LAogICAgICAgICAgICAgICAgICAgICAgICBwcm9wczogWi5leHRlbmQoe30sIGUpLAogICAgICAgICAgICAgICAgICAgICAgICBvcHRzOiBaLmV4dGVuZCghMCwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlY2lhbEVhc2luZzoge30KICAgICAgICAgICAgICAgICAgICAgICAgfSwgbiksCiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUHJvcGVydGllczogZSwKICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxPcHRpb25zOiBuLAogICAgICAgICAgICAgICAgICAgICAgICBzdGFydFRpbWU6IFl0IHx8IEEoKSwKICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IG4uZHVyYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgIHR3ZWVuczogW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IFouVHdlZW4odCwgYy5vcHRzLCBlLCBuLCBjLm9wdHMuc3BlY2lhbEVhc2luZ1tlXSB8fCBjLm9wdHMuZWFzaW5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLnR3ZWVucy5wdXNoKHIpLCByCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZSA/IGMudHdlZW5zLmxlbmd0aCA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAhMDsgciA+IG47IG4rKykgYy50d2VlbnNbbl0ucnVuKDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPyBzLnJlc29sdmVXaXRoKHQsIFtjLCBlXSkgOiBzLnJlamVjdFdpdGgodCwgW2MsIGVdKSwgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgbCA9IGMucHJvcHM7CiAgICAgICAgICAgICAgICBmb3IgKE8obCwgYy5vcHRzLnNwZWNpYWxFYXNpbmcpOyBhID4gbzsgbysrKQogICAgICAgICAgICAgICAgICAgIGlmIChyID0gZWVbb10uY2FsbChjLCB0LCBsLCBjLm9wdHMpKSByZXR1cm4gcjsKICAgICAgICAgICAgICAgIHJldHVybiBaLm1hcChsLCBSLCBjKSwgWi5pc0Z1bmN0aW9uKGMub3B0cy5zdGFydCkgJiYgYy5vcHRzLnN0YXJ0LmNhbGwodCwgYyksIFouZngudGltZXIoWi5leHRlbmQodSwgewogICAgICAgICAgICAgICAgICAgIGVsZW06IHQsCiAgICAgICAgICAgICAgICAgICAgYW5pbTogYywKICAgICAgICAgICAgICAgICAgICBxdWV1ZTogYy5vcHRzLnF1ZXVlCiAgICAgICAgICAgICAgICB9KSksIGMucHJvZ3Jlc3MoYy5vcHRzLnByb2dyZXNzKS5kb25lKGMub3B0cy5kb25lLCBjLm9wdHMuY29tcGxldGUpLmZhaWwoYy5vcHRzLmZhaWwpLmFsd2F5cyhjLm9wdHMuYWx3YXlzKQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBEKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgInN0cmluZyIgIT0gdHlwZW9mIGUgJiYgKG4gPSBlLCBlID0gIioiKTsKICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlLnRvTG93ZXJDYXNlKCkubWF0Y2goaHQpIHx8IFtdOwogICAgICAgICAgICAgICAgICAgIGlmIChaLmlzRnVuY3Rpb24obikpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByID0gb1tpKytdOykgIisiID09PSByWzBdID8gKHIgPSByLnNsaWNlKDEpIHx8ICIqIiwgKHRbcl0gPSB0W3JdIHx8IFtdKS51bnNoaWZ0KG4pKSA6ICh0W3JdID0gdFtyXSB8fCBbXSkucHVzaChuKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBQKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkocykgewogICAgICAgICAgICAgICAgICAgIHZhciB1OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBvW3NdID0gITAsIFouZWFjaCh0W3NdIHx8IFtdLCBmdW5jdGlvbih0LCBzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gcyhlLCBuLCByKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJzdHJpbmciICE9IHR5cGVvZiBjIHx8IGEgfHwgb1tjXSA/IGEgPyAhKHUgPSBjKSA6IHZvaWQgMCA6IChlLmRhdGFUeXBlcy51bnNoaWZ0KGMpLCBpKGMpLCAhMSkKICAgICAgICAgICAgICAgICAgICB9KSwgdQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIG8gPSB7fSwKICAgICAgICAgICAgICAgICAgICBhID0gdCA9PT0gYmU7CiAgICAgICAgICAgICAgICByZXR1cm4gaShlLmRhdGFUeXBlc1swXSkgfHwgIW9bIioiXSAmJiBpKCIqIikKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gJCh0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiwgciwgaSA9IFouYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9OwogICAgICAgICAgICAgICAgZm9yIChuIGluIGUpIHZvaWQgMCAhPT0gZVtuXSAmJiAoKGlbbl0gPyB0IDogciB8fCAociA9IHt9KSlbbl0gPSBlW25dKTsKICAgICAgICAgICAgICAgIHJldHVybiByICYmIFouZXh0ZW5kKCEwLCB0LCByKSwgdAogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBxKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIHIsIGksIG8sIGEsIHMgPSB0LmNvbnRlbnRzLCB1ID0gdC5kYXRhVHlwZXM7CiAgICAgICAgICAgICAgICAgICAgIioiID09PSB1WzBdOykgdS5zaGlmdCgpLCB2b2lkIDAgPT09IHIgJiYgKHIgPSB0Lm1pbWVUeXBlIHx8IGUuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtVHlwZSIpKTsKICAgICAgICAgICAgICAgIGlmIChyKQogICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiBzKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc1tpXSAmJiBzW2ldLnRlc3QocikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUudW5zaGlmdChpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh1WzBdIGluIG4pIG8gPSB1WzBdOwogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1WzBdIHx8IHQuY29udmVydGVyc1tpICsgIiAiICsgdVswXV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBhIHx8IChhID0gaSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgbyA9IG8gfHwgYQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG8gPyAobyAhPT0gdVswXSAmJiB1LnVuc2hpZnQobyksIG5bb10pIDogdm9pZCAwCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIEgodCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgdmFyIGksIG8sIGEsIHMsIHUsIGMgPSB7fSwKICAgICAgICAgICAgICAgICAgICBsID0gdC5kYXRhVHlwZXMuc2xpY2UoKTsKICAgICAgICAgICAgICAgIGlmIChsWzFdKQogICAgICAgICAgICAgICAgICAgIGZvciAoYSBpbiB0LmNvbnZlcnRlcnMpIGNbYS50b0xvd2VyQ2FzZSgpXSA9IHQuY29udmVydGVyc1thXTsKICAgICAgICAgICAgICAgIGZvciAobyA9IGwuc2hpZnQoKTsgbzspCiAgICAgICAgICAgICAgICAgICAgaWYgKHQucmVzcG9uc2VGaWVsZHNbb10gJiYgKG5bdC5yZXNwb25zZUZpZWxkc1tvXV0gPSBlKSwgIXUgJiYgciAmJiB0LmRhdGFGaWx0ZXIgJiYgKGUgPSB0LmRhdGFGaWx0ZXIoZSwgdC5kYXRhVHlwZSkpLCB1ID0gbywgbyA9IGwuc2hpZnQoKSkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCIqIiA9PT0gbykgbyA9IHU7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCIqIiAhPT0gdSAmJiB1ICE9PSBvKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPSBjW3UgKyAiICIgKyBvXSB8fCBjWyIqICIgKyBvXSwgIWEpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiBjKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPSBpLnNwbGl0KCIgIiksIHNbMV0gPT09IG8gJiYgKGEgPSBjW3UgKyAiICIgKyBzWzBdXSB8fCBjWyIqICIgKyBzWzBdXSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID09PSAhMCA/IGEgPSBjW2ldIDogY1tpXSAhPT0gITAgJiYgKG8gPSBzWzBdLCBsLnVuc2hpZnQoc1sxXSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgaWYgKGEgIT09ICEwKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSAmJiB0WyJ0aHJvd3MiXSkgZSA9IGEoZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBhKGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGYpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICJwYXJzZXJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGEgPyBmIDogIk5vIGNvbnZlcnNpb24gZnJvbSAiICsgdSArICIgdG8gIiArIG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICBzdGF0ZTogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IGUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gTSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICB2YXIgaTsKICAgICAgICAgICAgICAgIGlmIChaLmlzQXJyYXkoZSkpIFouZWFjaChlLCBmdW5jdGlvbihlLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgbiB8fCBUZS50ZXN0KHQpID8gcih0LCBpKSA6IE0odCArICJbIiArICgib2JqZWN0IiA9PSB0eXBlb2YgaSA/IGUgOiAiIikgKyAiXSIsIGksIG4sIHIpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKG4gfHwgIm9iamVjdCIgIT09IFoudHlwZShlKSkgcih0LCBlKTsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gZSkgTSh0ICsgIlsiICsgaSArICJdIiwgZVtpXSwgbiwgcikKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gRih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gWi5pc1dpbmRvdyh0KSA/IHQgOiA5ID09PSB0Lm5vZGVUeXBlICYmIHQuZGVmYXVsdFZpZXcKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgQiA9IFtdLAogICAgICAgICAgICAgICAgVSA9IEIuc2xpY2UsCiAgICAgICAgICAgICAgICBXID0gQi5jb25jYXQsCiAgICAgICAgICAgICAgICB6ID0gQi5wdXNoLAogICAgICAgICAgICAgICAgViA9IEIuaW5kZXhPZiwKICAgICAgICAgICAgICAgIEcgPSB7fSwKICAgICAgICAgICAgICAgIFggPSBHLnRvU3RyaW5nLAogICAgICAgICAgICAgICAgSiA9IEcuaGFzT3duUHJvcGVydHksCiAgICAgICAgICAgICAgICBZID0ge30sCiAgICAgICAgICAgICAgICBRID0gdC5kb2N1bWVudCwKICAgICAgICAgICAgICAgIEsgPSAiMi4xLjQiLAogICAgICAgICAgICAgICAgWiA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFouZm4uaW5pdCh0LCBlKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHR0ID0gL15bXHNcdUZFRkZceEEwXSt8W1xzXHVGRUZGXHhBMF0rJC9nLAogICAgICAgICAgICAgICAgZXQgPSAvXi1tcy0vLAogICAgICAgICAgICAgICAgbnQgPSAvLShbXGRhLXpdKS9naSwKICAgICAgICAgICAgICAgIHJ0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnRvVXBwZXJDYXNlKCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIFouZm4gPSBaLnByb3RvdHlwZSA9IHsKICAgICAgICAgICAgICAgIGpxdWVyeTogSywKICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yOiBaLAogICAgICAgICAgICAgICAgc2VsZWN0b3I6ICIiLAogICAgICAgICAgICAgICAgbGVuZ3RoOiAwLAogICAgICAgICAgICAgICAgdG9BcnJheTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFUuY2FsbCh0aGlzKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgPyAwID4gdCA/IHRoaXNbdCArIHRoaXMubGVuZ3RoXSA6IHRoaXNbdF0gOiBVLmNhbGwodGhpcykKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwdXNoU3RhY2s6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFoubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLCB0KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcmV2T2JqZWN0ID0gdGhpcywgZS5jb250ZXh0ID0gdGhpcy5jb250ZXh0LCBlCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZWFjaDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmVhY2godGhpcywgdCwgZSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBtYXA6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soWi5tYXAodGhpcywgZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKGUsIG4sIGUpCiAgICAgICAgICAgICAgICAgICAgfSkpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2xpY2U6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhVLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZmlyc3Q6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVxKDApCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbGFzdDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXEoLTEpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXE6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICBuID0gK3QgKyAoMCA+IHQgPyBlIDogMCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKG4gPj0gMCAmJiBlID4gbiA/IFt0aGlzW25dXSA6IFtdKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVuZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKG51bGwpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcHVzaDogeiwKICAgICAgICAgICAgICAgIHNvcnQ6IEIuc29ydCwKICAgICAgICAgICAgICAgIHNwbGljZTogQi5zcGxpY2UKICAgICAgICAgICAgfSwgWi5leHRlbmQgPSBaLmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHQsIGUsIG4sIHIsIGksIG8sIGEgPSBhcmd1bWVudHNbMF0gfHwge30sCiAgICAgICAgICAgICAgICAgICAgcyA9IDEsCiAgICAgICAgICAgICAgICAgICAgdSA9IGFyZ3VtZW50cy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgYyA9ICExOwogICAgICAgICAgICAgICAgZm9yICgiYm9vbGVhbiIgPT0gdHlwZW9mIGEgJiYgKGMgPSBhLCBhID0gYXJndW1lbnRzW3NdIHx8IHt9LCBzKyspLCAib2JqZWN0IiA9PSB0eXBlb2YgYSB8fCBaLmlzRnVuY3Rpb24oYSkgfHwgKGEgPSB7fSksIHMgPT09IHUgJiYgKGEgPSB0aGlzLCBzLS0pOyB1ID4gczsgcysrKQogICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9ICh0ID0gYXJndW1lbnRzW3NdKSkKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChlIGluIHQpIG4gPSBhW2VdLCByID0gdFtlXSwgYSAhPT0gciAmJiAoYyAmJiByICYmIChaLmlzUGxhaW5PYmplY3QocikgfHwgKGkgPSBaLmlzQXJyYXkocikpKSA/IChpID8gKGkgPSAhMSwgbyA9IG4gJiYgWi5pc0FycmF5KG4pID8gbiA6IFtdKSA6IG8gPSBuICYmIFouaXNQbGFpbk9iamVjdChuKSA/IG4gOiB7fSwgYVtlXSA9IFouZXh0ZW5kKGMsIG8sIHIpKSA6IHZvaWQgMCAhPT0gciAmJiAoYVtlXSA9IHIpKTsKICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgIH0sIFouZXh0ZW5kKHsKICAgICAgICAgICAgICAgIGV4cGFuZG86ICJqUXVlcnkiICsgKEsgKyBNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cRC9nLCAiIiksCiAgICAgICAgICAgICAgICBpc1JlYWR5OiAhMCwKICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbm9vcDogZnVuY3Rpb24oKSB7fSwKICAgICAgICAgICAgICAgIGlzRnVuY3Rpb246IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PT0gWi50eXBlKHQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaXNBcnJheTogQXJyYXkuaXNBcnJheSwKICAgICAgICAgICAgICAgIGlzV2luZG93OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgIT0gdCAmJiB0ID09PSB0LndpbmRvdwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGlzTnVtZXJpYzogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhWi5pc0FycmF5KHQpICYmIHQgLSBwYXJzZUZsb2F0KHQpICsgMSA+PSAwCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaXNQbGFpbk9iamVjdDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAib2JqZWN0IiAhPT0gWi50eXBlKHQpIHx8IHQubm9kZVR5cGUgfHwgWi5pc1dpbmRvdyh0KSA/ICExIDogdC5jb25zdHJ1Y3RvciAmJiAhSi5jYWxsKHQuY29uc3RydWN0b3IucHJvdG90eXBlLCAiaXNQcm90b3R5cGVPZiIpID8gITEgOiAhMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGUgaW4gdCkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHR5cGU6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gdCArICIiIDogIm9iamVjdCIgPT0gdHlwZW9mIHQgfHwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgdCA/IEdbWC5jYWxsKHQpXSB8fCAib2JqZWN0IiA6IHR5cGVvZiB0CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZ2xvYmFsRXZhbDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlLCBuID0gZXZhbDsKICAgICAgICAgICAgICAgICAgICB0ID0gWi50cmltKHQpLCB0ICYmICgxID09PSB0LmluZGV4T2YoInVzZSBzdHJpY3QiKSA/IChlID0gUS5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKSwgZS50ZXh0ID0gdCwgUS5oZWFkLmFwcGVuZENoaWxkKGUpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSkpIDogbih0KSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjYW1lbENhc2U6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5yZXBsYWNlKGV0LCAibXMtIikucmVwbGFjZShudCwgcnQpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbm9kZU5hbWU6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5ub2RlTmFtZSAmJiB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGUudG9Mb3dlckNhc2UoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGVhY2g6IGZ1bmN0aW9uKHQsIGUsIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwgbyA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IG4odCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgYSA+IG8gJiYgKGkgPSBlLmFwcGx5KHRbb10sIHIpLCBpICE9PSAhMSk7IG8rKyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyBpbiB0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID0gZS5hcHBseSh0W29dLCByKSwgaSA9PT0gITEpIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgYSA+IG8gJiYgKGkgPSBlLmNhbGwodFtvXSwgbywgdFtvXSksIGkgIT09ICExKTsgbysrKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyBpbiB0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPSBlLmNhbGwodFtvXSwgbywgdFtvXSksIGkgPT09ICExKSBicmVhazsgcmV0dXJuIHQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0cmltOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/ICIiIDogKHQgKyAiIikucmVwbGFjZSh0dCwgIiIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbWFrZUFycmF5OiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlIHx8IFtdOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgKG4oT2JqZWN0KHQpKSA/IFoubWVyZ2UociwgInN0cmluZyIgPT0gdHlwZW9mIHQgPyBbdF0gOiB0KSA6IHouY2FsbChyLCB0KSksIHIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpbkFycmF5OiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IC0xIDogVi5jYWxsKGUsIHQsIG4pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbWVyZ2U6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gK2UubGVuZ3RoLCByID0gMCwgaSA9IHQubGVuZ3RoOyBuID4gcjsgcisrKSB0W2krK10gPSBlW3JdOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lmxlbmd0aCA9IGksIHQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBncmVwOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciwgaSA9IFtdLCBvID0gMCwgYSA9IHQubGVuZ3RoLCBzID0gIW47IGEgPiBvOyBvKyspIHIgPSAhZSh0W29dLCBvKSwgciAhPT0gcyAmJiBpLnB1c2godFtvXSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBtYXA6IGZ1bmN0aW9uKHQsIGUsIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwgbyA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgcyA9IG4odCksCiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBbXTsKICAgICAgICAgICAgICAgICAgICBpZiAocykKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGEgPiBvOyBvKyspIGkgPSBlKHRbb10sIG8sIHIpLCBudWxsICE9IGkgJiYgdS5wdXNoKGkpOwogICAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvIGluIHQpIGkgPSBlKHRbb10sIG8sIHIpLCBudWxsICE9IGkgJiYgdS5wdXNoKGkpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBXLmFwcGx5KFtdLCB1KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGd1aWQ6IDEsCiAgICAgICAgICAgICAgICBwcm94eTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuLCByLCBpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAic3RyaW5nIiA9PSB0eXBlb2YgZSAmJiAobiA9IHRbZV0sIGUgPSB0LCB0ID0gbiksIFouaXNGdW5jdGlvbih0KSA/IChyID0gVS5jYWxsKGFyZ3VtZW50cywgMiksIGkgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkoZSB8fCB0aGlzLCByLmNvbmNhdChVLmNhbGwoYXJndW1lbnRzKSkpCiAgICAgICAgICAgICAgICAgICAgfSwgaS5ndWlkID0gdC5ndWlkID0gdC5ndWlkIHx8IFouZ3VpZCsrLCBpKSA6IHZvaWQgMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG5vdzogRGF0ZS5ub3csCiAgICAgICAgICAgICAgICBzdXBwb3J0OiBZCiAgICAgICAgICAgIH0pLCBaLmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IiLnNwbGl0KCIgIiksIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIEdbIltvYmplY3QgIiArIGUgKyAiXSJdID0gZS50b0xvd2VyQ2FzZSgpCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgaXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwgbywgYSwgcywgdSwgYywgZiwgaCwgZCwgZzsKICAgICAgICAgICAgICAgICAgICBpZiAoKGUgPyBlLm93bmVyRG9jdW1lbnQgfHwgZSA6IE0pICE9PSBJICYmIFIoZSksIGUgPSBlIHx8IEksIG4gPSBuIHx8IFtdLCBzID0gZS5ub2RlVHlwZSwgInN0cmluZyIgIT0gdHlwZW9mIHQgfHwgIXQgfHwgMSAhPT0gcyAmJiA5ICE9PSBzICYmIDExICE9PSBzKSByZXR1cm4gbjsKICAgICAgICAgICAgICAgICAgICBpZiAoIXIgJiYgTCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMTEgIT09IHMgJiYgKGkgPSBtdC5leGVjKHQpKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhID0gaVsxXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICg5ID09PSBzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID0gZS5nZXRFbGVtZW50QnlJZChhKSwgIW8gfHwgIW8ucGFyZW50Tm9kZSkgcmV0dXJuIG47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmlkID09PSBhKSByZXR1cm4gbi5wdXNoKG8pLCBuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLm93bmVyRG9jdW1lbnQgJiYgKG8gPSBlLm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYSkpICYmIHEoZSwgbykgJiYgby5pZCA9PT0gYSkgcmV0dXJuIG4ucHVzaChvKSwgbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaVsyXSkgcmV0dXJuIEsuYXBwbHkobiwgZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KSksIG47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhID0gaVszXSkgJiYgdy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSByZXR1cm4gSy5hcHBseShuLCBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYSkpLCBuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3LnFzYSAmJiAoIUQgfHwgIUQudGVzdCh0KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoID0gZiA9IEgsIGQgPSBlLCBnID0gMSAhPT0gcyAmJiB0LCAxID09PSBzICYmICJvYmplY3QiICE9PSBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSBFKHQpLCAoZiA9IGUuZ2V0QXR0cmlidXRlKCJpZCIpKSA/IGggPSBmLnJlcGxhY2UoeHQsICJcXCQmIikgOiBlLnNldEF0dHJpYnV0ZSgiaWQiLCBoKSwgaCA9ICJbaWQ9JyIgKyBoICsgIiddICIsIHUgPSBjLmxlbmd0aDsgdS0tOykgY1t1XSA9IGggKyBwKGNbdV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBidC50ZXN0KHQpICYmIGwoZS5wYXJlbnROb2RlKSB8fCBlLCBnID0gYy5qb2luKCIsIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnKSB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBLLmFwcGx5KG4sIGQucXVlcnlTZWxlY3RvckFsbChnKSksIG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHYpIHt9IGZpbmFsbHkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgfHwgZS5yZW1vdmVBdHRyaWJ1dGUoImlkIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gQyh0LnJlcGxhY2UodXQsICIkMSIpLCBlLCBuLCByKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG4oKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdChuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnB1c2gobiArICIgIikgPiBfLmNhY2hlTGVuZ3RoICYmIGRlbGV0ZSB0W2Uuc2hpZnQoKV0sIHRbbiArICIgIl0gPSByCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBlID0gW107CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFtIXSA9ICEwLCB0CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBJLmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXQoZSkKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZSksIGUgPSBudWxsCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8odCwgZSkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSB0LnNwbGl0KCJ8IiksIHIgPSB0Lmxlbmd0aDsgci0tOykgXy5hdHRySGFuZGxlW25bcl1dID0gZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEodCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gZSAmJiB0LAogICAgICAgICAgICAgICAgICAgICAgICByID0gbiAmJiAxID09PSB0Lm5vZGVUeXBlICYmIDEgPT09IGUubm9kZVR5cGUgJiYgKH5lLnNvdXJjZUluZGV4IHx8IEcpIC0gKH50LnNvdXJjZUluZGV4IHx8IEcpOwogICAgICAgICAgICAgICAgICAgIGlmIChyKSByZXR1cm4gcjsKICAgICAgICAgICAgICAgICAgICBpZiAobikKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IG4gPSBuLm5leHRTaWJsaW5nOykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID09PSBlKSByZXR1cm4gLTE7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPyAxIDogLTEKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJpbnB1dCIgPT09IG4gJiYgZS50eXBlID09PSB0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHUodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCJpbnB1dCIgPT09IG4gfHwgImJ1dHRvbiIgPT09IG4pICYmIGUudHlwZSA9PT0gdAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcihmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gK2UsIHIoZnVuY3Rpb24obiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSwgbyA9IHQoW10sIG4ubGVuZ3RoLCBlKSwgYSA9IG8ubGVuZ3RoOyBhLS07KSBuW2kgPSBvW2FdXSAmJiAobltpXSA9ICEocltpXSA9IG5baV0pKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gbCh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgInVuZGVmaW5lZCIgIT0gdHlwZW9mIHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgJiYgdAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGYoKSB7fQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHAodCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwLCBuID0gdC5sZW5ndGgsIHIgPSAiIjsgbiA+IGU7IGUrKykgciArPSB0W2VdLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gaCh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlLmRpciwKICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG4gJiYgInBhcmVudE5vZGUiID09PSByLAogICAgICAgICAgICAgICAgICAgICAgICBvID0gQisrOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmZpcnN0ID8gZnVuY3Rpb24oZSwgbiwgbykgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgZSA9IGVbcl07KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IGUubm9kZVR5cGUgfHwgaSkgcmV0dXJuIHQoZSwgbiwgbykKICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24oZSwgbiwgYSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcywgdSwgYyA9IFtGLCBvXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBlID0gZVtyXTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgxID09PSBlLm5vZGVUeXBlIHx8IGkpICYmIHQoZSwgbiwgYSkpIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBlID0gZVtyXTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IGUubm9kZVR5cGUgfHwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodSA9IGVbSF0gfHwgKGVbSF0gPSB7fSksIChzID0gdVtyXSkgJiYgc1swXSA9PT0gRiAmJiBzWzFdID09PSBvKSByZXR1cm4gY1syXSA9IHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1W3JdID0gYywgY1syXSA9IHQoZSwgbiwgYSkpIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZCh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubGVuZ3RoID4gMSA/IGZ1bmN0aW9uKGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHQubGVuZ3RoOyBpLS07KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0W2ldKGUsIG4sIHIpKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgIH0gOiB0WzBdCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZyh0LCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG8gPSBuLmxlbmd0aDsgbyA+IGk7IGkrKykgZSh0LCBuW2ldLCByKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHYodCwgZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG8sIGEgPSBbXSwgcyA9IDAsIHUgPSB0Lmxlbmd0aCwgYyA9IG51bGwgIT0gZTsgdSA+IHM7IHMrKykobyA9IHRbc10pICYmICghbiB8fCBuKG8sIHIsIGkpKSAmJiAoYS5wdXNoKG8pLCBjICYmIGUucHVzaChzKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB5KHQsIGUsIG4sIGksIG8sIGEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSAmJiAhaVtIXSAmJiAoaSA9IHkoaSkpLCBvICYmICFvW0hdICYmIChvID0geShvLCBhKSksIHIoZnVuY3Rpb24ociwgYSwgcywgdSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYywgbCwgZiwgcCA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9IGEubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHIgfHwgZyhlIHx8ICIqIiwgcy5ub2RlVHlwZSA/IFtzXSA6IHMsIFtdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAhdCB8fCAhciAmJiBlID8geSA6IHYoeSwgcCwgdCwgcywgdSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gbiA/IG8gfHwgKHIgPyB0IDogZCB8fCBpKSA/IFtdIDogYSA6IG07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuICYmIG4obSwgYiwgcywgdSksIGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGMgPSB2KGIsIGgpLCBpKGMsIFtdLCBzLCB1KSwgbCA9IGMubGVuZ3RoOyBsLS07KShmID0gY1tsXSkgJiYgKGJbaFtsXV0gPSAhKG1baFtsXV0gPSBmKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyB8fCB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjID0gW10sIGwgPSBiLmxlbmd0aDsgbC0tOykoZiA9IGJbbF0pICYmIGMucHVzaChtW2xdID0gZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8obnVsbCwgYiA9IFtdLCBjLCB1KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGwgPSBiLmxlbmd0aDsgbC0tOykoZiA9IGJbbF0pICYmIChjID0gbyA/IHR0KHIsIGYpIDogcFtsXSkgPiAtMSAmJiAocltjXSA9ICEoYVtjXSA9IGYpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYiA9IHYoYiA9PT0gYSA/IGIuc3BsaWNlKGQsIGIubGVuZ3RoKSA6IGIpLCBvID8gbyhudWxsLCBhLCBiLCB1KSA6IEsuYXBwbHkoYSwgYikKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG0odCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUsIG4sIHIsIGkgPSB0Lmxlbmd0aCwgbyA9IF8ucmVsYXRpdmVbdFswXS50eXBlXSwgYSA9IG8gfHwgXy5yZWxhdGl2ZVsiICJdLCBzID0gbyA/IDEgOiAwLCB1ID0gaChmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gZQogICAgICAgICAgICAgICAgICAgICAgICB9LCBhLCAhMCksIGMgPSBoKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0dChlLCB0KSA+IC0xCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGEsICEwKSwgbCA9IFtmdW5jdGlvbih0LCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICFvICYmIChyIHx8IG4gIT09IFMpIHx8ICgoZSA9IG4pLm5vZGVUeXBlID8gdSh0LCBuLCByKSA6IGModCwgbiwgcikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBudWxsLCBpCiAgICAgICAgICAgICAgICAgICAgICAgIH1dOyBpID4gczsgcysrKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9IF8ucmVsYXRpdmVbdFtzXS50eXBlXSkgbCA9IFtoKGQobCksIG4pXTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9IF8uZmlsdGVyW3Rbc10udHlwZV0uYXBwbHkobnVsbCwgdFtzXS5tYXRjaGVzKSwgbltIXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAociA9ICsrczsgaSA+IHIgJiYgIV8ucmVsYXRpdmVbdFtyXS50eXBlXTsgcisrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShzID4gMSAmJiBkKGwpLCBzID4gMSAmJiBwKHQuc2xpY2UoMCwgcyAtIDEpLmNvbmNhdCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiICIgPT09IHRbcyAtIDJdLnR5cGUgPyAiKiIgOiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKS5yZXBsYWNlKHV0LCAiJDEiKSwgbiwgciA+IHMgJiYgbSh0LnNsaWNlKHMsIHIpKSwgaSA+IHIgJiYgbSh0ID0gdC5zbGljZShyKSksIGkgPiByICYmIHAodCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnB1c2gobikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBkKGwpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gYih0LCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuLmxlbmd0aCA+IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0Lmxlbmd0aCA+IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBmdW5jdGlvbihyLCBhLCBzLCB1LCBjKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCwgZiwgcCwgaCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9ICIwIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gciAmJiBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IFMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYiA9IHIgfHwgbyAmJiBfLmZpbmQuVEFHKCIqIiwgYyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IEYgKz0gbnVsbCA9PSBtID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgLjEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdyA9IGIubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjICYmIChTID0gYSAhPT0gSSAmJiBhKTsgZCAhPT0gdyAmJiBudWxsICE9IChsID0gYltkXSk7IGQrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvICYmIGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmID0gMDsgcCA9IHRbZisrXTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocChsLCBhLCBzKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUucHVzaChsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjICYmIChGID0geCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiAoKGwgPSAhcCAmJiBsKSAmJiBoLS0sIHIgJiYgZy5wdXNoKGwpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGggKz0gZCwgaSAmJiBkICE9PSBoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmID0gMDsgcCA9IG5bZisrXTspIHAoZywgeSwgYSwgcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGggPiAwKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGQtLTspIGdbZF0gfHwgeVtkXSB8fCAoeVtkXSA9IFkuY2FsbCh1KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSB2KHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEsuYXBwbHkodSwgeSksIGMgJiYgIXIgJiYgeS5sZW5ndGggPiAwICYmIGggKyBuLmxlbmd0aCA+IDEgJiYgZS51bmlxdWVTb3J0KHUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyAmJiAoRiA9IHgsIFMgPSBtKSwgZwogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBpID8gcihhKSA6IGEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciB4LCB3LCBfLCBrLCBULCBFLCBqLCBDLCBTLCBBLCBOLCBSLCBJLCBPLCBMLCBELCBQLCAkLCBxLCBIID0gInNpenpsZSIgKyAxICogbmV3IERhdGUsCiAgICAgICAgICAgICAgICAgICAgTSA9IHQuZG9jdW1lbnQsCiAgICAgICAgICAgICAgICAgICAgRiA9IDAsCiAgICAgICAgICAgICAgICAgICAgQiA9IDAsCiAgICAgICAgICAgICAgICAgICAgVSA9IG4oKSwKICAgICAgICAgICAgICAgICAgICBXID0gbigpLAogICAgICAgICAgICAgICAgICAgIHogPSBuKCksCiAgICAgICAgICAgICAgICAgICAgViA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IGUgJiYgKE4gPSAhMCksIDAKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIEcgPSAxIDw8IDMxLAogICAgICAgICAgICAgICAgICAgIFggPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgICAgICAgICAgICAgICAgICBKID0gW10sCiAgICAgICAgICAgICAgICAgICAgWSA9IEoucG9wLAogICAgICAgICAgICAgICAgICAgIFEgPSBKLnB1c2gsCiAgICAgICAgICAgICAgICAgICAgSyA9IEoucHVzaCwKICAgICAgICAgICAgICAgICAgICBaID0gSi5zbGljZSwKICAgICAgICAgICAgICAgICAgICB0dCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSB0Lmxlbmd0aDsgciA+IG47IG4rKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0W25dID09PSBlKSByZXR1cm4gbjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBldCA9ICJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZCIsCiAgICAgICAgICAgICAgICAgICAgbnQgPSAiW1xceDIwXFx0XFxyXFxuXFxmXSIsCiAgICAgICAgICAgICAgICAgICAgcnQgPSAiKD86XFxcXC58W1xcdy1dfFteXFx4MDAtXFx4YTBdKSsiLAogICAgICAgICAgICAgICAgICAgIGl0ID0gcnQucmVwbGFjZSgidyIsICJ3IyIpLAogICAgICAgICAgICAgICAgICAgIG90ID0gIlxcWyIgKyBudCArICIqKCIgKyBydCArICIpKD86IiArIG50ICsgIiooWypeJHwhfl0/PSkiICsgbnQgKyAiKig/OicoKD86XFxcXC58W15cXFxcJ10pKiknfFwiKCg/OlxcXFwufFteXFxcXFwiXSkqKVwifCgiICsgaXQgKyAiKSl8KSIgKyBudCArICIqXFxdIiwKICAgICAgICAgICAgICAgICAgICBhdCA9ICI6KCIgKyBydCArICIpKD86XFwoKCgnKCg/OlxcXFwufFteXFxcXCddKSopJ3xcIigoPzpcXFxcLnxbXlxcXFxcIl0pKilcIil8KCg/OlxcXFwufFteXFxcXCgpW1xcXV18IiArIG90ICsgIikqKXwuKilcXCl8KSIsCiAgICAgICAgICAgICAgICAgICAgc3QgPSBuZXcgUmVnRXhwKG50ICsgIisiLCAiZyIpLAogICAgICAgICAgICAgICAgICAgIHV0ID0gbmV3IFJlZ0V4cCgiXiIgKyBudCArICIrfCgoPzpefFteXFxcXF0pKD86XFxcXC4pKikiICsgbnQgKyAiKyQiLCAiZyIpLAogICAgICAgICAgICAgICAgICAgIGN0ID0gbmV3IFJlZ0V4cCgiXiIgKyBudCArICIqLCIgKyBudCArICIqIiksCiAgICAgICAgICAgICAgICAgICAgbHQgPSBuZXcgUmVnRXhwKCJeIiArIG50ICsgIiooWz4rfl18IiArIG50ICsgIikiICsgbnQgKyAiKiIpLAogICAgICAgICAgICAgICAgICAgIGZ0ID0gbmV3IFJlZ0V4cCgiPSIgKyBudCArICIqKFteXFxdJ1wiXSo/KSIgKyBudCArICIqXFxdIiwgImciKSwKICAgICAgICAgICAgICAgICAgICBwdCA9IG5ldyBSZWdFeHAoYXQpLAogICAgICAgICAgICAgICAgICAgIGh0ID0gbmV3IFJlZ0V4cCgiXiIgKyBpdCArICIkIiksCiAgICAgICAgICAgICAgICAgICAgZHQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIElEOiBuZXcgUmVnRXhwKCJeIygiICsgcnQgKyAiKSIpLAogICAgICAgICAgICAgICAgICAgICAgICBDTEFTUzogbmV3IFJlZ0V4cCgiXlxcLigiICsgcnQgKyAiKSIpLAogICAgICAgICAgICAgICAgICAgICAgICBUQUc6IG5ldyBSZWdFeHAoIl4oIiArIHJ0LnJlcGxhY2UoInciLCAidyoiKSArICIpIiksCiAgICAgICAgICAgICAgICAgICAgICAgIEFUVFI6IG5ldyBSZWdFeHAoIl4iICsgb3QpLAogICAgICAgICAgICAgICAgICAgICAgICBQU0VVRE86IG5ldyBSZWdFeHAoIl4iICsgYXQpLAogICAgICAgICAgICAgICAgICAgICAgICBDSElMRDogbmV3IFJlZ0V4cCgiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFwoIiArIG50ICsgIiooZXZlbnxvZGR8KChbKy1dfCkoXFxkKilufCkiICsgbnQgKyAiKig/OihbKy1dfCkiICsgbnQgKyAiKihcXGQrKXwpKSIgKyBudCArICIqXFwpfCkiLCAiaSIpLAogICAgICAgICAgICAgICAgICAgICAgICBib29sOiBuZXcgUmVnRXhwKCJeKD86IiArIGV0ICsgIikkIiwgImkiKSwKICAgICAgICAgICAgICAgICAgICAgICAgbmVlZHNDb250ZXh0OiBuZXcgUmVnRXhwKCJeIiArIG50ICsgIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcKCIgKyBudCArICIqKCg/Oi1cXGQpP1xcZCopIiArIG50ICsgIipcXCl8KSg/PVteLV18JCkiLCAiaSIpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBndCA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksCiAgICAgICAgICAgICAgICAgICAgdnQgPSAvXmhcZCQvaSwKICAgICAgICAgICAgICAgICAgICB5dCA9IC9eW157XStce1xzKlxbbmF0aXZlIFx3LywKICAgICAgICAgICAgICAgICAgICBtdCA9IC9eKD86IyhbXHctXSspfChcdyspfFwuKFtcdy1dKykpJC8sCiAgICAgICAgICAgICAgICAgICAgYnQgPSAvWyt+XS8sCiAgICAgICAgICAgICAgICAgICAgeHQgPSAvJ3xcXC9nLAogICAgICAgICAgICAgICAgICAgIHd0ID0gbmV3IFJlZ0V4cCgiXFxcXChbXFxkYS1mXXsxLDZ9IiArIG50ICsgIj98KCIgKyBudCArICIpfC4pIiwgImlnIiksCiAgICAgICAgICAgICAgICAgICAgX3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gIjB4IiArIGUgLSA2NTUzNjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgIT09IHIgfHwgbiA/IGUgOiAwID4gciA/IFN0cmluZy5mcm9tQ2hhckNvZGUociArIDY1NTM2KSA6IFN0cmluZy5mcm9tQ2hhckNvZGUociA+PiAxMCB8IDU1Mjk2LCAxMDIzICYgciB8IDU2MzIwKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAga3QgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgUigpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgSy5hcHBseShKID0gWi5jYWxsKE0uY2hpbGROb2RlcyksIE0uY2hpbGROb2RlcyksIEpbTS5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGUKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKFR0KSB7CiAgICAgICAgICAgICAgICAgICAgSyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHk6IEoubGVuZ3RoID8gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgUS5hcHBseSh0LCBaLmNhbGwoZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gdC5sZW5ndGgsIHIgPSAwOyB0W24rK10gPSBlW3IrK107KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubGVuZ3RoID0gbiAtIDEKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHcgPSBlLnN1cHBvcnQgPSB7fSwgVCA9IGUuaXNYTUwgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0ICYmICh0Lm93bmVyRG9jdW1lbnQgfHwgdCkuZG9jdW1lbnRFbGVtZW50OwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlID8gIkhUTUwiICE9PSBlLm5vZGVOYW1lIDogITEKICAgICAgICAgICAgICAgIH0sIFIgPSBlLnNldERvY3VtZW50ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlLCBuLCByID0gdCA/IHQub3duZXJEb2N1bWVudCB8fCB0IDogTTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAhPT0gSSAmJiA5ID09PSByLm5vZGVUeXBlICYmIHIuZG9jdW1lbnRFbGVtZW50ID8gKEkgPSByLCBPID0gci5kb2N1bWVudEVsZW1lbnQsIG4gPSByLmRlZmF1bHRWaWV3LCBuICYmIG4gIT09IG4udG9wICYmIChuLmFkZEV2ZW50TGlzdGVuZXIgPyBuLmFkZEV2ZW50TGlzdGVuZXIoInVubG9hZCIsIGt0LCAhMSkgOiBuLmF0dGFjaEV2ZW50ICYmIG4uYXR0YWNoRXZlbnQoIm9udW5sb2FkIiwga3QpKSwgTCA9ICFUKHIpLCB3LmF0dHJpYnV0ZXMgPSBpKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY2xhc3NOYW1lID0gImkiLCAhdC5nZXRBdHRyaWJ1dGUoImNsYXNzTmFtZSIpCiAgICAgICAgICAgICAgICAgICAgfSksIHcuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBpKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwZW5kQ2hpbGQoci5jcmVhdGVDb21tZW50KCIiKSksICF0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgfSksIHcuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHl0LnRlc3Qoci5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKSwgdy5nZXRCeUlkID0gaShmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPLmFwcGVuZENoaWxkKHQpLmlkID0gSCwgIXIuZ2V0RWxlbWVudHNCeU5hbWUgfHwgIXIuZ2V0RWxlbWVudHNCeU5hbWUoSCkubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgfSksIHcuZ2V0QnlJZCA/IChfLmZpbmQuSUQgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgZS5nZXRFbGVtZW50QnlJZCAmJiBMKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUuZ2V0RWxlbWVudEJ5SWQodCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiAmJiBuLnBhcmVudE5vZGUgPyBbbl0gOiBbXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwgXy5maWx0ZXIuSUQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5yZXBsYWNlKHd0LCBfdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRBdHRyaWJ1dGUoImlkIikgPT09IGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pIDogKGRlbGV0ZSBfLmZpbmQuSUQsIF8uZmlsdGVyLklEID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQucmVwbGFjZSh3dCwgX3QpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgdC5nZXRBdHRyaWJ1dGVOb2RlICYmIHQuZ2V0QXR0cmlidXRlTm9kZSgiaWQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuICYmIG4udmFsdWUgPT09IGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLCBfLmZpbmQuVEFHID0gdy5nZXRFbGVtZW50c0J5VGFnTmFtZSA/IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJ1bmRlZmluZWQiICE9IHR5cGVvZiBlLmdldEVsZW1lbnRzQnlUYWdOYW1lID8gZS5nZXRFbGVtZW50c0J5VGFnTmFtZSh0KSA6IHcucXNhID8gZS5xdWVyeVNlbGVjdG9yQWxsKHQpIDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4sIHIgPSBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiKiIgPT09IHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBuID0gb1tpKytdOykgMSA9PT0gbi5ub2RlVHlwZSAmJiByLnB1c2gobik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgICAgICAgICAgfSwgXy5maW5kLkNMQVNTID0gdy5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEwgPyBlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUodCkgOiB2b2lkIDAKICAgICAgICAgICAgICAgICAgICB9LCBQID0gW10sIEQgPSBbXSwgKHcucXNhID0geXQudGVzdChyLnF1ZXJ5U2VsZWN0b3JBbGwpKSAmJiAoaShmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIE8uYXBwZW5kQ2hpbGQodCkuaW5uZXJIVE1MID0gIjxhIGlkPSciICsgSCArICInPjwvYT48c2VsZWN0IGlkPSciICsgSCArICItXGZdJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PiIsIHQucXVlcnlTZWxlY3RvckFsbCgiW21zYWxsb3djYXB0dXJlXj0nJ10iKS5sZW5ndGggJiYgRC5wdXNoKCJbKl4kXT0iICsgbnQgKyAiKig/OicnfFwiXCIpIiksIHQucXVlcnlTZWxlY3RvckFsbCgiW3NlbGVjdGVkXSIpLmxlbmd0aCB8fCBELnB1c2goIlxcWyIgKyBudCArICIqKD86dmFsdWV8IiArIGV0ICsgIikiKSwgdC5xdWVyeVNlbGVjdG9yQWxsKCJbaWR+PSIgKyBIICsgIi1dIikubGVuZ3RoIHx8IEQucHVzaCgifj0iKSwgdC5xdWVyeVNlbGVjdG9yQWxsKCI6Y2hlY2tlZCIpLmxlbmd0aCB8fCBELnB1c2goIjpjaGVja2VkIiksIHQucXVlcnlTZWxlY3RvckFsbCgiYSMiICsgSCArICIrKiIpLmxlbmd0aCB8fCBELnB1c2goIi4jLitbK35dIikKICAgICAgICAgICAgICAgICAgICB9KSwgaShmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gci5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSgidHlwZSIsICJoaWRkZW4iKSwgdC5hcHBlbmRDaGlsZChlKS5zZXRBdHRyaWJ1dGUoIm5hbWUiLCAiRCIpLCB0LnF1ZXJ5U2VsZWN0b3JBbGwoIltuYW1lPWRdIikubGVuZ3RoICYmIEQucHVzaCgibmFtZSIgKyBudCArICIqWypeJHwhfl0/PSIpLCB0LnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RoIHx8IEQucHVzaCgiOmVuYWJsZWQiLCAiOmRpc2FibGVkIiksIHQucXVlcnlTZWxlY3RvckFsbCgiKiw6eCIpLCBELnB1c2goIiwuKjoiKQogICAgICAgICAgICAgICAgICAgIH0pKSwgKHcubWF0Y2hlc1NlbGVjdG9yID0geXQudGVzdCgkID0gTy5tYXRjaGVzIHx8IE8ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IE8ubW96TWF0Y2hlc1NlbGVjdG9yIHx8IE8ub01hdGNoZXNTZWxlY3RvciB8fCBPLm1zTWF0Y2hlc1NlbGVjdG9yKSkgJiYgaShmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHcuZGlzY29ubmVjdGVkTWF0Y2ggPSAkLmNhbGwodCwgImRpdiIpLCAkLmNhbGwodCwgIltzIT0nJ106eCIpLCBQLnB1c2goIiE9IiwgYXQpCiAgICAgICAgICAgICAgICAgICAgfSksIEQgPSBELmxlbmd0aCAmJiBuZXcgUmVnRXhwKEQuam9pbigifCIpKSwgUCA9IFAubGVuZ3RoICYmIG5ldyBSZWdFeHAoUC5qb2luKCJ8IikpLCBlID0geXQudGVzdChPLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSwgcSA9IGUgfHwgeXQudGVzdChPLmNvbnRhaW5zKSA/IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSA5ID09PSB0Lm5vZGVUeXBlID8gdC5kb2N1bWVudEVsZW1lbnQgOiB0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGUgJiYgZS5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gciB8fCAhKCFyIHx8IDEgIT09IHIubm9kZVR5cGUgfHwgIShuLmNvbnRhaW5zID8gbi5jb250YWlucyhyKSA6IHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gJiYgMTYgJiB0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHIpKSkKICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBlID0gZS5wYXJlbnROb2RlOykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PT0gdCkgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEKICAgICAgICAgICAgICAgICAgICB9LCBWID0gZSA/IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IGUpIHJldHVybiBOID0gITAsIDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gIXQuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPyBuIDogKG4gPSAodC5vd25lckRvY3VtZW50IHx8IHQpID09PSAoZS5vd25lckRvY3VtZW50IHx8IGUpID8gdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKSA6IDEsIDEgJiBuIHx8ICF3LnNvcnREZXRhY2hlZCAmJiBlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHQpID09PSBuID8gdCA9PT0gciB8fCB0Lm93bmVyRG9jdW1lbnQgPT09IE0gJiYgcShNLCB0KSA/IC0xIDogZSA9PT0gciB8fCBlLm93bmVyRG9jdW1lbnQgPT09IE0gJiYgcShNLCBlKSA/IDEgOiBBID8gdHQoQSwgdCkgLSB0dChBLCBlKSA6IDAgOiA0ICYgbiA/IC0xIDogMSkKICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gZSkgcmV0dXJuIE4gPSAhMCwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4sIGkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHQucGFyZW50Tm9kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBlLnBhcmVudE5vZGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gW3RdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IFtlXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvIHx8ICFzKSByZXR1cm4gdCA9PT0gciA/IC0xIDogZSA9PT0gciA/IDEgOiBvID8gLTEgOiBzID8gMSA6IEEgPyB0dChBLCB0KSAtIHR0KEEsIGUpIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8gPT09IHMpIHJldHVybiBhKHQsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gPSB0OyBuID0gbi5wYXJlbnROb2RlOykgdS51bnNoaWZ0KG4pOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4gPSBlOyBuID0gbi5wYXJlbnROb2RlOykgYy51bnNoaWZ0KG4pOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgdVtpXSA9PT0gY1tpXTspIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPyBhKHVbaV0sIGNbaV0pIDogdVtpXSA9PT0gTSA/IC0xIDogY1tpXSA9PT0gTSA/IDEgOiAwCiAgICAgICAgICAgICAgICAgICAgfSwgcikgOiBJCiAgICAgICAgICAgICAgICB9LCBlLm1hdGNoZXMgPSBmdW5jdGlvbih0LCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodCwgbnVsbCwgbnVsbCwgbikKICAgICAgICAgICAgICAgIH0sIGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAgICAgICAgIGlmICgodC5vd25lckRvY3VtZW50IHx8IHQpICE9PSBJICYmIFIodCksIG4gPSBuLnJlcGxhY2UoZnQsICI9JyQxJ10iKSwgdy5tYXRjaGVzU2VsZWN0b3IgJiYgTCAmJiAoIVAgfHwgIVAudGVzdChuKSkgJiYgKCFEIHx8ICFELnRlc3QobikpKSB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9ICQuY2FsbCh0LCBuKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgfHwgdy5kaXNjb25uZWN0ZWRNYXRjaCB8fCB0LmRvY3VtZW50ICYmIDExICE9PSB0LmRvY3VtZW50Lm5vZGVUeXBlKSByZXR1cm4gcgogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGkpIHt9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUobiwgSSwgbnVsbCwgW3RdKS5sZW5ndGggPiAwCiAgICAgICAgICAgICAgICB9LCBlLmNvbnRhaW5zID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAodC5vd25lckRvY3VtZW50IHx8IHQpICE9PSBJICYmIFIodCksIHEodCwgZSkKICAgICAgICAgICAgICAgIH0sIGUuYXR0ciA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAodC5vd25lckRvY3VtZW50IHx8IHQpICE9PSBJICYmIFIodCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBfLmF0dHJIYW5kbGVbZS50b0xvd2VyQ2FzZSgpXSwKICAgICAgICAgICAgICAgICAgICAgICAgciA9IG4gJiYgWC5jYWxsKF8uYXR0ckhhbmRsZSwgZS50b0xvd2VyQ2FzZSgpKSA/IG4odCwgZSwgIUwpIDogdm9pZCAwOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHIgPyByIDogdy5hdHRyaWJ1dGVzIHx8ICFMID8gdC5nZXRBdHRyaWJ1dGUoZSkgOiAociA9IHQuZ2V0QXR0cmlidXRlTm9kZShlKSkgJiYgci5zcGVjaWZpZWQgPyByLnZhbHVlIDogbnVsbAogICAgICAgICAgICAgICAgfSwgZS5lcnJvciA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246ICIgKyB0KQogICAgICAgICAgICAgICAgfSwgZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlLCBuID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gMDsKICAgICAgICAgICAgICAgICAgICBpZiAoTiA9ICF3LmRldGVjdER1cGxpY2F0ZXMsIEEgPSAhdy5zb3J0U3RhYmxlICYmIHQuc2xpY2UoMCksIHQuc29ydChWKSwgTikgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgZSA9IHRbaSsrXTspIGUgPT09IHRbaV0gJiYgKHIgPSBuLnB1c2goaSkpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgci0tOykgdC5zcGxpY2UobltyXSwgMSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEEgPSBudWxsLCB0CiAgICAgICAgICAgICAgICB9LCBrID0gZS5nZXRUZXh0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlLCBuID0gIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5ub2RlVHlwZTsKICAgICAgICAgICAgICAgICAgICBpZiAoaSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gaSB8fCA5ID09PSBpIHx8IDExID09PSBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gdHlwZW9mIHQudGV4dENvbnRlbnQpIHJldHVybiB0LnRleHRDb250ZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh0ID0gdC5maXJzdENoaWxkOyB0OyB0ID0gdC5uZXh0U2libGluZykgbiArPSBrKHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoMyA9PT0gaSB8fCA0ID09PSBpKSByZXR1cm4gdC5ub2RlVmFsdWUKICAgICAgICAgICAgICAgICAgICB9IGVsc2UKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGUgPSB0W3IrK107KSBuICs9IGsoZSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgICAgIH0sIF8gPSBlLnNlbGVjdG9ycyA9IHsKICAgICAgICAgICAgICAgICAgICBjYWNoZUxlbmd0aDogNTAsCiAgICAgICAgICAgICAgICAgICAgY3JlYXRlUHNldWRvOiByLAogICAgICAgICAgICAgICAgICAgIG1hdGNoOiBkdCwKICAgICAgICAgICAgICAgICAgICBhdHRySGFuZGxlOiB7fSwKICAgICAgICAgICAgICAgICAgICBmaW5kOiB7fSwKICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZTogewogICAgICAgICAgICAgICAgICAgICAgICAiPiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcjogInBhcmVudE5vZGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICIgIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiAicGFyZW50Tm9kZSIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgIisiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXI6ICJwcmV2aW91c1NpYmxpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJ+IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiAicHJldmlvdXNTaWJsaW5nIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwcmVGaWx0ZXI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgQVRUUjogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRbMV0gPSB0WzFdLnJlcGxhY2Uod3QsIF90KSwgdFszXSA9ICh0WzNdIHx8IHRbNF0gfHwgdFs1XSB8fCAiIikucmVwbGFjZSh3dCwgX3QpLCAifj0iID09PSB0WzJdICYmICh0WzNdID0gIiAiICsgdFszXSArICIgIiksIHQuc2xpY2UoMCwgNCkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgQ0hJTEQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0WzFdID0gdFsxXS50b0xvd2VyQ2FzZSgpLCAibnRoIiA9PT0gdFsxXS5zbGljZSgwLCAzKSA/ICh0WzNdIHx8IGUuZXJyb3IodFswXSksIHRbNF0gPSArKHRbNF0gPyB0WzVdICsgKHRbNl0gfHwgMSkgOiAyICogKCJldmVuIiA9PT0gdFszXSB8fCAib2RkIiA9PT0gdFszXSkpLCB0WzVdID0gKyh0WzddICsgdFs4XSB8fCAib2RkIiA9PT0gdFszXSkpIDogdFszXSAmJiBlLmVycm9yKHRbMF0pLCB0CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIFBTRVVETzogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG4gPSAhdFs2XSAmJiB0WzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR0LkNISUxELnRlc3QodFswXSkgPyBudWxsIDogKHRbM10gPyB0WzJdID0gdFs0XSB8fCB0WzVdIHx8ICIiIDogbiAmJiBwdC50ZXN0KG4pICYmIChlID0gRShuLCAhMCkpICYmIChlID0gbi5pbmRleE9mKCIpIiwgbi5sZW5ndGggLSBlKSAtIG4ubGVuZ3RoKSAmJiAodFswXSA9IHRbMF0uc2xpY2UoMCwgZSksIHRbMl0gPSBuLnNsaWNlKDAsIGUpKSwgdC5zbGljZSgwLCAzKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIFRBRzogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LnJlcGxhY2Uod3QsIF90KS50b0xvd2VyQ2FzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIqIiA9PT0gdCA/IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5ub2RlTmFtZSAmJiB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgQ0xBU1M6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gVVt0ICsgIiAiXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlIHx8IChlID0gbmV3IFJlZ0V4cCgiKF58IiArIG50ICsgIikiICsgdCArICIoIiArIG50ICsgInwkKSIpKSAmJiBVKHQsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXN0KCJzdHJpbmciID09IHR5cGVvZiB0LmNsYXNzTmFtZSAmJiB0LmNsYXNzTmFtZSB8fCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgdC5nZXRBdHRyaWJ1dGUgJiYgdC5nZXRBdHRyaWJ1dGUoImNsYXNzIikgfHwgIiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBBVFRSOiBmdW5jdGlvbih0LCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gZS5hdHRyKGksIHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IG8gPyAiIT0iID09PSBuIDogbiA/IChvICs9ICIiLCAiPSIgPT09IG4gPyBvID09PSByIDogIiE9IiA9PT0gbiA/IG8gIT09IHIgOiAiXj0iID09PSBuID8gciAmJiAwID09PSBvLmluZGV4T2YocikgOiAiKj0iID09PSBuID8gciAmJiBvLmluZGV4T2YocikgPiAtMSA6ICIkPSIgPT09IG4gPyByICYmIG8uc2xpY2UoLXIubGVuZ3RoKSA9PT0gciA6ICJ+PSIgPT09IG4gPyAoIiAiICsgby5yZXBsYWNlKHN0LCAiICIpICsgIiAiKS5pbmRleE9mKHIpID4gLTEgOiAifD0iID09PSBuID8gbyA9PT0gciB8fCBvLnNsaWNlKDAsIHIubGVuZ3RoICsgMSkgPT09IHIgKyAiLSIgOiAhMSkgOiAhMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBDSElMRDogZnVuY3Rpb24odCwgZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSAibnRoIiAhPT0gdC5zbGljZSgwLCAzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gImxhc3QiICE9PSB0LnNsaWNlKC00KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gIm9mLXR5cGUiID09PSBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IHIgJiYgMCA9PT0gaSA/IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF0LnBhcmVudE5vZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbihlLCBuLCB1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMsIGwsIGYsIHAsIGgsIGQsIGcgPSBvICE9PSBhID8gIm5leHRTaWJsaW5nIiA6ICJwcmV2aW91c1NpYmxpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gZS5wYXJlbnROb2RlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gcyAmJiBlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSAhdSAmJiAhczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGc7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChmID0gZTsgZiA9IGZbZ107KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocyA/IGYubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0geSA6IDEgPT09IGYubm9kZVR5cGUpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZyA9ICJvbmx5IiA9PT0gdCAmJiAhZCAmJiAibmV4dFNpYmxpbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA9IFthID8gdi5maXJzdENoaWxkIDogdi5sYXN0Q2hpbGRdLCBhICYmIG0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobCA9IHZbSF0gfHwgKHZbSF0gPSB7fSksIGMgPSBsW3RdIHx8IFtdLCBoID0gY1swXSA9PT0gRiAmJiBjWzFdLCBwID0gY1swXSA9PT0gRiAmJiBjWzJdLCBmID0gaCAmJiB2LmNoaWxkTm9kZXNbaF07IGYgPSArK2ggJiYgZiAmJiBmW2ddIHx8IChwID0gaCA9IDApIHx8IGQucG9wKCk7KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09PSBmLm5vZGVUeXBlICYmICsrcCAmJiBmID09PSBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxbdF0gPSBbRiwgaCwgcF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG0gJiYgKGMgPSAoZVtIXSB8fCAoZVtIXSA9IHt9KSlbdF0pICYmIGNbMF0gPT09IEYpIHAgPSBjWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZiA9ICsraCAmJiBmICYmIGZbZ10gfHwgKHAgPSBoID0gMCkgfHwgZC5wb3AoKSkgJiYgKChzID8gZi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB5IDogMSAhPT0gZi5ub2RlVHlwZSkgfHwgISsrcCB8fCAobSAmJiAoKGZbSF0gfHwgKGZbSF0gPSB7fSkpW3RdID0gW0YsIHBdKSwgZiAhPT0gZSkpOyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwIC09IGksIHAgPT09IHIgfHwgcCAlIHIgPT09IDAgJiYgcCAvIHIgPj0gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgUFNFVURPOiBmdW5jdGlvbih0LCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSwgbyA9IF8ucHNldWRvc1t0XSB8fCBfLnNldEZpbHRlcnNbdC50b0xvd2VyQ2FzZSgpXSB8fCBlLmVycm9yKCJ1bnN1cHBvcnRlZCBwc2V1ZG86ICIgKyB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvW0hdID8gbyhuKSA6IG8ubGVuZ3RoID4gMSA/IChpID0gW3QsIHQsICIiLCBuXSwgXy5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KHQudG9Mb3dlckNhc2UoKSkgPyByKGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByLCBpID0gbyh0LCBuKSwgYSA9IGkubGVuZ3RoOyBhLS07KSByID0gdHQodCwgaVthXSksIHRbcl0gPSAhKGVbcl0gPSBpW2FdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8odCwgMCwgaSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogbwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBwc2V1ZG9zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdDogcihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaih0LnJlcGxhY2UodXQsICIkMSIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpW0hdID8gcihmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbywgYSA9IGkodCwgbnVsbCwgciwgW10pLCBzID0gdC5sZW5ndGg7IHMtLTspKG8gPSBhW3NdKSAmJiAodFtzXSA9ICEoZVtzXSA9IG8pKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiBmdW5jdGlvbih0LCByLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVbMF0gPSB0LCBpKGUsIG51bGwsIG8sIG4pLCBlWzBdID0gbnVsbCwgIW4ucG9wKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGhhczogcihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKHQsIG4pLmxlbmd0aCA+IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zOiByKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gdC5yZXBsYWNlKHd0LCBfdCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUudGV4dENvbnRlbnQgfHwgZS5pbm5lclRleHQgfHwgayhlKSkuaW5kZXhPZih0KSA+IC0xCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgbGFuZzogcihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHQudGVzdCh0IHx8ICIiKSB8fCBlLmVycm9yKCJ1bnN1cHBvcnRlZCBsYW5nOiAiICsgdCksIHQgPSB0LnJlcGxhY2Uod3QsIF90KS50b0xvd2VyQ2FzZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9IEwgPyBlLmxhbmcgOiBlLmdldEF0dHJpYnV0ZSgieG1sOmxhbmciKSB8fCBlLmdldEF0dHJpYnV0ZSgibGFuZyIpKSByZXR1cm4gbiA9IG4udG9Mb3dlckNhc2UoKSwgbiA9PT0gdCB8fCAwID09PSBuLmluZGV4T2YodCArICItIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgoZSA9IGUucGFyZW50Tm9kZSkgJiYgMSA9PT0gZS5ub2RlVHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LmxvY2F0aW9uICYmIHQubG9jYXRpb24uaGFzaDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuICYmIG4uc2xpY2UoMSkgPT09IGUuaWQKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgcm9vdDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IE8KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBJLmFjdGl2ZUVsZW1lbnQgJiYgKCFJLmhhc0ZvY3VzIHx8IEkuaGFzRm9jdXMoKSkgJiYgISEodC50eXBlIHx8IHQuaHJlZiB8fCB+dC50YWJJbmRleCkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZGlzYWJsZWQgPT09ICExCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5kaXNhYmxlZCA9PT0gITAKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gImlucHV0IiA9PT0gZSAmJiAhIXQuY2hlY2tlZCB8fCAib3B0aW9uIiA9PT0gZSAmJiAhIXQuc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnBhcmVudE5vZGUgJiYgdC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsIHQuc2VsZWN0ZWQgPT09ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHQgPSB0LmZpcnN0Q2hpbGQ7IHQ7IHQgPSB0Lm5leHRTaWJsaW5nKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm5vZGVUeXBlIDwgNikgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFfLnBzZXVkb3MuZW1wdHkodCkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdnQudGVzdCh0Lm5vZGVOYW1lKQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGd0LnRlc3QodC5ub2RlTmFtZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiaW5wdXQiID09PSBlICYmICJidXR0b24iID09PSB0LnR5cGUgfHwgImJ1dHRvbiIgPT09IGUKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gImlucHV0IiA9PT0gdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICYmICJ0ZXh0IiA9PT0gdC50eXBlICYmIChudWxsID09IChlID0gdC5nZXRBdHRyaWJ1dGUoInR5cGUiKSkgfHwgInRleHQiID09PSBlLnRvTG93ZXJDYXNlKCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0OiBjKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFswXQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgbGFzdDogYyhmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2UgLSAxXQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgZXE6IGMoZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFswID4gbiA/IG4gKyBlIDogbl0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW46IGMoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IGUgPiBuOyBuICs9IDIpIHQucHVzaChuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBvZGQ6IGMoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDE7IGUgPiBuOyBuICs9IDIpIHQucHVzaChuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBsdDogYyhmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCA+IG4gPyBuICsgZSA6IG47IC0tciA+PSAwOykgdC5wdXNoKHIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGd0OiBjKGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwID4gbiA/IG4gKyBlIDogbjsgKytyIDwgZTspIHQucHVzaChyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgXy5wc2V1ZG9zLm50aCA9IF8ucHNldWRvcy5lcTsKICAgICAgICAgICAgICAgIGZvciAoeCBpbiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tib3g6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgcGFzc3dvcmQ6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogITAKICAgICAgICAgICAgICAgICAgICB9KSBfLnBzZXVkb3NbeF0gPSBzKHgpOwogICAgICAgICAgICAgICAgZm9yICh4IGluIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3VibWl0OiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXQ6ICEwCiAgICAgICAgICAgICAgICAgICAgfSkgXy5wc2V1ZG9zW3hdID0gdSh4KTsKICAgICAgICAgICAgICAgIHJldHVybiBmLnByb3RvdHlwZSA9IF8uZmlsdGVycyA9IF8ucHNldWRvcywgXy5zZXRGaWx0ZXJzID0gbmV3IGYsIEUgPSBlLnRva2VuaXplID0gZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByLCBpLCBvLCBhLCBzLCB1LCBjLCBsID0gV1t0ICsgIiAiXTsKICAgICAgICAgICAgICAgICAgICBpZiAobCkgcmV0dXJuIG4gPyAwIDogbC5zbGljZSgwKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKHMgPSB0LCB1ID0gW10sIGMgPSBfLnByZUZpbHRlcjsgczspIHsKICAgICAgICAgICAgICAgICAgICAgICAgKCFyIHx8IChpID0gY3QuZXhlYyhzKSkpICYmIChpICYmIChzID0gcy5zbGljZShpWzBdLmxlbmd0aCkgfHwgcyksIHUucHVzaChvID0gW10pKSwgciA9ICExLCAoaSA9IGx0LmV4ZWMocykpICYmIChyID0gaS5zaGlmdCgpLCBvLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpWzBdLnJlcGxhY2UodXQsICIgIikKICAgICAgICAgICAgICAgICAgICAgICAgfSksIHMgPSBzLnNsaWNlKHIubGVuZ3RoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYSBpbiBfLmZpbHRlcikgIShpID0gZHRbYV0uZXhlYyhzKSkgfHwgY1thXSAmJiAhKGkgPSBjW2FdKGkpKSB8fCAociA9IGkuc2hpZnQoKSwgby5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoZXM6IGkKICAgICAgICAgICAgICAgICAgICAgICAgfSksIHMgPSBzLnNsaWNlKHIubGVuZ3RoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcikgYnJlYWsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPyBzLmxlbmd0aCA6IHMgPyBlLmVycm9yKHQpIDogVyh0LCB1KS5zbGljZSgwKQogICAgICAgICAgICAgICAgfSwgaiA9IGUuY29tcGlsZSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiwgciA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB6W3QgKyAiICJdOwogICAgICAgICAgICAgICAgICAgIGlmICghbykgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgfHwgKGUgPSBFKHQpKSwgbiA9IGUubGVuZ3RoOyBuLS07KSBvID0gbShlW25dKSwgb1tIXSA/IHIucHVzaChvKSA6IGkucHVzaChvKTsKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHoodCwgYihpLCByKSksIG8uc2VsZWN0b3IgPSB0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgICAgICB9LCBDID0gZS5zZWxlY3QgPSBmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGksIG8sIGEsIHMsIHUsIGMgPSAiZnVuY3Rpb24iID09IHR5cGVvZiB0ICYmIHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSAhciAmJiBFKHQgPSBjLnNlbGVjdG9yIHx8IHQpOwogICAgICAgICAgICAgICAgICAgIGlmIChuID0gbiB8fCBbXSwgMSA9PT0gZi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8gPSBmWzBdID0gZlswXS5zbGljZSgwKSwgby5sZW5ndGggPiAyICYmICJJRCIgPT09IChhID0gb1swXSkudHlwZSAmJiB3LmdldEJ5SWQgJiYgOSA9PT0gZS5ub2RlVHlwZSAmJiBMICYmIF8ucmVsYXRpdmVbb1sxXS50eXBlXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSAoXy5maW5kLklEKGEubWF0Y2hlc1swXS5yZXBsYWNlKHd0LCBfdCksIGUpIHx8IFtdKVswXSwgIWUpIHJldHVybiBuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyAmJiAoZSA9IGUucGFyZW50Tm9kZSksIHQgPSB0LnNsaWNlKG8uc2hpZnQoKS52YWx1ZS5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZHQubmVlZHNDb250ZXh0LnRlc3QodCkgPyAwIDogby5sZW5ndGg7IGktLSAmJiAoYSA9IG9baV0sICFfLnJlbGF0aXZlW3MgPSBhLnR5cGVdKTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKHUgPSBfLmZpbmRbc10pICYmIChyID0gdShhLm1hdGNoZXNbMF0ucmVwbGFjZSh3dCwgX3QpLCBidC50ZXN0KG9bMF0udHlwZSkgJiYgbChlLnBhcmVudE5vZGUpIHx8IGUpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLnNwbGljZShpLCAxKSwgdCA9IHIubGVuZ3RoICYmIHAobyksICF0KSByZXR1cm4gSy5hcHBseShuLCByKSwgbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGMgfHwgaih0LCBmKSkociwgZSwgIUwsIG4sIGJ0LnRlc3QodCkgJiYgbChlLnBhcmVudE5vZGUpIHx8IGUpLCBuCiAgICAgICAgICAgICAgICB9LCB3LnNvcnRTdGFibGUgPSBILnNwbGl0KCIiKS5zb3J0KFYpLmpvaW4oIiIpID09PSBILCB3LmRldGVjdER1cGxpY2F0ZXMgPSAhIU4sIFIoKSwgdy5zb3J0RGV0YWNoZWQgPSBpKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSAmIHQuY29tcGFyZURvY3VtZW50UG9zaXRpb24oSS5jcmVhdGVFbGVtZW50KCJkaXYiKSkKICAgICAgICAgICAgICAgIH0pLCBpKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5pbm5lckhUTUwgPSAiPGEgaHJlZj0nIyc+PC9hPiIsICIjIiA9PT0gdC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgiaHJlZiIpCiAgICAgICAgICAgICAgICB9KSB8fCBvKCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoIiwgZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID8gdm9pZCAwIDogdC5nZXRBdHRyaWJ1dGUoZSwgInR5cGUiID09PSBlLnRvTG93ZXJDYXNlKCkgPyAxIDogMikKICAgICAgICAgICAgICAgIH0pLCB3LmF0dHJpYnV0ZXMgJiYgaShmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5uZXJIVE1MID0gIjxpbnB1dC8+IiwgdC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgidmFsdWUiLCAiIiksICIiID09PSB0LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpCiAgICAgICAgICAgICAgICB9KSB8fCBvKCJ2YWx1ZSIsIGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiB8fCAiaW5wdXQiICE9PSB0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPyB2b2lkIDAgOiB0LmRlZmF1bHRWYWx1ZQogICAgICAgICAgICAgICAgfSksIGkoZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQuZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpCiAgICAgICAgICAgICAgICB9KSB8fCBvKGV0LCBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPyB2b2lkIDAgOiB0W2VdID09PSAhMCA/IGUudG9Mb3dlckNhc2UoKSA6IChyID0gdC5nZXRBdHRyaWJ1dGVOb2RlKGUpKSAmJiByLnNwZWNpZmllZCA/IHIudmFsdWUgOiBudWxsCiAgICAgICAgICAgICAgICB9KSwgZQogICAgICAgICAgICB9KHQpOwogICAgICAgICAgICBaLmZpbmQgPSBpdCwgWi5leHByID0gaXQuc2VsZWN0b3JzLCBaLmV4cHJbIjoiXSA9IFouZXhwci5wc2V1ZG9zLCBaLnVuaXF1ZSA9IGl0LnVuaXF1ZVNvcnQsIFoudGV4dCA9IGl0LmdldFRleHQsIFouaXNYTUxEb2MgPSBpdC5pc1hNTCwgWi5jb250YWlucyA9IGl0LmNvbnRhaW5zOwogICAgICAgICAgICB2YXIgb3QgPSBaLmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LAogICAgICAgICAgICAgICAgYXQgPSAvXjwoXHcrKVxzKlwvPz4oPzo8XC9cMT58KSQvLAogICAgICAgICAgICAgICAgc3QgPSAvXi5bXjojXFtcLixdKiQvOwogICAgICAgICAgICBaLmZpbHRlciA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgIHZhciByID0gZVswXTsKICAgICAgICAgICAgICAgIHJldHVybiBuICYmICh0ID0gIjpub3QoIiArIHQgKyAiKSIpLCAxID09PSBlLmxlbmd0aCAmJiAxID09PSByLm5vZGVUeXBlID8gWi5maW5kLm1hdGNoZXNTZWxlY3RvcihyLCB0KSA/IFtyXSA6IFtdIDogWi5maW5kLm1hdGNoZXModCwgWi5ncmVwKGUsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gMSA9PT0gdC5ub2RlVHlwZQogICAgICAgICAgICAgICAgfSkpCiAgICAgICAgICAgIH0sIFouZm4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSwgbiA9IHRoaXMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICByID0gW10sCiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgIGlmICgic3RyaW5nIiAhPSB0eXBlb2YgdCkgcmV0dXJuIHRoaXMucHVzaFN0YWNrKFoodCkuZmlsdGVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwOyBuID4gZTsgZSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFouY29udGFpbnMoaVtlXSwgdGhpcykpIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwOyBuID4gZTsgZSsrKSBaLmZpbmQodCwgaVtlXSwgcik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPSB0aGlzLnB1c2hTdGFjayhuID4gMSA/IFoudW5pcXVlKHIpIDogciksIHIuc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3RvciArICIgIiArIHQgOiB0LCByCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHIodGhpcywgdCB8fCBbXSwgITEpKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG5vdDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhyKHRoaXMsIHQgfHwgW10sICEwKSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBpczogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAhIXIodGhpcywgInN0cmluZyIgPT0gdHlwZW9mIHQgJiYgb3QudGVzdCh0KSA/IFoodCkgOiB0IHx8IFtdLCAhMSkubGVuZ3RoCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgdXQsIGN0ID0gL14oPzpccyooPFtcd1xXXSs+KVtePl0qfCMoW1x3LV0qKSkkLywKICAgICAgICAgICAgICAgIGx0ID0gWi5mbi5pbml0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuLCByOwogICAgICAgICAgICAgICAgICAgIGlmICghdCkgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJzdHJpbmciID09IHR5cGVvZiB0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID0gIjwiID09PSB0WzBdICYmICI+IiA9PT0gdFt0Lmxlbmd0aCAtIDFdICYmIHQubGVuZ3RoID49IDMgPyBbbnVsbCwgdCwgbnVsbF0gOiBjdC5leGVjKHQpLCAhbiB8fCAhblsxXSAmJiBlKSByZXR1cm4gIWUgfHwgZS5qcXVlcnkgPyAoZSB8fCB1dCkuZmluZCh0KSA6IHRoaXMuY29uc3RydWN0b3IoZSkuZmluZCh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5bMV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlID0gZSBpbnN0YW5jZW9mIFogPyBlWzBdIDogZSwgWi5tZXJnZSh0aGlzLCBaLnBhcnNlSFRNTChuWzFdLCBlICYmIGUubm9kZVR5cGUgPyBlLm93bmVyRG9jdW1lbnQgfHwgZSA6IFEsICEwKSksIGF0LnRlc3QoblsxXSkgJiYgWi5pc1BsYWluT2JqZWN0KGUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobiBpbiBlKSBaLmlzRnVuY3Rpb24odGhpc1tuXSkgPyB0aGlzW25dKGVbbl0pIDogdGhpcy5hdHRyKG4sIGVbbl0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9IFEuZ2V0RWxlbWVudEJ5SWQoblsyXSksIHIgJiYgci5wYXJlbnROb2RlICYmICh0aGlzLmxlbmd0aCA9IDEsIHRoaXNbMF0gPSByKSwgdGhpcy5jb250ZXh0ID0gUSwgdGhpcy5zZWxlY3RvciA9IHQsIHRoaXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubm9kZVR5cGUgPyAodGhpcy5jb250ZXh0ID0gdGhpc1swXSA9IHQsIHRoaXMubGVuZ3RoID0gMSwgdGhpcykgOiBaLmlzRnVuY3Rpb24odCkgPyAidW5kZWZpbmVkIiAhPSB0eXBlb2YgdXQucmVhZHkgPyB1dC5yZWFkeSh0KSA6IHQoWikgOiAodm9pZCAwICE9PSB0LnNlbGVjdG9yICYmICh0aGlzLnNlbGVjdG9yID0gdC5zZWxlY3RvciwgdGhpcy5jb250ZXh0ID0gdC5jb250ZXh0KSwgWi5tYWtlQXJyYXkodCwgdGhpcykpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICBsdC5wcm90b3R5cGUgPSBaLmZuLCB1dCA9IFooUSk7CiAgICAgICAgICAgIHZhciBmdCA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLAogICAgICAgICAgICAgICAgcHQgPSB7CiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46ICEwLAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnRzOiAhMCwKICAgICAgICAgICAgICAgICAgICBuZXh0OiAhMCwKICAgICAgICAgICAgICAgICAgICBwcmV2OiAhMAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgWi5leHRlbmQoewogICAgICAgICAgICAgICAgZGlyOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IFtdLCBpID0gdm9pZCAwICE9PSBuOwogICAgICAgICAgICAgICAgICAgICAgICAodCA9IHRbZV0pICYmIDkgIT09IHQubm9kZVR5cGU7KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gdC5ub2RlVHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJiYgWih0KS5pcyhuKSkgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnB1c2godCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2libGluZzogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSBbXTsgdDsgdCA9IHQubmV4dFNpYmxpbmcpIDEgPT09IHQubm9kZVR5cGUgJiYgdCAhPT0gZSAmJiBuLnB1c2godCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouZm4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgIGhhczogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gWih0LCB0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IG4gPiB0OyB0KyspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWi5jb250YWlucyh0aGlzLCBlW3RdKSkgcmV0dXJuICEwCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjbG9zZXN0OiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiwgciA9IDAsIGkgPSB0aGlzLmxlbmd0aCwgbyA9IFtdLCBhID0gb3QudGVzdCh0KSB8fCAic3RyaW5nIiAhPSB0eXBlb2YgdCA/IFoodCwgZSB8fCB0aGlzLmNvbnRleHQpIDogMDsgaSA+IHI7IHIrKykKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChuID0gdGhpc1tyXTsgbiAmJiBuICE9PSBlOyBuID0gbi5wYXJlbnROb2RlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4ubm9kZVR5cGUgPCAxMSAmJiAoYSA/IGEuaW5kZXgobikgPiAtMSA6IDEgPT09IG4ubm9kZVR5cGUgJiYgWi5maW5kLm1hdGNoZXNTZWxlY3RvcihuLCB0KSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnB1c2gobik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wdXNoU3RhY2soby5sZW5ndGggPiAxID8gWi51bmlxdWUobykgOiBvKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGluZGV4OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPyAic3RyaW5nIiA9PSB0eXBlb2YgdCA/IFYuY2FsbChaKHQpLCB0aGlzWzBdKSA6IFYuY2FsbCh0aGlzLCB0LmpxdWVyeSA/IHRbMF0gOiB0KSA6IHRoaXNbMF0gJiYgdGhpc1swXS5wYXJlbnROb2RlID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnB1c2hTdGFjayhaLnVuaXF1ZShaLm1lcmdlKHRoaXMuZ2V0KCksIFoodCwgZSkpKSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhZGRCYWNrOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKG51bGwgPT0gdCA/IHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIodCkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmVhY2goewogICAgICAgICAgICAgICAgcGFyZW50OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LnBhcmVudE5vZGU7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgJiYgMTEgIT09IGUubm9kZVR5cGUgPyBlIDogbnVsbAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcmVudHM6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWi5kaXIodCwgInBhcmVudE5vZGUiKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhcmVudHNVbnRpbDogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmRpcih0LCAicGFyZW50Tm9kZSIsIG4pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpKHQsICJuZXh0U2libGluZyIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcHJldjogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpKHQsICJwcmV2aW91c1NpYmxpbmciKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG5leHRBbGw6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWi5kaXIodCwgIm5leHRTaWJsaW5nIikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwcmV2QWxsOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFouZGlyKHQsICJwcmV2aW91c1NpYmxpbmciKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG5leHRVbnRpbDogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmRpcih0LCAibmV4dFNpYmxpbmciLCBuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByZXZVbnRpbDogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmRpcih0LCAicHJldmlvdXNTaWJsaW5nIiwgbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzaWJsaW5nczogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLnNpYmxpbmcoKHQucGFyZW50Tm9kZSB8fCB7fSkuZmlyc3RDaGlsZCwgdCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjaGlsZHJlbjogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLnNpYmxpbmcodC5maXJzdENoaWxkKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY29udGVudERvY3VtZW50IHx8IFoubWVyZ2UoW10sIHQuY2hpbGROb2RlcykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgWi5mblt0XSA9IGZ1bmN0aW9uKG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IFoubWFwKHRoaXMsIGUsIG4pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAiVW50aWwiICE9PSB0LnNsaWNlKC01KSAmJiAociA9IG4pLCByICYmICJzdHJpbmciID09IHR5cGVvZiByICYmIChpID0gWi5maWx0ZXIociwgaSkpLCB0aGlzLmxlbmd0aCA+IDEgJiYgKHB0W3RdIHx8IFoudW5pcXVlKGkpLCBmdC50ZXN0KHQpICYmIGkucmV2ZXJzZSgpKSwgdGhpcy5wdXNoU3RhY2soaSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBodCA9IC9cUysvZywKICAgICAgICAgICAgICAgIGR0ID0ge307CiAgICAgICAgICAgIFouQ2FsbGJhY2tzID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdCA9ICJzdHJpbmciID09IHR5cGVvZiB0ID8gZHRbdF0gfHwgbyh0KSA6IFouZXh0ZW5kKHt9LCB0KTsKICAgICAgICAgICAgICAgIHZhciBlLCBuLCByLCBpLCBhLCBzLCB1ID0gW10sCiAgICAgICAgICAgICAgICAgICAgYyA9ICF0Lm9uY2UgJiYgW10sCiAgICAgICAgICAgICAgICAgICAgbCA9IGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gdC5tZW1vcnkgJiYgbywgbiA9ICEwLCBzID0gaSB8fCAwLCBpID0gMCwgYSA9IHUubGVuZ3RoLCByID0gITA7IHUgJiYgYSA+IHM7IHMrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1W3NdLmFwcGx5KG9bMF0sIG9bMV0pID09PSAhMSAmJiB0LnN0b3BPbkZhbHNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAhMSwgdSAmJiAoYyA/IGMubGVuZ3RoICYmIGwoYy5zaGlmdCgpKSA6IGUgPyB1ID0gW10gOiBmLmRpc2FibGUoKSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGYgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgISBmdW5jdGlvbiBvKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWi5lYWNoKGUsIGZ1bmN0aW9uKGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gWi50eXBlKG4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZ1bmN0aW9uIiA9PT0gciA/IHQudW5pcXVlICYmIGYuaGFzKG4pIHx8IHUucHVzaChuKSA6IG4gJiYgbi5sZW5ndGggJiYgInN0cmluZyIgIT09IHIgJiYgbyhuKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oYXJndW1lbnRzKSwgciA/IGEgPSB1Lmxlbmd0aCA6IGUgJiYgKGkgPSBuLCBsKGUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1ICYmIFouZWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobiA9IFouaW5BcnJheShlLCB1LCBuKSkgPiAtMTspIHUuc3BsaWNlKG4sIDEpLCByICYmIChhID49IG4gJiYgYS0tLCBzID49IG4gJiYgcy0tKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgaGFzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA/IFouaW5BcnJheSh0LCB1KSA+IC0xIDogISghdSB8fCAhdS5sZW5ndGgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1ID0gW10sIGEgPSAwLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUgPSBjID0gZSA9IHZvaWQgMCwgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXUKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgbG9jazogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA9IHZvaWQgMCwgZSB8fCBmLmRpc2FibGUoKSwgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBsb2NrZWQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFjCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVXaXRoOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIXUgfHwgbiAmJiAhYyB8fCAoZSA9IGUgfHwgW10sIGUgPSBbdCwgZS5zbGljZSA/IGUuc2xpY2UoKSA6IGVdLCByID8gYy5wdXNoKGUpIDogbChlKSksIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZmlyZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZi5maXJlV2l0aCh0aGlzLCBhcmd1bWVudHMpLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZpcmVkOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIW4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gZgogICAgICAgICAgICB9LCBaLmV4dGVuZCh7CiAgICAgICAgICAgICAgICBEZWZlcnJlZDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgWyJyZXNvbHZlIiwgImRvbmUiLCBaLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwgInJlc29sdmVkIl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbInJlamVjdCIsICJmYWlsIiwgWi5DYWxsYmFja3MoIm9uY2UgbWVtb3J5IiksICJyZWplY3RlZCJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWyJub3RpZnkiLCAicHJvZ3Jlc3MiLCBaLkNhbGxiYWNrcygibWVtb3J5IildCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAicGVuZGluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHdheXM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVuOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWi5EZWZlcnJlZChmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFouZWFjaChlLCBmdW5jdGlvbihlLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IFouaXNGdW5jdGlvbih0W2VdKSAmJiB0W2VdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVtvWzFdXShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGEgJiYgYS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgJiYgWi5pc0Z1bmN0aW9uKHQucHJvbWlzZSkgPyB0LnByb21pc2UoKS5kb25lKG4ucmVzb2x2ZSkuZmFpbChuLnJlamVjdCkucHJvZ3Jlc3Mobi5ub3RpZnkpIDogbltvWzBdICsgIldpdGgiXSh0aGlzID09PSByID8gbi5wcm9taXNlKCkgOiB0aGlzLCBhID8gW3RdIDogYXJndW1lbnRzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIHQgPSBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkucHJvbWlzZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgPyBaLmV4dGVuZCh0LCByKSA6IHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHt9OwogICAgICAgICAgICAgICAgICAgIHJldHVybiByLnBpcGUgPSByLnRoZW4sIFouZWFjaChlLCBmdW5jdGlvbih0LCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gb1syXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBvWzNdOwogICAgICAgICAgICAgICAgICAgICAgICByW29bMV1dID0gYS5hZGQsIHMgJiYgYS5hZGQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gcwogICAgICAgICAgICAgICAgICAgICAgICB9LCBlWzEgXiB0XVsyXS5kaXNhYmxlLCBlWzJdWzJdLmxvY2spLCBpW29bMF1dID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVtvWzBdICsgIldpdGgiXSh0aGlzID09PSBpID8gciA6IHRoaXMsIGFyZ3VtZW50cyksIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgfSwgaVtvWzBdICsgIldpdGgiXSA9IGEuZmlyZVdpdGgKICAgICAgICAgICAgICAgICAgICB9KSwgci5wcm9taXNlKGkpLCB0ICYmIHQuY2FsbChpLCBpKSwgaQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdoZW46IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSwgbiwgciwgaSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBVLmNhbGwoYXJndW1lbnRzKSwKICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG8ubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICBzID0gMSAhPT0gYSB8fCB0ICYmIFouaXNGdW5jdGlvbih0LnByb21pc2UpID8gYSA6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSAxID09PSBzID8gdCA6IFouRGVmZXJyZWQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGZ1bmN0aW9uKHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgblt0XSA9IHRoaXMsIHJbdF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IFUuY2FsbChhcmd1bWVudHMpIDogaSwgciA9PT0gZSA/IHUubm90aWZ5V2l0aChuLCByKSA6IC0tcyB8fCB1LnJlc29sdmVXaXRoKG4sIHIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPiAxKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSBuZXcgQXJyYXkoYSksIG4gPSBuZXcgQXJyYXkoYSksIHIgPSBuZXcgQXJyYXkoYSk7IGEgPiBpOyBpKyspIG9baV0gJiYgWi5pc0Z1bmN0aW9uKG9baV0ucHJvbWlzZSkgPyBvW2ldLnByb21pc2UoKS5kb25lKGMoaSwgciwgbykpLmZhaWwodS5yZWplY3QpLnByb2dyZXNzKGMoaSwgbiwgZSkpIDogLS1zOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBzIHx8IHUucmVzb2x2ZVdpdGgociwgbyksIHUucHJvbWlzZSgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgZ3Q7CiAgICAgICAgICAgIFouZm4ucmVhZHkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gWi5yZWFkeS5wcm9taXNlKCkuZG9uZSh0KSwgdGhpcwogICAgICAgICAgICB9LCBaLmV4dGVuZCh7CiAgICAgICAgICAgICAgICBpc1JlYWR5OiAhMSwKICAgICAgICAgICAgICAgIHJlYWR5V2FpdDogMSwKICAgICAgICAgICAgICAgIGhvbGRSZWFkeTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHQgPyBaLnJlYWR5V2FpdCsrIDogWi5yZWFkeSghMCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFkeTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICh0ID09PSAhMCA/IC0tWi5yZWFkeVdhaXQgOiBaLmlzUmVhZHkpIHx8IChaLmlzUmVhZHkgPSAhMCwgdCAhPT0gITAgJiYgLS1aLnJlYWR5V2FpdCA+IDAgfHwgKGd0LnJlc29sdmVXaXRoKFEsIFtaXSksIFouZm4udHJpZ2dlckhhbmRsZXIgJiYgKFooUSkudHJpZ2dlckhhbmRsZXIoInJlYWR5IiksIFooUSkub2ZmKCJyZWFkeSIpKSkpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLnJlYWR5LnByb21pc2UgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZ3QgfHwgKGd0ID0gWi5EZWZlcnJlZCgpLCAiY29tcGxldGUiID09PSBRLnJlYWR5U3RhdGUgPyBzZXRUaW1lb3V0KFoucmVhZHkpIDogKFEuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsIGEsICExKSwgdC5hZGRFdmVudExpc3RlbmVyKCJsb2FkIiwgYSwgITEpKSksIGd0LnByb21pc2UoZSkKICAgICAgICAgICAgfSwgWi5yZWFkeS5wcm9taXNlKCk7CiAgICAgICAgICAgIHZhciB2dCA9IFouYWNjZXNzID0gZnVuY3Rpb24odCwgZSwgbiwgciwgaSwgbywgYSkgewogICAgICAgICAgICAgICAgdmFyIHMgPSAwLAogICAgICAgICAgICAgICAgICAgIHUgPSB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICBjID0gbnVsbCA9PSBuOwogICAgICAgICAgICAgICAgaWYgKCJvYmplY3QiID09PSBaLnR5cGUobikpIHsKICAgICAgICAgICAgICAgICAgICBpID0gITA7CiAgICAgICAgICAgICAgICAgICAgZm9yIChzIGluIG4pIFouYWNjZXNzKHQsIGUsIHMsIG5bc10sICEwLCBvLCBhKQogICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2b2lkIDAgIT09IHIgJiYgKGkgPSAhMCwgWi5pc0Z1bmN0aW9uKHIpIHx8IChhID0gITApLCBjICYmIChhID8gKGUuY2FsbCh0LCByKSwgZSA9IG51bGwpIDogKGMgPSBlLCBlID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5jYWxsKFoodCksIG4pCiAgICAgICAgICAgICAgICAgICAgfSkpLCBlKSkKICAgICAgICAgICAgICAgICAgICBmb3IgKDsgdSA+IHM7IHMrKykgZSh0W3NdLCBuLCBhID8gciA6IHIuY2FsbCh0W3NdLCBzLCBlKHRbc10sIG4pKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gaSA/IHQgOiBjID8gZS5jYWxsKHQpIDogdSA/IGUodFswXSwgbikgOiBvCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIFouYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiAxID09PSB0Lm5vZGVUeXBlIHx8IDkgPT09IHQubm9kZVR5cGUgfHwgISt0Lm5vZGVUeXBlCiAgICAgICAgICAgIH0sIHMudWlkID0gMSwgcy5hY2NlcHRzID0gWi5hY2NlcHREYXRhLCBzLnByb3RvdHlwZSA9IHsKICAgICAgICAgICAgICAgIGtleTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIGlmICghcy5hY2NlcHRzKHQpKSByZXR1cm4gMDsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHt9LAogICAgICAgICAgICAgICAgICAgICAgICBuID0gdFt0aGlzLmV4cGFuZG9dOwogICAgICAgICAgICAgICAgICAgIGlmICghbikgewogICAgICAgICAgICAgICAgICAgICAgICBuID0gcy51aWQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVbdGhpcy5leHBhbmRvXSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZVt0aGlzLmV4cGFuZG9dID0gbiwgWi5leHRlbmQodCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtuXSB8fCAodGhpcy5jYWNoZVtuXSA9IHt9KSwgbgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByLCBpID0gdGhpcy5rZXkodCksCiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLmNhY2hlW2ldOwogICAgICAgICAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgZSkgb1tlXSA9IG47CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoWi5pc0VtcHR5T2JqZWN0KG8pKSBaLmV4dGVuZCh0aGlzLmNhY2hlW2ldLCBlKTsKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAociBpbiBlKSBvW3JdID0gZVtyXTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5jYWNoZVt0aGlzLmtleSh0KV07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSA/IG4gOiBuW2VdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYWNjZXNzOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSB8fCBlICYmICJzdHJpbmciID09IHR5cGVvZiBlICYmIHZvaWQgMCA9PT0gbiA/IChyID0gdGhpcy5nZXQodCwgZSksIHZvaWQgMCAhPT0gciA/IHIgOiB0aGlzLmdldCh0LCBaLmNhbWVsQ2FzZShlKSkpIDogKHRoaXMuc2V0KHQsIGUsIG4pLCB2b2lkIDAgIT09IG4gPyBuIDogZSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiwgciwgaSwgbyA9IHRoaXMua2V5KHQpLAogICAgICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5jYWNoZVtvXTsKICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSBlKSB0aGlzLmNhY2hlW29dID0ge307CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFouaXNBcnJheShlKSA/IHIgPSBlLmNvbmNhdChlLm1hcChaLmNhbWVsQ2FzZSkpIDogKGkgPSBaLmNhbWVsQ2FzZShlKSwgZSBpbiBhID8gciA9IFtlLCBpXSA6IChyID0gaSwgciA9IHIgaW4gYSA/IFtyXSA6IHIubWF0Y2goaHQpIHx8IFtdKSksIG4gPSByLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IG4tLTspIGRlbGV0ZSBhW3Jbbl1dCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGhhc0RhdGE6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIVouaXNFbXB0eU9iamVjdCh0aGlzLmNhY2hlW3RbdGhpcy5leHBhbmRvXV0gfHwge30pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGlzY2FyZDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHRbdGhpcy5leHBhbmRvXSAmJiBkZWxldGUgdGhpcy5jYWNoZVt0W3RoaXMuZXhwYW5kb11dCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHZhciB5dCA9IG5ldyBzLAogICAgICAgICAgICAgICAgbXQgPSBuZXcgcywKICAgICAgICAgICAgICAgIGJ0ID0gL14oPzpce1tcd1xXXSpcfXxcW1tcd1xXXSpcXSkkLywKICAgICAgICAgICAgICAgIHh0ID0gLyhbQS1aXSkvZzsKICAgICAgICAgICAgWi5leHRlbmQoewogICAgICAgICAgICAgICAgaGFzRGF0YTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBtdC5oYXNEYXRhKHQpIHx8IHl0Lmhhc0RhdGEodCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkYXRhOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG10LmFjY2Vzcyh0LCBlLCBuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbW92ZURhdGE6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBtdC5yZW1vdmUodCwgZSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfZGF0YTogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB5dC5hY2Nlc3ModCwgZSwgbikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfcmVtb3ZlRGF0YTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHl0LnJlbW92ZSh0LCBlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5mbi5leHRlbmQoewogICAgICAgICAgICAgICAgZGF0YTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuLCByLCBpLCBvID0gdGhpc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG8gJiYgby5hdHRyaWJ1dGVzOwogICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIChpID0gbXQuZ2V0KG8pLCAxID09PSBvLm5vZGVUeXBlICYmICF5dC5nZXQobywgImhhc0RhdGFBdHRycyIpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChuID0gYS5sZW5ndGg7IG4tLTspIGFbbl0gJiYgKHIgPSBhW25dLm5hbWUsIDAgPT09IHIuaW5kZXhPZigiZGF0YS0iKSAmJiAociA9IFouY2FtZWxDYXNlKHIuc2xpY2UoNSkpLCB1KG8sIHIsIGlbcl0pKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5dC5zZXQobywgImhhc0RhdGFBdHRycyIsICEwKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiAib2JqZWN0IiA9PSB0eXBlb2YgdCA/IHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbXQuc2V0KHRoaXMsIHQpCiAgICAgICAgICAgICAgICAgICAgfSkgOiB2dCh0aGlzLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuLCByID0gWi5jYW1lbENhc2UodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvICYmIHZvaWQgMCA9PT0gZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPSBtdC5nZXQobywgdCksIHZvaWQgMCAhPT0gbikgcmV0dXJuIG47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9IG10LmdldChvLCByKSwgdm9pZCAwICE9PSBuKSByZXR1cm4gbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID0gdShvLCByLCB2b2lkIDApLCB2b2lkIDAgIT09IG4pIHJldHVybiBuCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG10LmdldCh0aGlzLCByKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG10LnNldCh0aGlzLCByLCBlKSwgLTEgIT09IHQuaW5kZXhPZigiLSIpICYmIHZvaWQgMCAhPT0gbiAmJiBtdC5zZXQodGhpcywgdCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9LCBudWxsLCBlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgITApCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVtb3ZlRGF0YTogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG10LnJlbW92ZSh0aGlzLCB0KQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmV4dGVuZCh7CiAgICAgICAgICAgICAgICBxdWV1ZTogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID8gKGUgPSAoZSB8fCAiZngiKSArICJxdWV1ZSIsIHIgPSB5dC5nZXQodCwgZSksIG4gJiYgKCFyIHx8IFouaXNBcnJheShuKSA/IHIgPSB5dC5hY2Nlc3ModCwgZSwgWi5tYWtlQXJyYXkobikpIDogci5wdXNoKG4pKSwgciB8fCBbXSkgOiB2b2lkIDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkZXF1ZXVlOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgZSA9IGUgfHwgImZ4IjsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFoucXVldWUodCwgZSksCiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG4uc2hpZnQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFouX3F1ZXVlSG9va3ModCwgZSksCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFouZGVxdWV1ZSh0LCBlKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICJpbnByb2dyZXNzIiA9PT0gaSAmJiAoaSA9IG4uc2hpZnQoKSwgci0tKSwgaSAmJiAoImZ4IiA9PT0gZSAmJiBuLnVuc2hpZnQoImlucHJvZ3Jlc3MiKSwgZGVsZXRlIG8uc3RvcCwgaS5jYWxsKHQsIGEsIG8pKSwgIXIgJiYgbyAmJiBvLmVtcHR5LmZpcmUoKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIF9xdWV1ZUhvb2tzOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlICsgInF1ZXVlSG9va3MiOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB5dC5nZXQodCwgbikgfHwgeXQuYWNjZXNzKHQsIG4sIHsKICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHk6IFouQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLmFkZChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHl0LnJlbW92ZSh0LCBbZSArICJxdWV1ZSIsIG5dKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmZuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICBxdWV1ZTogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gMjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gInN0cmluZyIgIT0gdHlwZW9mIHQgJiYgKGUgPSB0LCB0ID0gImZ4Iiwgbi0tKSwgYXJndW1lbnRzLmxlbmd0aCA8IG4gPyBaLnF1ZXVlKHRoaXNbMF0sIHQpIDogdm9pZCAwID09PSBlID8gdGhpcyA6IHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBaLnF1ZXVlKHRoaXMsIHQsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICBaLl9xdWV1ZUhvb2tzKHRoaXMsIHQpLCAiZngiID09PSB0ICYmICJpbnByb2dyZXNzIiAhPT0gblswXSAmJiBaLmRlcXVldWUodGhpcywgdCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRlcXVldWU6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBaLmRlcXVldWUodGhpcywgdCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNsZWFyUXVldWU6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5xdWV1ZSh0IHx8ICJmeCIsIFtdKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByb21pc2U6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiwgciA9IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBaLkRlZmVycmVkKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICBhID0gdGhpcy5sZW5ndGgsCiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tciB8fCBpLnJlc29sdmVXaXRoKG8sIFtvXSkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBmb3IgKCJzdHJpbmciICE9IHR5cGVvZiB0ICYmIChlID0gdCwgdCA9IHZvaWQgMCksIHQgPSB0IHx8ICJmeCI7IGEtLTspIG4gPSB5dC5nZXQob1thXSwgdCArICJxdWV1ZUhvb2tzIiksIG4gJiYgbi5lbXB0eSAmJiAocisrLCBuLmVtcHR5LmFkZChzKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMoKSwgaS5wcm9taXNlKGUpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgd3QgPSAvWystXT8oPzpcZCpcLnwpXGQrKD86W2VFXVsrLV0/XGQrfCkvLnNvdXJjZSwKICAgICAgICAgICAgICAgIF90ID0gWyJUb3AiLCAiUmlnaHQiLCAiQm90dG9tIiwgIkxlZnQiXSwKICAgICAgICAgICAgICAgIGt0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gZSB8fCB0LCAibm9uZSIgPT09IFouY3NzKHQsICJkaXNwbGF5IikgfHwgIVouY29udGFpbnModC5vd25lckRvY3VtZW50LCB0KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFR0ID0gL14oPzpjaGVja2JveHxyYWRpbykkL2k7CiAgICAgICAgICAgICEgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IFEuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLAogICAgICAgICAgICAgICAgICAgIGUgPSB0LmFwcGVuZENoaWxkKFEuY3JlYXRlRWxlbWVudCgiZGl2IikpLAogICAgICAgICAgICAgICAgICAgIG4gPSBRLmNyZWF0ZUVsZW1lbnQoImlucHV0Iik7CiAgICAgICAgICAgICAgICBuLnNldEF0dHJpYnV0ZSgidHlwZSIsICJyYWRpbyIpLCBuLnNldEF0dHJpYnV0ZSgiY2hlY2tlZCIsICJjaGVja2VkIiksIG4uc2V0QXR0cmlidXRlKCJuYW1lIiwgInQiKSwgZS5hcHBlbmRDaGlsZChuKSwgWS5jaGVja0Nsb25lID0gZS5jbG9uZU5vZGUoITApLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmNoZWNrZWQsIGUuaW5uZXJIVE1MID0gIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT4iLCBZLm5vQ2xvbmVDaGVja2VkID0gISFlLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZQogICAgICAgICAgICB9KCk7CiAgICAgICAgICAgIHZhciBFdCA9ICJ1bmRlZmluZWQiOwogICAgICAgICAgICBZLmZvY3VzaW5CdWJibGVzID0gIm9uZm9jdXNpbiIgaW4gdDsKICAgICAgICAgICAgdmFyIGp0ID0gL15rZXkvLAogICAgICAgICAgICAgICAgQ3QgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLywKICAgICAgICAgICAgICAgIFN0ID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLAogICAgICAgICAgICAgICAgQXQgPSAvXihbXi5dKikoPzpcLiguKyl8KSQvOwogICAgICAgICAgICBaLmV2ZW50ID0gewogICAgICAgICAgICAgICAgZ2xvYmFsOiB7fSwKICAgICAgICAgICAgICAgIGFkZDogZnVuY3Rpb24odCwgZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgIHZhciBvLCBhLCBzLCB1LCBjLCBsLCBmLCBwLCBoLCBkLCBnLCB2ID0geXQuZ2V0KHQpOwogICAgICAgICAgICAgICAgICAgIGlmICh2KQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG4uaGFuZGxlciAmJiAobyA9IG4sIG4gPSBvLmhhbmRsZXIsIGkgPSBvLnNlbGVjdG9yKSwgbi5ndWlkIHx8IChuLmd1aWQgPSBaLmd1aWQrKyksICh1ID0gdi5ldmVudHMpIHx8ICh1ID0gdi5ldmVudHMgPSB7fSksIChhID0gdi5oYW5kbGUpIHx8IChhID0gdi5oYW5kbGUgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBaICE9PSBFdCAmJiBaLmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlID8gWi5ldmVudC5kaXNwYXRjaC5hcHBseSh0LCBhcmd1bWVudHMpIDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZSA9IChlIHx8ICIiKS5tYXRjaChodCkgfHwgWyIiXSwgYyA9IGUubGVuZ3RoOyBjLS07KSBzID0gQXQuZXhlYyhlW2NdKSB8fCBbXSwgaCA9IGcgPSBzWzFdLCBkID0gKHNbMl0gfHwgIiIpLnNwbGl0KCIuIikuc29ydCgpLCBoICYmIChmID0gWi5ldmVudC5zcGVjaWFsW2hdIHx8IHt9LCBoID0gKGkgPyBmLmRlbGVnYXRlVHlwZSA6IGYuYmluZFR5cGUpIHx8IGgsIGYgPSBaLmV2ZW50LnNwZWNpYWxbaF0gfHwge30sIGwgPSBaLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ1R5cGU6IGcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcjogbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd1aWQ6IG4uZ3VpZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVlZHNDb250ZXh0OiBpICYmIFouZXhwci5tYXRjaC5uZWVkc0NvbnRleHQudGVzdChpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZTogZC5qb2luKCIuIikKICAgICAgICAgICAgICAgICAgICAgICAgfSwgbyksIChwID0gdVtoXSkgfHwgKHAgPSB1W2hdID0gW10sIHAuZGVsZWdhdGVDb3VudCA9IDAsIGYuc2V0dXAgJiYgZi5zZXR1cC5jYWxsKHQsIHIsIGQsIGEpICE9PSAhMSB8fCB0LmFkZEV2ZW50TGlzdGVuZXIgJiYgdC5hZGRFdmVudExpc3RlbmVyKGgsIGEsICExKSksIGYuYWRkICYmIChmLmFkZC5jYWxsKHQsIGwpLCBsLmhhbmRsZXIuZ3VpZCB8fCAobC5oYW5kbGVyLmd1aWQgPSBuLmd1aWQpKSwgaSA/IHAuc3BsaWNlKHAuZGVsZWdhdGVDb3VudCsrLCAwLCBsKSA6IHAucHVzaChsKSwgWi5ldmVudC5nbG9iYWxbaF0gPSAhMCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKHQsIGUsIG4sIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbywgYSwgcywgdSwgYywgbCwgZiwgcCwgaCwgZCwgZywgdiA9IHl0Lmhhc0RhdGEodCkgJiYgeXQuZ2V0KHQpOwogICAgICAgICAgICAgICAgICAgIGlmICh2ICYmICh1ID0gdi5ldmVudHMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSA9IChlIHx8ICIiKS5tYXRjaChodCkgfHwgWyIiXSwgYyA9IGUubGVuZ3RoOyBjLS07KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPSBBdC5leGVjKGVbY10pIHx8IFtdLCBoID0gZyA9IHNbMV0sIGQgPSAoc1syXSB8fCAiIikuc3BsaXQoIi4iKS5zb3J0KCksIGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGYgPSBaLmV2ZW50LnNwZWNpYWxbaF0gfHwge30sIGggPSAociA/IGYuZGVsZWdhdGVUeXBlIDogZi5iaW5kVHlwZSkgfHwgaCwgcCA9IHVbaF0gfHwgW10sIHMgPSBzWzJdICYmIG5ldyBSZWdFeHAoIihefFxcLikiICsgZC5qb2luKCJcXC4oPzouKlxcLnwpIikgKyAiKFxcLnwkKSIpLCBhID0gbyA9IHAubGVuZ3RoOyBvLS07KSBsID0gcFtvXSwgIWkgJiYgZyAhPT0gbC5vcmlnVHlwZSB8fCBuICYmIG4uZ3VpZCAhPT0gbC5ndWlkIHx8IHMgJiYgIXMudGVzdChsLm5hbWVzcGFjZSkgfHwgciAmJiByICE9PSBsLnNlbGVjdG9yICYmICgiKioiICE9PSByIHx8ICFsLnNlbGVjdG9yKSB8fCAocC5zcGxpY2UobywgMSksIGwuc2VsZWN0b3IgJiYgcC5kZWxlZ2F0ZUNvdW50LS0sIGYucmVtb3ZlICYmIGYucmVtb3ZlLmNhbGwodCwgbCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgJiYgIXAubGVuZ3RoICYmIChmLnRlYXJkb3duICYmIGYudGVhcmRvd24uY2FsbCh0LCBkLCB2LmhhbmRsZSkgIT09ICExIHx8IFoucmVtb3ZlRXZlbnQodCwgaCwgdi5oYW5kbGUpLCBkZWxldGUgdVtoXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaCBpbiB1KSBaLmV2ZW50LnJlbW92ZSh0LCBoICsgZVtjXSwgbiwgciwgITApOwogICAgICAgICAgICAgICAgICAgICAgICBaLmlzRW1wdHlPYmplY3QodSkgJiYgKGRlbGV0ZSB2LmhhbmRsZSwgeXQucmVtb3ZlKHQsICJldmVudHMiKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdHJpZ2dlcjogZnVuY3Rpb24oZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgIHZhciBvLCBhLCBzLCB1LCBjLCBsLCBmLCBwID0gW3IgfHwgUV0sCiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBKLmNhbGwoZSwgInR5cGUiKSA/IGUudHlwZSA6IGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBKLmNhbGwoZSwgIm5hbWVzcGFjZSIpID8gZS5uYW1lc3BhY2Uuc3BsaXQoIi4iKSA6IFtdOwogICAgICAgICAgICAgICAgICAgIGlmIChhID0gcyA9IHIgPSByIHx8IFEsIDMgIT09IHIubm9kZVR5cGUgJiYgOCAhPT0gci5ub2RlVHlwZSAmJiAhU3QudGVzdChoICsgWi5ldmVudC50cmlnZ2VyZWQpICYmIChoLmluZGV4T2YoIi4iKSA+PSAwICYmIChkID0gaC5zcGxpdCgiLiIpLCBoID0gZC5zaGlmdCgpLCBkLnNvcnQoKSksIGMgPSBoLmluZGV4T2YoIjoiKSA8IDAgJiYgIm9uIiArIGgsIGUgPSBlW1ouZXhwYW5kb10gPyBlIDogbmV3IFouRXZlbnQoaCwgIm9iamVjdCIgPT0gdHlwZW9mIGUgJiYgZSksIGUuaXNUcmlnZ2VyID0gaSA/IDIgOiAzLCBlLm5hbWVzcGFjZSA9IGQuam9pbigiLiIpLCBlLm5hbWVzcGFjZV9yZSA9IGUubmFtZXNwYWNlID8gbmV3IFJlZ0V4cCgiKF58XFwuKSIgKyBkLmpvaW4oIlxcLig/Oi4qXFwufCkiKSArICIoXFwufCQpIikgOiBudWxsLCBlLnJlc3VsdCA9IHZvaWQgMCwgZS50YXJnZXQgfHwgKGUudGFyZ2V0ID0gciksIG4gPSBudWxsID09IG4gPyBbZV0gOiBaLm1ha2VBcnJheShuLCBbZV0pLCBmID0gWi5ldmVudC5zcGVjaWFsW2hdIHx8IHt9LCBpIHx8ICFmLnRyaWdnZXIgfHwgZi50cmlnZ2VyLmFwcGx5KHIsIG4pICE9PSAhMSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpICYmICFmLm5vQnViYmxlICYmICFaLmlzV2luZG93KHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHUgPSBmLmRlbGVnYXRlVHlwZSB8fCBoLCBTdC50ZXN0KHUgKyBoKSB8fCAoYSA9IGEucGFyZW50Tm9kZSk7IGE7IGEgPSBhLnBhcmVudE5vZGUpIHAucHVzaChhKSwgcyA9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID09PSAoci5vd25lckRvY3VtZW50IHx8IFEpICYmIHAucHVzaChzLmRlZmF1bHRWaWV3IHx8IHMucGFyZW50V2luZG93IHx8IHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhID0gcFtvKytdKSAmJiAhZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOykgZS50eXBlID0gbyA+IDEgPyB1IDogZi5iaW5kVHlwZSB8fCBoLCBsID0gKHl0LmdldChhLCAiZXZlbnRzIikgfHwge30pW2UudHlwZV0gJiYgeXQuZ2V0KGEsICJoYW5kbGUiKSwgbCAmJiBsLmFwcGx5KGEsIG4pLCBsID0gYyAmJiBhW2NdLCBsICYmIGwuYXBwbHkgJiYgWi5hY2NlcHREYXRhKGEpICYmIChlLnJlc3VsdCA9IGwuYXBwbHkoYSwgbiksIGUucmVzdWx0ID09PSAhMSAmJiBlLnByZXZlbnREZWZhdWx0KCkpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS50eXBlID0gaCwgaSB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8IGYuX2RlZmF1bHQgJiYgZi5fZGVmYXVsdC5hcHBseShwLnBvcCgpLCBuKSAhPT0gITEgfHwgIVouYWNjZXB0RGF0YShyKSB8fCBjICYmIFouaXNGdW5jdGlvbihyW2hdKSAmJiAhWi5pc1dpbmRvdyhyKSAmJiAocyA9IHJbY10sIHMgJiYgKHJbY10gPSBudWxsKSwgWi5ldmVudC50cmlnZ2VyZWQgPSBoLCByW2hdKCksIFouZXZlbnQudHJpZ2dlcmVkID0gdm9pZCAwLCBzICYmIChyW2NdID0gcykpLCBlLnJlc3VsdAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHQgPSBaLmV2ZW50LmZpeCh0KTsKICAgICAgICAgICAgICAgICAgICB2YXIgZSwgbiwgciwgaSwgbywgYSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBzID0gVS5jYWxsKGFyZ3VtZW50cyksCiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSAoeXQuZ2V0KHRoaXMsICJldmVudHMiKSB8fCB7fSlbdC50eXBlXSB8fCBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgYyA9IFouZXZlbnQuc3BlY2lhbFt0LnR5cGVdIHx8IHt9OwogICAgICAgICAgICAgICAgICAgIGlmIChzWzBdID0gdCwgdC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXMsICFjLnByZURpc3BhdGNoIHx8IGMucHJlRGlzcGF0Y2guY2FsbCh0aGlzLCB0KSAhPT0gITEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhID0gWi5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsIHQsIHUpLCBlID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpID0gYVtlKytdKSAmJiAhdC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodC5jdXJyZW50VGFyZ2V0ID0gaS5lbGVtLCBuID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobyA9IGkuaGFuZGxlcnNbbisrXSkgJiYgIXQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKTspKCF0Lm5hbWVzcGFjZV9yZSB8fCB0Lm5hbWVzcGFjZV9yZS50ZXN0KG8ubmFtZXNwYWNlKSkgJiYgKHQuaGFuZGxlT2JqID0gbywgdC5kYXRhID0gby5kYXRhLCByID0gKChaLmV2ZW50LnNwZWNpYWxbby5vcmlnVHlwZV0gfHwge30pLmhhbmRsZSB8fCBvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSwgcyksIHZvaWQgMCAhPT0gciAmJiAodC5yZXN1bHQgPSByKSA9PT0gITEgJiYgKHQucHJldmVudERlZmF1bHQoKSwgdC5zdG9wUHJvcGFnYXRpb24oKSkpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5wb3N0RGlzcGF0Y2ggJiYgYy5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLCB0KSwgdC5yZXN1bHQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgaGFuZGxlcnM6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiwgciwgaSwgbywgYSA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBzID0gZS5kZWxlZ2F0ZUNvdW50LAogICAgICAgICAgICAgICAgICAgICAgICB1ID0gdC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKHMgJiYgdS5ub2RlVHlwZSAmJiAoIXQuYnV0dG9uIHx8ICJjbGljayIgIT09IHQudHlwZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyB1ICE9PSB0aGlzOyB1ID0gdS5wYXJlbnROb2RlIHx8IHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodS5kaXNhYmxlZCAhPT0gITAgfHwgImNsaWNrIiAhPT0gdC50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyID0gW10sIG4gPSAwOyBzID4gbjsgbisrKSBvID0gZVtuXSwgaSA9IG8uc2VsZWN0b3IgKyAiICIsIHZvaWQgMCA9PT0gcltpXSAmJiAocltpXSA9IG8ubmVlZHNDb250ZXh0ID8gWihpLCB0aGlzKS5pbmRleCh1KSA+PSAwIDogWi5maW5kKGksIHRoaXMsIG51bGwsIFt1XSkubGVuZ3RoKSwgcltpXSAmJiByLnB1c2gobyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5sZW5ndGggJiYgYS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbTogdSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnM6IHIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBzIDwgZS5sZW5ndGggJiYgYS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgZWxlbTogdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcnM6IGUuc2xpY2UocykKICAgICAgICAgICAgICAgICAgICB9KSwgYQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByb3BzOiAiYWx0S2V5IGJ1YmJsZXMgY2FuY2VsYWJsZSBjdHJsS2V5IGN1cnJlbnRUYXJnZXQgZXZlbnRQaGFzZSBtZXRhS2V5IHJlbGF0ZWRUYXJnZXQgc2hpZnRLZXkgdGFyZ2V0IHRpbWVTdGFtcCB2aWV3IHdoaWNoIi5zcGxpdCgiICIpLAogICAgICAgICAgICAgICAgZml4SG9va3M6IHt9LAogICAgICAgICAgICAgICAga2V5SG9va3M6IHsKICAgICAgICAgICAgICAgICAgICBwcm9wczogImNoYXIgY2hhckNvZGUga2V5IGtleUNvZGUiLnNwbGl0KCIgIiksCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQud2hpY2ggJiYgKHQud2hpY2ggPSBudWxsICE9IGUuY2hhckNvZGUgPyBlLmNoYXJDb2RlIDogZS5rZXlDb2RlKSwgdAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBtb3VzZUhvb2tzOiB7CiAgICAgICAgICAgICAgICAgICAgcHJvcHM6ICJidXR0b24gYnV0dG9ucyBjbGllbnRYIGNsaWVudFkgb2Zmc2V0WCBvZmZzZXRZIHBhZ2VYIHBhZ2VZIHNjcmVlblggc2NyZWVuWSB0b0VsZW1lbnQiLnNwbGl0KCIgIiksCiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuLCByLCBpLCBvID0gZS5idXR0b247CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQucGFnZVggJiYgbnVsbCAhPSBlLmNsaWVudFggJiYgKG4gPSB0LnRhcmdldC5vd25lckRvY3VtZW50IHx8IFEsIHIgPSBuLmRvY3VtZW50RWxlbWVudCwgaSA9IG4uYm9keSwgdC5wYWdlWCA9IGUuY2xpZW50WCArIChyICYmIHIuc2Nyb2xsTGVmdCB8fCBpICYmIGkuc2Nyb2xsTGVmdCB8fCAwKSAtIChyICYmIHIuY2xpZW50TGVmdCB8fCBpICYmIGkuY2xpZW50TGVmdCB8fCAwKSwgdC5wYWdlWSA9IGUuY2xpZW50WSArIChyICYmIHIuc2Nyb2xsVG9wIHx8IGkgJiYgaS5zY3JvbGxUb3AgfHwgMCkgLSAociAmJiByLmNsaWVudFRvcCB8fCBpICYmIGkuY2xpZW50VG9wIHx8IDApKSwgdC53aGljaCB8fCB2b2lkIDAgPT09IG8gfHwgKHQud2hpY2ggPSAxICYgbyA/IDEgOiAyICYgbyA/IDMgOiA0ICYgbyA/IDIgOiAwKSwgdAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmaXg6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodFtaLmV4cGFuZG9dKSByZXR1cm4gdDsKICAgICAgICAgICAgICAgICAgICB2YXIgZSwgbiwgciwgaSA9IHQudHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLmZpeEhvb2tzW2ldOwogICAgICAgICAgICAgICAgICAgIGZvciAoYSB8fCAodGhpcy5maXhIb29rc1tpXSA9IGEgPSBDdC50ZXN0KGkpID8gdGhpcy5tb3VzZUhvb2tzIDoganQudGVzdChpKSA/IHRoaXMua2V5SG9va3MgOiB7fSksIHIgPSBhLnByb3BzID8gdGhpcy5wcm9wcy5jb25jYXQoYS5wcm9wcykgOiB0aGlzLnByb3BzLCB0ID0gbmV3IFouRXZlbnQobyksIGUgPSByLmxlbmd0aDsgZS0tOykgbiA9IHJbZV0sIHRbbl0gPSBvW25dOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnRhcmdldCB8fCAodC50YXJnZXQgPSBRKSwgMyA9PT0gdC50YXJnZXQubm9kZVR5cGUgJiYgKHQudGFyZ2V0ID0gdC50YXJnZXQucGFyZW50Tm9kZSksIGEuZmlsdGVyID8gYS5maWx0ZXIodCwgbykgOiB0CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3BlY2lhbDogewogICAgICAgICAgICAgICAgICAgIGxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9CdWJibGU6ICEwCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmb2N1czogewogICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzICE9PSBmKCkgJiYgdGhpcy5mb2N1cyA/ICh0aGlzLmZvY3VzKCksICExKSA6IHZvaWQgMAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZVR5cGU6ICJmb2N1c2luIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYmx1cjogewogICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzID09PSBmKCkgJiYgdGhpcy5ibHVyID8gKHRoaXMuYmx1cigpLCAhMSkgOiB2b2lkIDAKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVsZWdhdGVUeXBlOiAiZm9jdXNvdXQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjbGljazogewogICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiY2hlY2tib3giID09PSB0aGlzLnR5cGUgJiYgdGhpcy5jbGljayAmJiBaLm5vZGVOYW1lKHRoaXMsICJpbnB1dCIpID8gKHRoaXMuY2xpY2soKSwgITEpIDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIF9kZWZhdWx0OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWi5ub2RlTmFtZSh0LnRhcmdldCwgImEiKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBiZWZvcmV1bmxvYWQ6IHsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zdERpc3BhdGNoOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgIT09IHQucmVzdWx0ICYmIHQub3JpZ2luYWxFdmVudCAmJiAodC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gdC5yZXN1bHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc2ltdWxhdGU6IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IFouZXh0ZW5kKG5ldyBaLkV2ZW50LCBuLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2ltdWxhdGVkOiAhMCwKICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDoge30KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICByID8gWi5ldmVudC50cmlnZ2VyKGksIG51bGwsIGUpIDogWi5ldmVudC5kaXNwYXRjaC5jYWxsKGUsIGkpLCBpLmlzRGVmYXVsdFByZXZlbnRlZCgpICYmIG4ucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBaLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgdC5yZW1vdmVFdmVudExpc3RlbmVyICYmIHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihlLCBuLCAhMSkKICAgICAgICAgICAgfSwgWi5FdmVudCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgWi5FdmVudCA/ICh0ICYmIHQudHlwZSA/ICh0aGlzLm9yaWdpbmFsRXZlbnQgPSB0LCB0aGlzLnR5cGUgPSB0LnR5cGUsIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gdC5kZWZhdWx0UHJldmVudGVkIHx8IHZvaWQgMCA9PT0gdC5kZWZhdWx0UHJldmVudGVkICYmIHQucmV0dXJuVmFsdWUgPT09ICExID8gYyA6IGwpIDogdGhpcy50eXBlID0gdCwgZSAmJiBaLmV4dGVuZCh0aGlzLCBlKSwgdGhpcy50aW1lU3RhbXAgPSB0ICYmIHQudGltZVN0YW1wIHx8IFoubm93KCksIHZvaWQodGhpc1taLmV4cGFuZG9dID0gITApKSA6IG5ldyBaLkV2ZW50KHQsIGUpCiAgICAgICAgICAgIH0sIFouRXZlbnQucHJvdG90eXBlID0gewogICAgICAgICAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkOiBsLAogICAgICAgICAgICAgICAgaXNQcm9wYWdhdGlvblN0b3BwZWQ6IGwsCiAgICAgICAgICAgICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogbCwKICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMub3JpZ2luYWxFdmVudDsKICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGMsIHQgJiYgdC5wcmV2ZW50RGVmYXVsdCAmJiB0LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5vcmlnaW5hbEV2ZW50OwogICAgICAgICAgICAgICAgICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBjLCB0ICYmIHQuc3RvcFByb3BhZ2F0aW9uICYmIHQuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5vcmlnaW5hbEV2ZW50OwogICAgICAgICAgICAgICAgICAgIHRoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSBjLCB0ICYmIHQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uICYmIHQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksIHRoaXMuc3RvcFByb3BhZ2F0aW9uKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgWi5lYWNoKHsKICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6ICJtb3VzZW92ZXIiLAogICAgICAgICAgICAgICAgbW91c2VsZWF2ZTogIm1vdXNlb3V0IiwKICAgICAgICAgICAgICAgIHBvaW50ZXJlbnRlcjogInBvaW50ZXJvdmVyIiwKICAgICAgICAgICAgICAgIHBvaW50ZXJsZWF2ZTogInBvaW50ZXJvdXQiCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIFouZXZlbnQuc3BlY2lhbFt0XSA9IHsKICAgICAgICAgICAgICAgICAgICBkZWxlZ2F0ZVR5cGU6IGUsCiAgICAgICAgICAgICAgICAgICAgYmluZFR5cGU6IGUsCiAgICAgICAgICAgICAgICAgICAgaGFuZGxlOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuLCByID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0LnJlbGF0ZWRUYXJnZXQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdC5oYW5kbGVPYmo7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoIWkgfHwgaSAhPT0gciAmJiAhWi5jb250YWlucyhyLCBpKSkgJiYgKHQudHlwZSA9IG8ub3JpZ1R5cGUsIG4gPSBvLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgdC50eXBlID0gZSksIG4KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBZLmZvY3VzaW5CdWJibGVzIHx8IFouZWFjaCh7CiAgICAgICAgICAgICAgICBmb2N1czogImZvY3VzaW4iLAogICAgICAgICAgICAgICAgYmx1cjogImZvY3Vzb3V0IgogICAgICAgICAgICB9LCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBaLmV2ZW50LnNpbXVsYXRlKGUsIHQudGFyZ2V0LCBaLmV2ZW50LmZpeCh0KSwgITApCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgWi5ldmVudC5zcGVjaWFsW2VdID0gewogICAgICAgICAgICAgICAgICAgIHNldHVwOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB5dC5hY2Nlc3MociwgZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGkgfHwgci5hZGRFdmVudExpc3RlbmVyKHQsIG4sICEwKSwgeXQuYWNjZXNzKHIsIGUsIChpIHx8IDApICsgMSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHRlYXJkb3duOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB5dC5hY2Nlc3MociwgZSkgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICBpID8geXQuYWNjZXNzKHIsIGUsIGkpIDogKHIucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCBuLCAhMCksIHl0LnJlbW92ZShyLCBlKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmZuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICBvbjogZnVuY3Rpb24odCwgZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgIHZhciBvLCBhOwogICAgICAgICAgICAgICAgICAgIGlmICgib2JqZWN0IiA9PSB0eXBlb2YgdCkgewogICAgICAgICAgICAgICAgICAgICAgICAic3RyaW5nIiAhPSB0eXBlb2YgZSAmJiAobiA9IG4gfHwgZSwgZSA9IHZvaWQgMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYSBpbiB0KSB0aGlzLm9uKGEsIGUsIG4sIHRbYV0sIGkpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBuICYmIG51bGwgPT0gciA/IChyID0gZSwgbiA9IGUgPSB2b2lkIDApIDogbnVsbCA9PSByICYmICgic3RyaW5nIiA9PSB0eXBlb2YgZSA/IChyID0gbiwgbiA9IHZvaWQgMCkgOiAociA9IG4sIG4gPSBlLCBlID0gdm9pZCAwKSksIHIgPT09ICExKSByID0gbDsKICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICghcikgcmV0dXJuIHRoaXM7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IGkgJiYgKG8gPSByLCByID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWigpLm9mZih0KSwgby5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfSwgci5ndWlkID0gby5ndWlkIHx8IChvLmd1aWQgPSBaLmd1aWQrKykpLCB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFouZXZlbnQuYWRkKHRoaXMsIHQsIHIsIG4sIGUpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbmU6IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vbih0LCBlLCBuLCByLCAxKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIG9mZjogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByLCBpOwogICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIHQucHJldmVudERlZmF1bHQgJiYgdC5oYW5kbGVPYmopIHJldHVybiByID0gdC5oYW5kbGVPYmosIFoodC5kZWxlZ2F0ZVRhcmdldCkub2ZmKHIubmFtZXNwYWNlID8gci5vcmlnVHlwZSArICIuIiArIHIubmFtZXNwYWNlIDogci5vcmlnVHlwZSwgci5zZWxlY3Rvciwgci5oYW5kbGVyKSwgdGhpczsKICAgICAgICAgICAgICAgICAgICBpZiAoIm9iamVjdCIgPT0gdHlwZW9mIHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHQpIHRoaXMub2ZmKGksIGUsIHRbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGUgPT09ICExIHx8ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUpICYmIChuID0gZSwgZSA9IHZvaWQgMCksIG4gPT09ICExICYmIChuID0gbCksIHRoaXMuZWFjaChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgWi5ldmVudC5yZW1vdmUodGhpcywgdCwgbiwgZSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHRyaWdnZXI6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBaLmV2ZW50LnRyaWdnZXIodCwgZSwgdGhpcykKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzWzBdOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID8gWi5ldmVudC50cmlnZ2VyKHQsIGUsIG4sICEwKSA6IHZvaWQgMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIE50ID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1x3Ol0rKVtePl0qKVwvPi9naSwKICAgICAgICAgICAgICAgIFJ0ID0gLzwoW1x3Ol0rKS8sCiAgICAgICAgICAgICAgICBJdCA9IC88fCYjP1x3KzsvLAogICAgICAgICAgICAgICAgT3QgPSAvPCg/OnNjcmlwdHxzdHlsZXxsaW5rKS9pLAogICAgICAgICAgICAgICAgTHQgPSAvY2hlY2tlZFxzKig/OltePV18PVxzKi5jaGVja2VkLikvaSwKICAgICAgICAgICAgICAgIER0ID0gL14kfFwvKD86amF2YXxlY21hKXNjcmlwdC9pLAogICAgICAgICAgICAgICAgUHQgPSAvXnRydWVcLyguKikvLAogICAgICAgICAgICAgICAgJHQgPSAvXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2csCiAgICAgICAgICAgICAgICBxdCA9IHsKICAgICAgICAgICAgICAgICAgICBvcHRpb246IFsxLCAiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPiIsICI8L3NlbGVjdD4iXSwKICAgICAgICAgICAgICAgICAgICB0aGVhZDogWzEsICI8dGFibGU+IiwgIjwvdGFibGU+Il0sCiAgICAgICAgICAgICAgICAgICAgY29sOiBbMiwgIjx0YWJsZT48Y29sZ3JvdXA+IiwgIjwvY29sZ3JvdXA+PC90YWJsZT4iXSwKICAgICAgICAgICAgICAgICAgICB0cjogWzIsICI8dGFibGU+PHRib2R5PiIsICI8L3Rib2R5PjwvdGFibGU+Il0sCiAgICAgICAgICAgICAgICAgICAgdGQ6IFszLCAiPHRhYmxlPjx0Ym9keT48dHI+IiwgIjwvdHI+PC90Ym9keT48L3RhYmxlPiJdLAogICAgICAgICAgICAgICAgICAgIF9kZWZhdWx0OiBbMCwgIiIsICIiXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgcXQub3B0Z3JvdXAgPSBxdC5vcHRpb24sIHF0LnRib2R5ID0gcXQudGZvb3QgPSBxdC5jb2xncm91cCA9IHF0LmNhcHRpb24gPSBxdC50aGVhZCwgcXQudGggPSBxdC50ZCwgWi5leHRlbmQoewogICAgICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSwgbywgYSwgcyA9IHQuY2xvbmVOb2RlKCEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgdSA9IFouY29udGFpbnModC5vd25lckRvY3VtZW50LCB0KTsKICAgICAgICAgICAgICAgICAgICBpZiAoIShZLm5vQ2xvbmVDaGVja2VkIHx8IDEgIT09IHQubm9kZVR5cGUgJiYgMTEgIT09IHQubm9kZVR5cGUgfHwgWi5pc1hNTERvYyh0KSkpCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYSA9IHkocyksIG8gPSB5KHQpLCByID0gMCwgaSA9IG8ubGVuZ3RoOyBpID4gcjsgcisrKSBtKG9bcl0sIGFbcl0pOwogICAgICAgICAgICAgICAgICAgIGlmIChlKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAobikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyA9IG8gfHwgeSh0KSwgYSA9IGEgfHwgeShzKSwgciA9IDAsIGkgPSBvLmxlbmd0aDsgaSA+IHI7IHIrKykgdihvW3JdLCBhW3JdKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB2KHQsIHMpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBhID0geShzLCAic2NyaXB0IiksIGEubGVuZ3RoID4gMCAmJiBnKGEsICF1ICYmIHkodCwgInNjcmlwdCIpKSwgcwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJ1aWxkRnJhZ21lbnQ6IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpLCBvLCBhLCBzLCB1LCBjLCBsID0gZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksIGYgPSBbXSwgcCA9IDAsIGggPSB0Lmxlbmd0aDsgaCA+IHA7IHArKykKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPSB0W3BdLCBpIHx8IDAgPT09IGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIm9iamVjdCIgPT09IFoudHlwZShpKSkgWi5tZXJnZShmLCBpLm5vZGVUeXBlID8gW2ldIDogaSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChJdC50ZXN0KGkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobyA9IG8gfHwgbC5hcHBlbmRDaGlsZChlLmNyZWF0ZUVsZW1lbnQoImRpdiIpKSwgYSA9IChSdC5leGVjKGkpIHx8IFsiIiwgIiJdKVsxXS50b0xvd2VyQ2FzZSgpLCBzID0gcXRbYV0gfHwgcXQuX2RlZmF1bHQsIG8uaW5uZXJIVE1MID0gc1sxXSArIGkucmVwbGFjZShOdCwgIjwkMT48LyQyPiIpICsgc1syXSwgYyA9IHNbMF07IGMtLTspIG8gPSBvLmxhc3RDaGlsZDsKICAgICAgICAgICAgICAgICAgICAgICAgWi5tZXJnZShmLCBvLmNoaWxkTm9kZXMpLCBvID0gbC5maXJzdENoaWxkLCBvLnRleHRDb250ZW50ID0gIiIKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZi5wdXNoKGUuY3JlYXRlVGV4dE5vZGUoaSkpOwogICAgICAgICAgICAgICAgICAgIGZvciAobC50ZXh0Q29udGVudCA9ICIiLCBwID0gMDsgaSA9IGZbcCsrXTspCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoIXIgfHwgLTEgPT09IFouaW5BcnJheShpLCByKSkgJiYgKHUgPSBaLmNvbnRhaW5zKGkub3duZXJEb2N1bWVudCwgaSksIG8gPSB5KGwuYXBwZW5kQ2hpbGQoaSksICJzY3JpcHQiKSwgdSAmJiBnKG8pLCBuKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYyA9IDA7IGkgPSBvW2MrK107KSBEdC50ZXN0KGkudHlwZSB8fCAiIikgJiYgbi5wdXNoKGkpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2xlYW5EYXRhOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSwgbiwgciwgaSwgbyA9IFouZXZlbnQuc3BlY2lhbCwgYSA9IDA7IHZvaWQgMCAhPT0gKG4gPSB0W2FdKTsgYSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChaLmFjY2VwdERhdGEobikgJiYgKGkgPSBuW3l0LmV4cGFuZG9dLCBpICYmIChlID0geXQuY2FjaGVbaV0pKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuZXZlbnRzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAociBpbiBlLmV2ZW50cykgb1tyXSA/IFouZXZlbnQucmVtb3ZlKG4sIHIpIDogWi5yZW1vdmVFdmVudChuLCByLCBlLmhhbmRsZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5dC5jYWNoZVtpXSAmJiBkZWxldGUgeXQuY2FjaGVbaV0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbXQuY2FjaGVbblttdC5leHBhbmRvXV0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmZuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICB0ZXh0OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZ0KHRoaXMsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gdCA/IFoudGV4dCh0aGlzKSA6IHRoaXMuZW1wdHkoKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgKDEgPT09IHRoaXMubm9kZVR5cGUgfHwgMTEgPT09IHRoaXMubm9kZVR5cGUgfHwgOSA9PT0gdGhpcy5ub2RlVHlwZSkgJiYgKHRoaXMudGV4dENvbnRlbnQgPSB0KQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0sIG51bGwsIHQsIGFyZ3VtZW50cy5sZW5ndGgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXBwZW5kOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IHRoaXMubm9kZVR5cGUgfHwgMTEgPT09IHRoaXMubm9kZVR5cGUgfHwgOSA9PT0gdGhpcy5ub2RlVHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBwKHRoaXMsIHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5hcHBlbmRDaGlsZCh0KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwcmVwZW5kOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21NYW5pcChhcmd1bWVudHMsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDEgPT09IHRoaXMubm9kZVR5cGUgfHwgMTEgPT09IHRoaXMubm9kZVR5cGUgfHwgOSA9PT0gdGhpcy5ub2RlVHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBwKHRoaXMsIHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5pbnNlcnRCZWZvcmUodCwgZS5maXJzdENoaWxkKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBiZWZvcmU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCB0aGlzKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYWZ0ZXI6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudE5vZGUgJiYgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LCB0aGlzLm5leHRTaWJsaW5nKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiwgciA9IHQgPyBaLmZpbHRlcih0LCB0aGlzKSA6IHRoaXMsIGkgPSAwOyBudWxsICE9IChuID0gcltpXSk7IGkrKykgZSB8fCAxICE9PSBuLm5vZGVUeXBlIHx8IFouY2xlYW5EYXRhKHkobikpLCBuLnBhcmVudE5vZGUgJiYgKGUgJiYgWi5jb250YWlucyhuLm93bmVyRG9jdW1lbnQsIG4pICYmIGcoeShuLCAic2NyaXB0IikpLCBuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobikpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZW1wdHk6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQsIGUgPSAwOyBudWxsICE9ICh0ID0gdGhpc1tlXSk7IGUrKykgMSA9PT0gdC5ub2RlVHlwZSAmJiAoWi5jbGVhbkRhdGEoeSh0LCAhMSkpLCB0LnRleHRDb250ZW50ID0gIiIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY2xvbmU6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IG51bGwgPT0gdCA/ICExIDogdCwgZSA9IG51bGwgPT0gZSA/IHQgOiBlLCB0aGlzLm1hcChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFouY2xvbmUodGhpcywgdCwgZSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGh0bWw6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdnQodGhpcywgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHRoaXNbMF0gfHwge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gdCAmJiAxID09PSBlLm5vZGVUeXBlKSByZXR1cm4gZS5pbm5lckhUTUw7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PSB0eXBlb2YgdCAmJiAhT3QudGVzdCh0KSAmJiAhcXRbKFJ0LmV4ZWModCkgfHwgWyIiLCAiIl0pWzFdLnRvTG93ZXJDYXNlKCldKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdC5yZXBsYWNlKE50LCAiPCQxPjwvJDI+Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByID4gbjsgbisrKSBlID0gdGhpc1tuXSB8fCB7fSwgMSA9PT0gZS5ub2RlVHlwZSAmJiAoWi5jbGVhbkRhdGEoeShlLCAhMSkpLCBlLmlubmVySFRNTCA9IHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChpKSB7fQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgdGhpcy5lbXB0eSgpLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgICAgIH0sIG51bGwsIHQsIGFyZ3VtZW50cy5sZW5ndGgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzWzBdOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbU1hbmlwKGFyZ3VtZW50cywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5wYXJlbnROb2RlLCBaLmNsZWFuRGF0YSh5KHRoaXMpKSwgdCAmJiB0LnJlcGxhY2VDaGlsZChlLCB0aGlzKQogICAgICAgICAgICAgICAgICAgIH0pLCB0ICYmICh0Lmxlbmd0aCB8fCB0Lm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZGV0YWNoOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKHQsICEwKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRvbU1hbmlwOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdCA9IFcuYXBwbHkoW10sIHQpOwogICAgICAgICAgICAgICAgICAgIHZhciBuLCByLCBpLCBvLCBhLCBzLCB1ID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHRoaXMubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICBsID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGMgLSAxLAogICAgICAgICAgICAgICAgICAgICAgICBwID0gdFswXSwKICAgICAgICAgICAgICAgICAgICAgICAgZyA9IFouaXNGdW5jdGlvbihwKTsKICAgICAgICAgICAgICAgICAgICBpZiAoZyB8fCBjID4gMSAmJiAic3RyaW5nIiA9PSB0eXBlb2YgcCAmJiAhWS5jaGVja0Nsb25lICYmIEx0LnRlc3QocCkpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGwuZXEobik7CiAgICAgICAgICAgICAgICAgICAgICAgIGcgJiYgKHRbMF0gPSBwLmNhbGwodGhpcywgbiwgci5odG1sKCkpKSwgci5kb21NYW5pcCh0LCBlKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmIChjICYmIChuID0gWi5idWlsZEZyYWdtZW50KHQsIHRoaXNbMF0ub3duZXJEb2N1bWVudCwgITEsIHRoaXMpLCByID0gbi5maXJzdENoaWxkLCAxID09PSBuLmNoaWxkTm9kZXMubGVuZ3RoICYmIChuID0gciksIHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IFoubWFwKHkobiwgInNjcmlwdCIpLCBoKSwgbyA9IGkubGVuZ3RoOyBjID4gdTsgdSsrKSBhID0gbiwgdSAhPT0gZiAmJiAoYSA9IFouY2xvbmUoYSwgITAsICEwKSwgbyAmJiBaLm1lcmdlKGksIHkoYSwgInNjcmlwdCIpKSksIGUuY2FsbCh0aGlzW3VdLCBhLCB1KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHMgPSBpW2kubGVuZ3RoIC0gMV0ub3duZXJEb2N1bWVudCwgWi5tYXAoaSwgZCksIHUgPSAwOyBvID4gdTsgdSsrKSBhID0gaVt1XSwgRHQudGVzdChhLnR5cGUgfHwgIiIpICYmICF5dC5hY2Nlc3MoYSwgImdsb2JhbEV2YWwiKSAmJiBaLmNvbnRhaW5zKHMsIGEpICYmIChhLnNyYyA/IFouX2V2YWxVcmwgJiYgWi5fZXZhbFVybChhLnNyYykgOiBaLmdsb2JhbEV2YWwoYS50ZXh0Q29udGVudC5yZXBsYWNlKCR0LCAiIikpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5lYWNoKHsKICAgICAgICAgICAgICAgIGFwcGVuZFRvOiAiYXBwZW5kIiwKICAgICAgICAgICAgICAgIHByZXBlbmRUbzogInByZXBlbmQiLAogICAgICAgICAgICAgICAgaW5zZXJ0QmVmb3JlOiAiYmVmb3JlIiwKICAgICAgICAgICAgICAgIGluc2VydEFmdGVyOiAiYWZ0ZXIiLAogICAgICAgICAgICAgICAgcmVwbGFjZUFsbDogInJlcGxhY2VXaXRoIgogICAgICAgICAgICB9LCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICBaLmZuW3RdID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4sIHIgPSBbXSwgaSA9IFoodCksIG8gPSBpLmxlbmd0aCAtIDEsIGEgPSAwOyBvID49IGE7IGErKykgbiA9IGEgPT09IG8gPyB0aGlzIDogdGhpcy5jbG9uZSghMCksIFooaVthXSlbZV0obiksIHouYXBwbHkociwgbi5nZXQoKSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVzaFN0YWNrKHIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgSHQsIE10ID0ge30sCiAgICAgICAgICAgICAgICBGdCA9IC9ebWFyZ2luLywKICAgICAgICAgICAgICAgIEJ0ID0gbmV3IFJlZ0V4cCgiXigiICsgd3QgKyAiKSg/IXB4KVthLXolXSskIiwgImkiKSwKICAgICAgICAgICAgICAgIFV0ID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcub3BlbmVyID8gZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCkgOiB0LmdldENvbXB1dGVkU3R5bGUoZSwgbnVsbCkKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICEgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKCkgewogICAgICAgICAgICAgICAgICAgIGEuc3R5bGUuY3NzVGV4dCA9ICItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7ZGlzcGxheTpibG9jazttYXJnaW4tdG9wOjElO3RvcDoxJTtib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZSIsIGEuaW5uZXJIVE1MID0gIiIsIGkuYXBwZW5kQ2hpbGQobyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LmdldENvbXB1dGVkU3R5bGUoYSwgbnVsbCk7CiAgICAgICAgICAgICAgICAgICAgbiA9ICIxJSIgIT09IGUudG9wLCByID0gIjRweCIgPT09IGUud2lkdGgsIGkucmVtb3ZlQ2hpbGQobykKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBuLCByLCBpID0gUS5kb2N1bWVudEVsZW1lbnQsCiAgICAgICAgICAgICAgICAgICAgbyA9IFEuY3JlYXRlRWxlbWVudCgiZGl2IiksCiAgICAgICAgICAgICAgICAgICAgYSA9IFEuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgICAgICBhLnN0eWxlICYmIChhLnN0eWxlLmJhY2tncm91bmRDbGlwID0gImNvbnRlbnQtYm94IiwgYS5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gIiIsIFkuY2xlYXJDbG9uZVN0eWxlID0gImNvbnRlbnQtYm94IiA9PT0gYS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCwgby5zdHlsZS5jc3NUZXh0ID0gImJvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O21hcmdpbi10b3A6MXB4O3Bvc2l0aW9uOmFic29sdXRlIiwgby5hcHBlbmRDaGlsZChhKSwgdC5nZXRDb21wdXRlZFN0eWxlICYmIFouZXh0ZW5kKFksIHsKICAgICAgICAgICAgICAgICAgICBwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUoKSwgbgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYm94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSByICYmIGUoKSwgcgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlLCBuID0gYS5hcHBlbmRDaGlsZChRLmNyZWF0ZUVsZW1lbnQoImRpdiIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uc3R5bGUuY3NzVGV4dCA9IGEuc3R5bGUuY3NzVGV4dCA9ICItd2Via2l0LWJveC1zaXppbmc6Y29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjAiLCBuLnN0eWxlLm1hcmdpblJpZ2h0ID0gbi5zdHlsZS53aWR0aCA9ICIwIiwgYS5zdHlsZS53aWR0aCA9ICIxcHgiLCBpLmFwcGVuZENoaWxkKG8pLCBlID0gIXBhcnNlRmxvYXQodC5nZXRDb21wdXRlZFN0eWxlKG4sIG51bGwpLm1hcmdpblJpZ2h0KSwgaS5yZW1vdmVDaGlsZChvKSwgYS5yZW1vdmVDaGlsZChuKSwgZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICB9KCksIFouc3dhcCA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgIHZhciBpLCBvLCBhID0ge307CiAgICAgICAgICAgICAgICBmb3IgKG8gaW4gZSkgYVtvXSA9IHQuc3R5bGVbb10sIHQuc3R5bGVbb10gPSBlW29dOwogICAgICAgICAgICAgICAgaSA9IG4uYXBwbHkodCwgciB8fCBbXSk7CiAgICAgICAgICAgICAgICBmb3IgKG8gaW4gZSkgdC5zdHlsZVtvXSA9IGFbb107CiAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgV3QgPSAvXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8sCiAgICAgICAgICAgICAgICB6dCA9IG5ldyBSZWdFeHAoIl4oIiArIHd0ICsgIikoLiopJCIsICJpIiksCiAgICAgICAgICAgICAgICBWdCA9IG5ldyBSZWdFeHAoIl4oWystXSk9KCIgKyB3dCArICIpIiwgImkiKSwKICAgICAgICAgICAgICAgIEd0ID0gewogICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiYWJzb2x1dGUiLAogICAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICJoaWRkZW4iLAogICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJibG9jayIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBYdCA9IHsKICAgICAgICAgICAgICAgICAgICBsZXR0ZXJTcGFjaW5nOiAiMCIsCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogIjQwMCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBKdCA9IFsiV2Via2l0IiwgIk8iLCAiTW96IiwgIm1zIl07CiAgICAgICAgICAgIFouZXh0ZW5kKHsKICAgICAgICAgICAgICAgIGNzc0hvb2tzOiB7CiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogewogICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB3KHQsICJvcGFjaXR5Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICIiID09PSBuID8gIjEiIDogbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNzc051bWJlcjogewogICAgICAgICAgICAgICAgICAgIGNvbHVtbkNvdW50OiAhMCwKICAgICAgICAgICAgICAgICAgICBmaWxsT3BhY2l0eTogITAsCiAgICAgICAgICAgICAgICAgICAgZmxleEdyb3c6ICEwLAogICAgICAgICAgICAgICAgICAgIGZsZXhTaHJpbms6ICEwLAogICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6ICEwLAogICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQ6ICEwLAogICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICEwLAogICAgICAgICAgICAgICAgICAgIG9yZGVyOiAhMCwKICAgICAgICAgICAgICAgICAgICBvcnBoYW5zOiAhMCwKICAgICAgICAgICAgICAgICAgICB3aWRvd3M6ICEwLAogICAgICAgICAgICAgICAgICAgIHpJbmRleDogITAsCiAgICAgICAgICAgICAgICAgICAgem9vbTogITAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjc3NQcm9wczogewogICAgICAgICAgICAgICAgICAgICJmbG9hdCI6ICJjc3NGbG9hdCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdHlsZTogZnVuY3Rpb24odCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIDMgIT09IHQubm9kZVR5cGUgJiYgOCAhPT0gdC5ub2RlVHlwZSAmJiB0LnN0eWxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpLCBvLCBhLCBzID0gWi5jYW1lbENhc2UoZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdC5zdHlsZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBaLmNzc1Byb3BzW3NdIHx8IChaLmNzc1Byb3BzW3NdID0gayh1LCBzKSksIGEgPSBaLmNzc0hvb2tzW2VdIHx8IFouY3NzSG9va3Nbc10sIHZvaWQgMCA9PT0gbiA/IGEgJiYgImdldCIgaW4gYSAmJiB2b2lkIDAgIT09IChpID0gYS5nZXQodCwgITEsIHIpKSA/IGkgOiB1W2VdIDogKG8gPSB0eXBlb2YgbiwgInN0cmluZyIgPT09IG8gJiYgKGkgPSBWdC5leGVjKG4pKSAmJiAobiA9IChpWzFdICsgMSkgKiBpWzJdICsgcGFyc2VGbG9hdChaLmNzcyh0LCBlKSksIG8gPSAibnVtYmVyIiksIG51bGwgIT0gbiAmJiBuID09PSBuICYmICgibnVtYmVyIiAhPT0gbyB8fCBaLmNzc051bWJlcltzXSB8fCAobiArPSAicHgiKSwgWS5jbGVhckNsb25lU3R5bGUgfHwgIiIgIT09IG4gfHwgMCAhPT0gZS5pbmRleE9mKCJiYWNrZ3JvdW5kIikgfHwgKHVbZV0gPSAiaW5oZXJpdCIpLCBhICYmICJzZXQiIGluIGEgJiYgdm9pZCAwID09PSAobiA9IGEuc2V0KHQsIG4sIHIpKSB8fCAodVtlXSA9IG4pKSwgdm9pZCAwKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBjc3M6IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwgbywgYSwgcyA9IFouY2FtZWxDYXNlKGUpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gWi5jc3NQcm9wc1tzXSB8fCAoWi5jc3NQcm9wc1tzXSA9IGsodC5zdHlsZSwgcykpLCBhID0gWi5jc3NIb29rc1tlXSB8fCBaLmNzc0hvb2tzW3NdLCBhICYmICJnZXQiIGluIGEgJiYgKGkgPSBhLmdldCh0LCAhMCwgbikpLCB2b2lkIDAgPT09IGkgJiYgKGkgPSB3KHQsIGUsIHIpKSwgIm5vcm1hbCIgPT09IGkgJiYgZSBpbiBYdCAmJiAoaSA9IFh0W2VdKSwgIiIgPT09IG4gfHwgbiA/IChvID0gcGFyc2VGbG9hdChpKSwgbiA9PT0gITAgfHwgWi5pc051bWVyaWMobykgPyBvIHx8IDAgOiBpKSA6IGkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouZWFjaChbImhlaWdodCIsICJ3aWR0aCJdLCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICBaLmNzc0hvb2tzW2VdID0gewogICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA/IFd0LnRlc3QoWi5jc3ModCwgImRpc3BsYXkiKSkgJiYgMCA9PT0gdC5vZmZzZXRXaWR0aCA/IFouc3dhcCh0LCBHdCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaih0LCBlLCByKQogICAgICAgICAgICAgICAgICAgICAgICB9KSA6IGoodCwgZSwgcikgOiB2b2lkIDAKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odCwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHIgJiYgVXQodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBUKHQsIG4sIHIgPyBFKHQsIGUsIHIsICJib3JkZXItYm94IiA9PT0gWi5jc3ModCwgImJveFNpemluZyIsICExLCBpKSwgaSkgOiAwKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouY3NzSG9va3MubWFyZ2luUmlnaHQgPSBfKFkucmVsaWFibGVNYXJnaW5SaWdodCwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUgPyBaLnN3YXAodCwgewogICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6ICJpbmxpbmUtYmxvY2siCiAgICAgICAgICAgICAgICB9LCB3LCBbdCwgIm1hcmdpblJpZ2h0Il0pIDogdm9pZCAwCiAgICAgICAgICAgIH0pLCBaLmVhY2goewogICAgICAgICAgICAgICAgbWFyZ2luOiAiIiwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICIiLAogICAgICAgICAgICAgICAgYm9yZGVyOiAiV2lkdGgiCiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIFouY3NzSG9va3NbdCArIGVdID0gewogICAgICAgICAgICAgICAgICAgIGV4cGFuZDogZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgaSA9IHt9LCBvID0gInN0cmluZyIgPT0gdHlwZW9mIG4gPyBuLnNwbGl0KCIgIikgOiBbbl07IDQgPiByOyByKyspIGlbdCArIF90W3JdICsgZV0gPSBvW3JdIHx8IG9bciAtIDJdIHx8IG9bMF07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgRnQudGVzdCh0KSB8fCAoWi5jc3NIb29rc1t0ICsgZV0uc2V0ID0gVCkKICAgICAgICAgICAgfSksIFouZm4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgIGNzczogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2dCh0aGlzLCBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByLCBpLCBvID0ge30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFouaXNBcnJheShlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyID0gVXQodCksIGkgPSBlLmxlbmd0aDsgaSA+IGE7IGErKykgb1tlW2FdXSA9IFouY3NzKHQsIGVbYV0sICExLCByKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gbiA/IFouc3R5bGUodCwgZSwgbikgOiBaLmNzcyh0LCBlKQogICAgICAgICAgICAgICAgICAgIH0sIHQsIGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNob3c6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBDKHRoaXMsICEwKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBDKHRoaXMpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJib29sZWFuIiA9PSB0eXBlb2YgdCA/IHQgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpIDogdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBrdCh0aGlzKSA/IFoodGhpcykuc2hvdygpIDogWih0aGlzKS5oaWRlKCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5Ud2VlbiA9IFMsIFMucHJvdG90eXBlID0gewogICAgICAgICAgICAgICAgY29uc3RydWN0b3I6IFMsCiAgICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbih0LCBlLCBuLCByLCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtID0gdCwgdGhpcy5wcm9wID0gbiwgdGhpcy5lYXNpbmcgPSBpIHx8ICJzd2luZyIsIHRoaXMub3B0aW9ucyA9IGUsIHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCksIHRoaXMuZW5kID0gciwgdGhpcy51bml0ID0gbyB8fCAoWi5jc3NOdW1iZXJbbl0gPyAiIiA6ICJweCIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY3VyOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IFMucHJvcEhvb2tzW3RoaXMucHJvcF07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgJiYgdC5nZXQgPyB0LmdldCh0aGlzKSA6IFMucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJ1bjogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlLCBuID0gUy5wcm9wSG9va3NbdGhpcy5wcm9wXTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmR1cmF0aW9uID8gdGhpcy5wb3MgPSBlID0gWi5lYXNpbmdbdGhpcy5lYXNpbmddKHQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvbikgOiB0aGlzLnBvcyA9IGUgPSB0LCB0aGlzLm5vdyA9ICh0aGlzLmVuZCAtIHRoaXMuc3RhcnQpICogZSArIHRoaXMuc3RhcnQsIHRoaXMub3B0aW9ucy5zdGVwICYmIHRoaXMub3B0aW9ucy5zdGVwLmNhbGwodGhpcy5lbGVtLCB0aGlzLm5vdywgdGhpcyksIG4gJiYgbi5zZXQgPyBuLnNldCh0aGlzKSA6IFMucHJvcEhvb2tzLl9kZWZhdWx0LnNldCh0aGlzKSwgdGhpcwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCBTLnByb3RvdHlwZS5pbml0LnByb3RvdHlwZSA9IFMucHJvdG90eXBlLCBTLnByb3BIb29rcyA9IHsKICAgICAgICAgICAgICAgIF9kZWZhdWx0OiB7CiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0LmVsZW1bdC5wcm9wXSB8fCB0LmVsZW0uc3R5bGUgJiYgbnVsbCAhPSB0LmVsZW0uc3R5bGVbdC5wcm9wXSA/IChlID0gWi5jc3ModC5lbGVtLCB0LnByb3AsICIiKSwgZSAmJiAiYXV0byIgIT09IGUgPyBlIDogMCkgOiB0LmVsZW1bdC5wcm9wXQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFouZnguc3RlcFt0LnByb3BdID8gWi5meC5zdGVwW3QucHJvcF0odCkgOiB0LmVsZW0uc3R5bGUgJiYgKG51bGwgIT0gdC5lbGVtLnN0eWxlW1ouY3NzUHJvcHNbdC5wcm9wXV0gfHwgWi5jc3NIb29rc1t0LnByb3BdKSA/IFouc3R5bGUodC5lbGVtLCB0LnByb3AsIHQubm93ICsgdC51bml0KSA6IHQuZWxlbVt0LnByb3BdID0gdC5ub3cKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIFMucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFMucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7CiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB0LmVsZW0ubm9kZVR5cGUgJiYgdC5lbGVtLnBhcmVudE5vZGUgJiYgKHQuZWxlbVt0LnByb3BdID0gdC5ub3cpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sIFouZWFzaW5nID0gewogICAgICAgICAgICAgICAgbGluZWFyOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzd2luZzogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAuNSAtIE1hdGguY29zKHQgKiBNYXRoLlBJKSAvIDIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgWi5meCA9IFMucHJvdG90eXBlLmluaXQsIFouZnguc3RlcCA9IHt9OwogICAgICAgICAgICB2YXIgWXQsIFF0LCBLdCA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLywKICAgICAgICAgICAgICAgIFp0ID0gbmV3IFJlZ0V4cCgiXig/OihbKy1dKT18KSgiICsgd3QgKyAiKShbYS16JV0qKSQiLCAiaSIpLAogICAgICAgICAgICAgICAgdGUgPSAvcXVldWVIb29rcyQvLAogICAgICAgICAgICAgICAgZWUgPSBbSV0sCiAgICAgICAgICAgICAgICBuZSA9IHsKICAgICAgICAgICAgICAgICAgICAiKiI6IFtmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcy5jcmVhdGVUd2Vlbih0LCBlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuLmN1cigpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IFp0LmV4ZWMoZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gaSAmJiBpWzNdIHx8IChaLmNzc051bWJlclt0XSA/ICIiIDogInB4IiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gKFouY3NzTnVtYmVyW3RdIHx8ICJweCIgIT09IG8gJiYgK3IpICYmIFp0LmV4ZWMoWi5jc3Mobi5lbGVtLCB0KSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSAyMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgJiYgYVszXSAhPT0gbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG8gfHwgYVszXSwgaSA9IGkgfHwgW10sIGEgPSArciB8fCAxOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZG8gcyA9IHMgfHwgIi41IiwgYSAvPSBzLCBaLnN0eWxlKG4uZWxlbSwgdCwgYSArIG8pOyB3aGlsZSAocyAhPT0gKHMgPSBuLmN1cigpIC8gcikgJiYgMSAhPT0gcyAmJiAtLXUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgKGEgPSBuLnN0YXJ0ID0gK2EgfHwgK3IgfHwgMCwgbi51bml0ID0gbywgbi5lbmQgPSBpWzFdID8gYSArIChpWzFdICsgMSkgKiBpWzJdIDogK2lbMl0pLCBuCiAgICAgICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIFouQW5pbWF0aW9uID0gWi5leHRlbmQoTCwgewogICAgICAgICAgICAgICAgICAgIHR3ZWVuZXI6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgWi5pc0Z1bmN0aW9uKHQpID8gKGUgPSB0LCB0ID0gWyIqIl0pIDogdCA9IHQuc3BsaXQoIiAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiwgciA9IDAsIGkgPSB0Lmxlbmd0aDsgaSA+IHI7IHIrKykgbiA9IHRbcl0sIG5lW25dID0gbmVbbl0gfHwgW10sIG5lW25dLnVuc2hpZnQoZSkKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHByZWZpbHRlcjogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBlID8gZWUudW5zaGlmdCh0KSA6IGVlLnB1c2godCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwgWi5zcGVlZCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQgJiYgIm9iamVjdCIgPT0gdHlwZW9mIHQgPyBaLmV4dGVuZCh7fSwgdCkgOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBuIHx8ICFuICYmIGUgfHwgWi5pc0Z1bmN0aW9uKHQpICYmIHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiB0LAogICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IG4gJiYgZSB8fCBlICYmICFaLmlzRnVuY3Rpb24oZSkgJiYgZQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZHVyYXRpb24gPSBaLmZ4Lm9mZiA/IDAgOiAibnVtYmVyIiA9PSB0eXBlb2Ygci5kdXJhdGlvbiA/IHIuZHVyYXRpb24gOiByLmR1cmF0aW9uIGluIFouZnguc3BlZWRzID8gWi5meC5zcGVlZHNbci5kdXJhdGlvbl0gOiBaLmZ4LnNwZWVkcy5fZGVmYXVsdCwgKG51bGwgPT0gci5xdWV1ZSB8fCByLnF1ZXVlID09PSAhMCkgJiYgKHIucXVldWUgPSAiZngiKSwgci5vbGQgPSByLmNvbXBsZXRlLCByLmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFouaXNGdW5jdGlvbihyLm9sZCkgJiYgci5vbGQuY2FsbCh0aGlzKSwgci5xdWV1ZSAmJiBaLmRlcXVldWUodGhpcywgci5xdWV1ZSkKICAgICAgICAgICAgICAgICAgICB9LCByCiAgICAgICAgICAgICAgICB9LCBaLmZuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICAgICAgZmFkZVRvOiBmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihrdCkuY3NzKCJvcGFjaXR5IiwgMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogZQogICAgICAgICAgICAgICAgICAgICAgICB9LCB0LCBuLCByKQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZTogZnVuY3Rpb24odCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IFouaXNFbXB0eU9iamVjdCh0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBaLnNwZWVkKGUsIG4sIHIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gTCh0aGlzLCBaLmV4dGVuZCh7fSwgdCksIG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpIHx8IHl0LmdldCh0aGlzLCAiZmluaXNoIikpICYmIGUuc3RvcCghMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLmZpbmlzaCA9IGEsIGkgfHwgby5xdWV1ZSA9PT0gITEgPyB0aGlzLmVhY2goYSkgOiB0aGlzLnF1ZXVlKG8ucXVldWUsIGEpCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBzdG9wOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0LnN0b3A7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdC5zdG9wLCBlKG4pCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAic3RyaW5nIiAhPSB0eXBlb2YgdCAmJiAobiA9IGUsIGUgPSB0LCB0ID0gdm9pZCAwKSwgZSAmJiB0ICE9PSAhMSAmJiB0aGlzLnF1ZXVlKHQgfHwgImZ4IiwgW10pLCB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBudWxsICE9IHQgJiYgdCArICJxdWV1ZUhvb2tzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gWi50aW1lcnMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHl0LmdldCh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpKSBhW2ldICYmIGFbaV0uc3RvcCAmJiByKGFbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiBhKSBhW2ldICYmIGFbaV0uc3RvcCAmJiB0ZS50ZXN0KGkpICYmIHIoYVtpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBvLmxlbmd0aDsgaS0tOykgb1tpXS5lbGVtICE9PSB0aGlzIHx8IG51bGwgIT0gdCAmJiBvW2ldLnF1ZXVlICE9PSB0IHx8IChvW2ldLmFuaW0uc3RvcChuKSwgZSA9ICExLCBvLnNwbGljZShpLCAxKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSB8fCAhbikgJiYgWi5kZXF1ZXVlKHRoaXMsIHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgIT09ICExICYmICh0ID0gdCB8fCAiZngiKSwgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG4gPSB5dC5nZXQodGhpcyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG5bdCArICJxdWV1ZSJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBuW3QgKyAicXVldWVIb29rcyJdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBaLnRpbWVycywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gciA/IHIubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobi5maW5pc2ggPSAhMCwgWi5xdWV1ZSh0aGlzLCB0LCBbXSksIGkgJiYgaS5zdG9wICYmIGkuc3RvcC5jYWxsKHRoaXMsICEwKSwgZSA9IG8ubGVuZ3RoOyBlLS07KSBvW2VdLmVsZW0gPT09IHRoaXMgJiYgb1tlXS5xdWV1ZSA9PT0gdCAmJiAob1tlXS5hbmltLnN0b3AoITApLCBvLnNwbGljZShlLCAxKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSAwOyBhID4gZTsgZSsrKSByW2VdICYmIHJbZV0uZmluaXNoICYmIHJbZV0uZmluaXNoLmNhbGwodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbi5maW5pc2gKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwgWi5lYWNoKFsidG9nZ2xlIiwgInNob3ciLCAiaGlkZSJdLCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBaLmZuW2VdOwogICAgICAgICAgICAgICAgICAgIFouZm5bZV0gPSBmdW5jdGlvbih0LCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgfHwgImJvb2xlYW4iID09IHR5cGVvZiB0ID8gbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdGhpcy5hbmltYXRlKE4oZSwgITApLCB0LCByLCBpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLCBaLmVhY2goewogICAgICAgICAgICAgICAgICAgIHNsaWRlRG93bjogTigic2hvdyIpLAogICAgICAgICAgICAgICAgICAgIHNsaWRlVXA6IE4oImhpZGUiKSwKICAgICAgICAgICAgICAgICAgICBzbGlkZVRvZ2dsZTogTigidG9nZ2xlIiksCiAgICAgICAgICAgICAgICAgICAgZmFkZUluOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6ICJzaG93IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZmFkZU91dDogewogICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAiaGlkZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZhZGVUb2dnbGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogInRvZ2dsZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgWi5mblt0XSA9IGZ1bmN0aW9uKHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0ZShlLCB0LCBuLCByKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLCBaLnRpbWVycyA9IFtdLCBaLmZ4LnRpY2sgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdCwgZSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBaLnRpbWVyczsKICAgICAgICAgICAgICAgICAgICBmb3IgKFl0ID0gWi5ub3coKTsgZSA8IG4ubGVuZ3RoOyBlKyspIHQgPSBuW2VdLCB0KCkgfHwgbltlXSAhPT0gdCB8fCBuLnNwbGljZShlLS0sIDEpOwogICAgICAgICAgICAgICAgICAgIG4ubGVuZ3RoIHx8IFouZnguc3RvcCgpLCBZdCA9IHZvaWQgMAogICAgICAgICAgICAgICAgfSwgWi5meC50aW1lciA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICBaLnRpbWVycy5wdXNoKHQpLCB0KCkgPyBaLmZ4LnN0YXJ0KCkgOiBaLnRpbWVycy5wb3AoKQogICAgICAgICAgICAgICAgfSwgWi5meC5pbnRlcnZhbCA9IDEzLCBaLmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgUXQgfHwgKFF0ID0gc2V0SW50ZXJ2YWwoWi5meC50aWNrLCBaLmZ4LmludGVydmFsKSkKICAgICAgICAgICAgICAgIH0sIFouZnguc3RvcCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoUXQpLCBRdCA9IG51bGwKICAgICAgICAgICAgICAgIH0sIFouZnguc3BlZWRzID0gewogICAgICAgICAgICAgICAgICAgIHNsb3c6IDYwMCwKICAgICAgICAgICAgICAgICAgICBmYXN0OiAyMDAsCiAgICAgICAgICAgICAgICAgICAgX2RlZmF1bHQ6IDQwMAogICAgICAgICAgICAgICAgfSwgWi5mbi5kZWxheSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IFouZnggPyBaLmZ4LnNwZWVkc1t0XSB8fCB0IDogdCwgZSA9IGUgfHwgImZ4IiwgdGhpcy5xdWV1ZShlLCBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gc2V0VGltZW91dChlLCB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgbi5zdG9wID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBRLmNyZWF0ZUVsZW1lbnQoImlucHV0IiksCiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBRLmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpLAogICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5hcHBlbmRDaGlsZChRLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKTsKICAgICAgICAgICAgICAgICAgICB0LnR5cGUgPSAiY2hlY2tib3giLCBZLmNoZWNrT24gPSAiIiAhPT0gdC52YWx1ZSwgWS5vcHRTZWxlY3RlZCA9IG4uc2VsZWN0ZWQsIGUuZGlzYWJsZWQgPSAhMCwgWS5vcHREaXNhYmxlZCA9ICFuLmRpc2FibGVkLCB0ID0gUS5jcmVhdGVFbGVtZW50KCJpbnB1dCIpLCB0LnZhbHVlID0gInQiLCB0LnR5cGUgPSAicmFkaW8iLCBZLnJhZGlvVmFsdWUgPSAidCIgPT09IHQudmFsdWUKICAgICAgICAgICAgICAgIH0oKTsKICAgICAgICAgICAgdmFyIHJlLCBpZSwgb2UgPSBaLmV4cHIuYXR0ckhhbmRsZTsKICAgICAgICAgICAgWi5mbi5leHRlbmQoewogICAgICAgICAgICAgICAgYXR0cjogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2dCh0aGlzLCBaLmF0dHIsIHQsIGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBaLnJlbW92ZUF0dHIodGhpcywgdCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5leHRlbmQoewogICAgICAgICAgICAgICAgYXR0cjogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHZhciByLCBpLCBvID0gdC5ub2RlVHlwZTsKICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiAzICE9PSBvICYmIDggIT09IG8gJiYgMiAhPT0gbykgcmV0dXJuIHR5cGVvZiB0LmdldEF0dHJpYnV0ZSA9PT0gRXQgPyBaLnByb3AodCwgZSwgbikgOiAoMSA9PT0gbyAmJiBaLmlzWE1MRG9jKHQpIHx8IChlID0gZS50b0xvd2VyQ2FzZSgpLCByID0gWi5hdHRySG9va3NbZV0gfHwgKFouZXhwci5tYXRjaC5ib29sLnRlc3QoZSkgPyBpZSA6IHJlKSksIHZvaWQgMCA9PT0gbiA/IHIgJiYgImdldCIgaW4gciAmJiBudWxsICE9PSAoaSA9IHIuZ2V0KHQsIGUpKSA/IGkgOiAoaSA9IFouZmluZC5hdHRyKHQsIGUpLCBudWxsID09IGkgPyB2b2lkIDAgOiBpKSA6IG51bGwgIT09IG4gPyByICYmICJzZXQiIGluIHIgJiYgdm9pZCAwICE9PSAoaSA9IHIuc2V0KHQsIG4sIGUpKSA/IGkgOiAodC5zZXRBdHRyaWJ1dGUoZSwgbiArICIiKSwgbikgOiB2b2lkIFoucmVtb3ZlQXR0cih0LCBlKSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4sIHIsIGkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBvID0gZSAmJiBlLm1hdGNoKGh0KTsKICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiAxID09PSB0Lm5vZGVUeXBlKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgbiA9IG9baSsrXTspIHIgPSBaLnByb3BGaXhbbl0gfHwgbiwgWi5leHByLm1hdGNoLmJvb2wudGVzdChuKSAmJiAodFtyXSA9ICExKSwgdC5yZW1vdmVBdHRyaWJ1dGUobikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBhdHRySG9va3M6IHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFZLnJhZGlvVmFsdWUgJiYgInJhZGlvIiA9PT0gZSAmJiBaLm5vZGVOYW1lKHQsICJpbnB1dCIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LnZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNldEF0dHJpYnV0ZSgidHlwZSIsIGUpLCBuICYmICh0LnZhbHVlID0gbiksIGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIGllID0gewogICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09ICExID8gWi5yZW1vdmVBdHRyKHQsIG4pIDogdC5zZXRBdHRyaWJ1dGUobiwgbiksIG4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgWi5lYWNoKFouZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCgvXHcrL2cpLCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiA9IG9lW2VdIHx8IFouZmluZC5hdHRyOwogICAgICAgICAgICAgICAgb2VbZV0gPSBmdW5jdGlvbih0LCBlLCByKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGksIG87CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgfHwgKG8gPSBvZVtlXSwgb2VbZV0gPSBpLCBpID0gbnVsbCAhPSBuKHQsIGUsIHIpID8gZS50b0xvd2VyQ2FzZSgpIDogbnVsbCwgb2VbZV0gPSBvKSwgaQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdmFyIGFlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaTsKICAgICAgICAgICAgWi5mbi5leHRlbmQoewogICAgICAgICAgICAgICAgcHJvcDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2dCh0aGlzLCBaLnByb3AsIHQsIGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbW92ZVByb3A6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1taLnByb3BGaXhbdF0gfHwgdF0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5leHRlbmQoewogICAgICAgICAgICAgICAgcHJvcEZpeDogewogICAgICAgICAgICAgICAgICAgICJmb3IiOiAiaHRtbEZvciIsCiAgICAgICAgICAgICAgICAgICAgImNsYXNzIjogImNsYXNzTmFtZSIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwcm9wOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIGEgPSB0Lm5vZGVUeXBlOwogICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIDMgIT09IGEgJiYgOCAhPT0gYSAmJiAyICE9PSBhKSByZXR1cm4gbyA9IDEgIT09IGEgfHwgIVouaXNYTUxEb2ModCksIG8gJiYgKGUgPSBaLnByb3BGaXhbZV0gfHwgZSwgaSA9IFoucHJvcEhvb2tzW2VdKSwgdm9pZCAwICE9PSBuID8gaSAmJiAic2V0IiBpbiBpICYmIHZvaWQgMCAhPT0gKHIgPSBpLnNldCh0LCBuLCBlKSkgPyByIDogdFtlXSA9IG4gOiBpICYmICJnZXQiIGluIGkgJiYgbnVsbCAhPT0gKHIgPSBpLmdldCh0LCBlKSkgPyByIDogdFtlXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByb3BIb29rczogewogICAgICAgICAgICAgICAgICAgIHRhYkluZGV4OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaGFzQXR0cmlidXRlKCJ0YWJpbmRleCIpIHx8IGFlLnRlc3QodC5ub2RlTmFtZSkgfHwgdC5ocmVmID8gdC50YWJJbmRleCA6IC0xCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBZLm9wdFNlbGVjdGVkIHx8IChaLnByb3BIb29rcy5zZWxlY3RlZCA9IHsKICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5wYXJlbnROb2RlOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBlICYmIGUucGFyZW50Tm9kZSAmJiBlLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCwgbnVsbAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5lYWNoKFsidGFiSW5kZXgiLCAicmVhZE9ubHkiLCAibWF4TGVuZ3RoIiwgImNlbGxTcGFjaW5nIiwgImNlbGxQYWRkaW5nIiwgInJvd1NwYW4iLCAiY29sU3BhbiIsICJ1c2VNYXAiLCAiZnJhbWVCb3JkZXIiLCAiY29udGVudEVkaXRhYmxlIl0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgWi5wcm9wRml4W3RoaXMudG9Mb3dlckNhc2UoKV0gPSB0aGlzCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgc2UgPSAvW1x0XHJcblxmXS9nOwogICAgICAgICAgICBaLmZuLmV4dGVuZCh7CiAgICAgICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlLCBuLCByLCBpLCBvLCBhLCBzID0gInN0cmluZyIgPT0gdHlwZW9mIHQgJiYgdCwKICAgICAgICAgICAgICAgICAgICAgICAgdSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICBpZiAoWi5pc0Z1bmN0aW9uKHQpKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgWih0aGlzKS5hZGRDbGFzcyh0LmNhbGwodGhpcywgZSwgdGhpcy5jbGFzc05hbWUpKQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGlmIChzKQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSAodCB8fCAiIikubWF0Y2goaHQpIHx8IFtdOyBjID4gdTsgdSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPSB0aGlzW3VdLCByID0gMSA9PT0gbi5ub2RlVHlwZSAmJiAobi5jbGFzc05hbWUgPyAoIiAiICsgbi5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2Uoc2UsICIgIikgOiAiICIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvID0gMDsgaSA9IGVbbysrXTspIHIuaW5kZXhPZigiICIgKyBpICsgIiAiKSA8IDAgJiYgKHIgKz0gaSArICIgIik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IFoudHJpbShyKSwgbi5jbGFzc05hbWUgIT09IGEgJiYgKG4uY2xhc3NOYW1lID0gYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG4sIHIsIGksIG8sIGEsIHMgPSAwID09PSBhcmd1bWVudHMubGVuZ3RoIHx8ICJzdHJpbmciID09IHR5cGVvZiB0ICYmIHQsCiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICBjID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgaWYgKFouaXNGdW5jdGlvbih0KSkgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFoodGhpcykucmVtb3ZlQ2xhc3ModC5jYWxsKHRoaXMsIGUsIHRoaXMuY2xhc3NOYW1lKSkKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBpZiAocykKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gKHQgfHwgIiIpLm1hdGNoKGh0KSB8fCBbXTsgYyA+IHU7IHUrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID0gdGhpc1t1XSwgciA9IDEgPT09IG4ubm9kZVR5cGUgJiYgKG4uY2xhc3NOYW1lID8gKCIgIiArIG4uY2xhc3NOYW1lICsgIiAiKS5yZXBsYWNlKHNlLCAiICIpIDogIiIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvID0gMDsgaSA9IGVbbysrXTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByLmluZGV4T2YoIiAiICsgaSArICIgIikgPj0gMDspIHIgPSByLnJlcGxhY2UoIiAiICsgaSArICIgIiwgIiAiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gdCA/IFoudHJpbShyKSA6ICIiLCBuLmNsYXNzTmFtZSAhPT0gYSAmJiAobi5jbGFzc05hbWUgPSBhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHR5cGVvZiB0OwogICAgICAgICAgICAgICAgICAgIHJldHVybiAiYm9vbGVhbiIgPT0gdHlwZW9mIGUgJiYgInN0cmluZyIgPT09IG4gPyBlID8gdGhpcy5hZGRDbGFzcyh0KSA6IHRoaXMucmVtb3ZlQ2xhc3ModCkgOiBaLmlzRnVuY3Rpb24odCkgPyB0aGlzLmVhY2goZnVuY3Rpb24obikgewogICAgICAgICAgICAgICAgICAgICAgICBaKHRoaXMpLnRvZ2dsZUNsYXNzKHQuY2FsbCh0aGlzLCBuLCB0aGlzLmNsYXNzTmFtZSwgZSksIGUpCiAgICAgICAgICAgICAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgic3RyaW5nIiA9PT0gbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUsIHIgPSAwLCBpID0gWih0aGlzKSwgbyA9IHQubWF0Y2goaHQpIHx8IFtdOyBlID0gb1tyKytdOykgaS5oYXNDbGFzcyhlKSA/IGkucmVtb3ZlQ2xhc3MoZSkgOiBpLmFkZENsYXNzKGUpOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlKG4gPT09IEV0IHx8ICJib29sZWFuIiA9PT0gbikgJiYgKHRoaXMuY2xhc3NOYW1lICYmIHl0LnNldCh0aGlzLCAiX19jbGFzc05hbWVfXyIsIHRoaXMuY2xhc3NOYW1lKSwgdGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB0ID09PSAhMSA/ICIiIDogeXQuZ2V0KHRoaXMsICJfX2NsYXNzTmFtZV9fIikgfHwgIiIpCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAiICIgKyB0ICsgIiAiLCBuID0gMCwgciA9IHRoaXMubGVuZ3RoOyByID4gbjsgbisrKQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA9PT0gdGhpc1tuXS5ub2RlVHlwZSAmJiAoIiAiICsgdGhpc1tuXS5jbGFzc05hbWUgKyAiICIpLnJlcGxhY2Uoc2UsICIgIikuaW5kZXhPZihlKSA+PSAwKSByZXR1cm4gITA7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgdWUgPSAvXHIvZzsKICAgICAgICAgICAgWi5mbi5leHRlbmQoewogICAgICAgICAgICAgICAgdmFsOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG4sIHIsIGkgPSB0aGlzWzBdOyB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gciA9IFouaXNGdW5jdGlvbih0KSwgdGhpcy5lYWNoKGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgMSA9PT0gdGhpcy5ub2RlVHlwZSAmJiAoaSA9IHIgPyB0LmNhbGwodGhpcywgbiwgWih0aGlzKS52YWwoKSkgOiB0LCBudWxsID09IGkgPyBpID0gIiIgOiAibnVtYmVyIiA9PSB0eXBlb2YgaSA/IGkgKz0gIiIgOiBaLmlzQXJyYXkoaSkgJiYgKGkgPSBaLm1hcChpLCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/ICIiIDogdCArICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSksIGUgPSBaLnZhbEhvb2tzW3RoaXMudHlwZV0gfHwgWi52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldLCBlICYmICJzZXQiIGluIGUgJiYgdm9pZCAwICE9PSBlLnNldCh0aGlzLCBpLCAidmFsdWUiKSB8fCAodGhpcy52YWx1ZSA9IGkpKQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkpIHJldHVybiBlID0gWi52YWxIb29rc1tpLnR5cGVdIHx8IFoudmFsSG9va3NbaS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSwgZSAmJiAiZ2V0IiBpbiBlICYmIHZvaWQgMCAhPT0gKG4gPSBlLmdldChpLCAidmFsdWUiKSkgPyBuIDogKG4gPSBpLnZhbHVlLCAic3RyaW5nIiA9PSB0eXBlb2YgbiA/IG4ucmVwbGFjZSh1ZSwgIiIpIDogbnVsbCA9PSBuID8gIiIgOiBuKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouZXh0ZW5kKHsKICAgICAgICAgICAgICAgIHZhbEhvb2tzOiB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBaLmZpbmQuYXR0cih0LCAidmFsdWUiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IGUgPyBlIDogWi50cmltKFoudGV4dCh0KSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSwgbiwgciA9IHQub3B0aW9ucywgaSA9IHQuc2VsZWN0ZWRJbmRleCwgbyA9ICJzZWxlY3Qtb25lIiA9PT0gdC50eXBlIHx8IDAgPiBpLCBhID0gbyA/IG51bGwgOiBbXSwgcyA9IG8gPyBpICsgMSA6IHIubGVuZ3RoLCB1ID0gMCA+IGkgPyBzIDogbyA/IGkgOiAwOyBzID4gdTsgdSsrKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID0gclt1XSwgKG4uc2VsZWN0ZWQgfHwgdSA9PT0gaSkgJiYgKFkub3B0RGlzYWJsZWQgPyAhbi5kaXNhYmxlZCA6IG51bGwgPT09IG4uZ2V0QXR0cmlidXRlKCJkaXNhYmxlZCIpKSAmJiAoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhWi5ub2RlTmFtZShuLnBhcmVudE5vZGUsICJvcHRncm91cCIpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9IFoobikudmFsKCksIG8pIHJldHVybiBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnB1c2goZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4sIHIsIGkgPSB0Lm9wdGlvbnMsIG8gPSBaLm1ha2VBcnJheShlKSwgYSA9IGkubGVuZ3RoOyBhLS07KSByID0gaVthXSwgKHIuc2VsZWN0ZWQgPSBaLmluQXJyYXkoci52YWx1ZSwgbykgPj0gMCkgJiYgKG4gPSAhMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiB8fCAodC5zZWxlY3RlZEluZGV4ID0gLTEpLCBvCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmVhY2goWyJyYWRpbyIsICJjaGVja2JveCJdLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIFoudmFsSG9va3NbdGhpc10gPSB7CiAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmlzQXJyYXkoZSkgPyB0LmNoZWNrZWQgPSBaLmluQXJyYXkoWih0KS52YWwoKSwgZSkgPj0gMCA6IHZvaWQgMAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sIFkuY2hlY2tPbiB8fCAoWi52YWxIb29rc1t0aGlzXS5nZXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IHQuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpID8gIm9uIiA6IHQudmFsdWUKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pLCBaLmVhY2goImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnUiLnNwbGl0KCIgIiksIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIFouZm5bZV0gPSBmdW5jdGlvbih0LCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gdGhpcy5vbihlLCBudWxsLCB0LCBuKSA6IHRoaXMudHJpZ2dlcihlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgWi5mbi5leHRlbmQoewogICAgICAgICAgICAgICAgaG92ZXI6IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb3VzZWVudGVyKHQpLm1vdXNlbGVhdmUoZSB8fCB0KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJpbmQ6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vbih0LCBudWxsLCBlLCBuKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHVuYmluZDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9mZih0LCBudWxsLCBlKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRlbGVnYXRlOiBmdW5jdGlvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oZSwgdCwgbiwgcikKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB1bmRlbGVnYXRlOiBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDEgPT09IGFyZ3VtZW50cy5sZW5ndGggPyB0aGlzLm9mZih0LCAiKioiKSA6IHRoaXMub2ZmKGUsIHQgfHwgIioqIiwgbikKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBjZSA9IFoubm93KCksCiAgICAgICAgICAgICAgICBsZSA9IC9cPy87CiAgICAgICAgICAgIFoucGFyc2VKU09OID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodCArICIiKQogICAgICAgICAgICB9LCBaLnBhcnNlWE1MID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIGUsIG47CiAgICAgICAgICAgICAgICBpZiAoIXQgfHwgInN0cmluZyIgIT0gdHlwZW9mIHQpIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBuID0gbmV3IERPTVBhcnNlciwgZSA9IG4ucGFyc2VGcm9tU3RyaW5nKHQsICJ0ZXh0L3htbCIpCiAgICAgICAgICAgICAgICB9IGNhdGNoIChyKSB7CiAgICAgICAgICAgICAgICAgICAgZSA9IHZvaWQgMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuICghZSB8fCBlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aCkgJiYgWi5lcnJvcigiSW52YWxpZCBYTUw6ICIgKyB0KSwgZQogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgZmUgPSAvIy4qJC8sCiAgICAgICAgICAgICAgICBwZSA9IC8oWz8mXSlfPVteJl0qLywKICAgICAgICAgICAgICAgIGhlID0gL14oLio/KTpbIFx0XSooW15cclxuXSopJC9nbSwKICAgICAgICAgICAgICAgIGRlID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sCiAgICAgICAgICAgICAgICBnZSA9IC9eKD86R0VUfEhFQUQpJC8sCiAgICAgICAgICAgICAgICB2ZSA9IC9eXC9cLy8sCiAgICAgICAgICAgICAgICB5ZSA9IC9eKFtcdy4rLV0rOikoPzpcL1wvKD86W15cLz8jXSpAfCkoW15cLz8jOl0qKSg/OjooXGQrKXwpfCkvLAogICAgICAgICAgICAgICAgbWUgPSB7fSwKICAgICAgICAgICAgICAgIGJlID0ge30sCiAgICAgICAgICAgICAgICB4ZSA9ICIqLyIuY29uY2F0KCIqIiksCiAgICAgICAgICAgICAgICB3ZSA9IHQubG9jYXRpb24uaHJlZiwKICAgICAgICAgICAgICAgIF9lID0geWUuZXhlYyh3ZS50b0xvd2VyQ2FzZSgpKSB8fCBbXTsKICAgICAgICAgICAgWi5leHRlbmQoewogICAgICAgICAgICAgICAgYWN0aXZlOiAwLAogICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiB7fSwKICAgICAgICAgICAgICAgIGV0YWc6IHt9LAogICAgICAgICAgICAgICAgYWpheFNldHRpbmdzOiB7CiAgICAgICAgICAgICAgICAgICAgdXJsOiB3ZSwKICAgICAgICAgICAgICAgICAgICB0eXBlOiAiR0VUIiwKICAgICAgICAgICAgICAgICAgICBpc0xvY2FsOiBkZS50ZXN0KF9lWzFdKSwKICAgICAgICAgICAgICAgICAgICBnbG9iYWw6ICEwLAogICAgICAgICAgICAgICAgICAgIHByb2Nlc3NEYXRhOiAhMCwKICAgICAgICAgICAgICAgICAgICBhc3luYzogITAsCiAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLTgiLAogICAgICAgICAgICAgICAgICAgIGFjY2VwdHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIioiOiB4ZSwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogInRleHQvcGxhaW4iLAogICAgICAgICAgICAgICAgICAgICAgICBodG1sOiAidGV4dC9odG1sIiwKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOiAiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGpzb246ICJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjb250ZW50czogewogICAgICAgICAgICAgICAgICAgICAgICB4bWw6IC94bWwvLAogICAgICAgICAgICAgICAgICAgICAgICBodG1sOiAvaHRtbC8sCiAgICAgICAgICAgICAgICAgICAgICAgIGpzb246IC9qc29uLwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VGaWVsZHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgeG1sOiAicmVzcG9uc2VYTUwiLAogICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAicmVzcG9uc2VUZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAganNvbjogInJlc3BvbnNlSlNPTiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGNvbnZlcnRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIiogdGV4dCI6IFN0cmluZywKICAgICAgICAgICAgICAgICAgICAgICAgInRleHQgaHRtbCI6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICAidGV4dCBqc29uIjogWi5wYXJzZUpTT04sCiAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXh0IHhtbCI6IFoucGFyc2VYTUwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZsYXRPcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogITAsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6ICEwCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFqYXhTZXR1cDogZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBlID8gJCgkKHQsIFouYWpheFNldHRpbmdzKSwgZSkgOiAkKFouYWpheFNldHRpbmdzLCB0KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGFqYXhQcmVmaWx0ZXI6IEQobWUpLAogICAgICAgICAgICAgICAgYWpheFRyYW5zcG9ydDogRChiZSksCiAgICAgICAgICAgICAgICBhamF4OiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbih0LCBlLCBuLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1LCBsLCB5LCBtLCB4LCBfID0gZTsKICAgICAgICAgICAgICAgICAgICAgICAgMiAhPT0gYiAmJiAoYiA9IDIsIHMgJiYgY2xlYXJUaW1lb3V0KHMpLCByID0gdm9pZCAwLCBvID0gYSB8fCAiIiwgdy5yZWFkeVN0YXRlID0gdCA+IDAgPyA0IDogMCwgdSA9IHQgPj0gMjAwICYmIDMwMCA+IHQgfHwgMzA0ID09PSB0LCBuICYmIChtID0gcShmLCB3LCBuKSksIG0gPSBIKGYsIG0sIHcsIHUpLCB1ID8gKGYuaWZNb2RpZmllZCAmJiAoeCA9IHcuZ2V0UmVzcG9uc2VIZWFkZXIoIkxhc3QtTW9kaWZpZWQiKSwgeCAmJiAoWi5sYXN0TW9kaWZpZWRbaV0gPSB4KSwgeCA9IHcuZ2V0UmVzcG9uc2VIZWFkZXIoImV0YWciKSwgeCAmJiAoWi5ldGFnW2ldID0geCkpLCAyMDQgPT09IHQgfHwgIkhFQUQiID09PSBmLnR5cGUgPyBfID0gIm5vY29udGVudCIgOiAzMDQgPT09IHQgPyBfID0gIm5vdG1vZGlmaWVkIiA6IChfID0gbS5zdGF0ZSwgbCA9IG0uZGF0YSwgeSA9IG0uZXJyb3IsIHUgPSAheSkpIDogKHkgPSBfLCAodCB8fCAhXykgJiYgKF8gPSAiZXJyb3IiLCAwID4gdCAmJiAodCA9IDApKSksIHcuc3RhdHVzID0gdCwgdy5zdGF0dXNUZXh0ID0gKGUgfHwgXykgKyAiIiwgdSA/IGQucmVzb2x2ZVdpdGgocCwgW2wsIF8sIHddKSA6IGQucmVqZWN0V2l0aChwLCBbdywgXywgeV0pLCB3LnN0YXR1c0NvZGUodiksIHYgPSB2b2lkIDAsIGMgJiYgaC50cmlnZ2VyKHUgPyAiYWpheFN1Y2Nlc3MiIDogImFqYXhFcnJvciIsIFt3LCBmLCB1ID8gbCA6IHldKSwgZy5maXJlV2l0aChwLCBbdywgX10pLCBjICYmIChoLnRyaWdnZXIoImFqYXhDb21wbGV0ZSIsIFt3LCBmXSksIC0tWi5hY3RpdmUgfHwgWi5ldmVudC50cmlnZ2VyKCJhamF4U3RvcCIpKSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgKGUgPSB0LCB0ID0gdm9pZCAwKSwgZSA9IGUgfHwge307CiAgICAgICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIGEsIHMsIHUsIGMsIGwsIGYgPSBaLmFqYXhTZXR1cCh7fSwgZSksCiAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBmLmNvbnRleHQgfHwgZiwKICAgICAgICAgICAgICAgICAgICAgICAgaCA9IGYuY29udGV4dCAmJiAocC5ub2RlVHlwZSB8fCBwLmpxdWVyeSkgPyBaKHApIDogWi5ldmVudCwKICAgICAgICAgICAgICAgICAgICAgICAgZCA9IFouRGVmZXJyZWQoKSwKICAgICAgICAgICAgICAgICAgICAgICAgZyA9IFouQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLAogICAgICAgICAgICAgICAgICAgICAgICB2ID0gZi5zdGF0dXNDb2RlIHx8IHt9LAogICAgICAgICAgICAgICAgICAgICAgICB5ID0ge30sCiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSB7fSwKICAgICAgICAgICAgICAgICAgICAgICAgYiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHggPSAiY2FuY2VsZWQiLAogICAgICAgICAgICAgICAgICAgICAgICB3ID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZHlTdGF0ZTogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDIgPT09IGIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChhID0ge307IGUgPSBoZS5leGVjKG8pOykgYVtlWzFdLnRvTG93ZXJDYXNlKCldID0gZVsyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGFbdC50b0xvd2VyQ2FzZSgpXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBlID8gbnVsbCA6IGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyID09PSBiID8gbyA6IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgfHwgKHQgPSBtW25dID0gbVtuXSB8fCB0LCB5W3RdID0gZSksIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIgfHwgKGYubWltZVR5cGUgPSB0KSwgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKDIgPiBiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChlIGluIHQpIHZbZV0gPSBbdltlXSwgdFtlXV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Ugdy5hbHdheXModFt3LnN0YXR1c10pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQgfHwgeDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciAmJiByLmFib3J0KGUpLCBuKDAsIGUpLCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgaWYgKGQucHJvbWlzZSh3KS5jb21wbGV0ZSA9IGcuYWRkLCB3LnN1Y2Nlc3MgPSB3LmRvbmUsIHcuZXJyb3IgPSB3LmZhaWwsIGYudXJsID0gKCh0IHx8IGYudXJsIHx8IHdlKSArICIiKS5yZXBsYWNlKGZlLCAiIikucmVwbGFjZSh2ZSwgX2VbMV0gKyAiLy8iKSwgZi50eXBlID0gZS5tZXRob2QgfHwgZS50eXBlIHx8IGYubWV0aG9kIHx8IGYudHlwZSwgZi5kYXRhVHlwZXMgPSBaLnRyaW0oZi5kYXRhVHlwZSB8fCAiKiIpLnRvTG93ZXJDYXNlKCkubWF0Y2goaHQpIHx8IFsiIl0sIG51bGwgPT0gZi5jcm9zc0RvbWFpbiAmJiAodSA9IHllLmV4ZWMoZi51cmwudG9Mb3dlckNhc2UoKSksIGYuY3Jvc3NEb21haW4gPSAhKCF1IHx8IHVbMV0gPT09IF9lWzFdICYmIHVbMl0gPT09IF9lWzJdICYmICh1WzNdIHx8ICgiaHR0cDoiID09PSB1WzFdID8gIjgwIiA6ICI0NDMiKSkgPT09IChfZVszXSB8fCAoImh0dHA6IiA9PT0gX2VbMV0gPyAiODAiIDogIjQ0MyIpKSkpLCBmLmRhdGEgJiYgZi5wcm9jZXNzRGF0YSAmJiAic3RyaW5nIiAhPSB0eXBlb2YgZi5kYXRhICYmIChmLmRhdGEgPSBaLnBhcmFtKGYuZGF0YSwgZi50cmFkaXRpb25hbCkpLCBQKG1lLCBmLCBlLCB3KSwgMiA9PT0gYikgcmV0dXJuIHc7CiAgICAgICAgICAgICAgICAgICAgYyA9IFouZXZlbnQgJiYgZi5nbG9iYWwsIGMgJiYgMCA9PT0gWi5hY3RpdmUrKyAmJiBaLmV2ZW50LnRyaWdnZXIoImFqYXhTdGFydCIpLCBmLnR5cGUgPSBmLnR5cGUudG9VcHBlckNhc2UoKSwgZi5oYXNDb250ZW50ID0gIWdlLnRlc3QoZi50eXBlKSwgaSA9IGYudXJsLCBmLmhhc0NvbnRlbnQgfHwgKGYuZGF0YSAmJiAoaSA9IGYudXJsICs9IChsZS50ZXN0KGkpID8gIiYiIDogIj8iKSArIGYuZGF0YSwgZGVsZXRlIGYuZGF0YSksIGYuY2FjaGUgPT09ICExICYmIChmLnVybCA9IHBlLnRlc3QoaSkgPyBpLnJlcGxhY2UocGUsICIkMV89IiArIGNlKyspIDogaSArIChsZS50ZXN0KGkpID8gIiYiIDogIj8iKSArICJfPSIgKyBjZSsrKSksIGYuaWZNb2RpZmllZCAmJiAoWi5sYXN0TW9kaWZpZWRbaV0gJiYgdy5zZXRSZXF1ZXN0SGVhZGVyKCJJZi1Nb2RpZmllZC1TaW5jZSIsIFoubGFzdE1vZGlmaWVkW2ldKSwgWi5ldGFnW2ldICYmIHcuc2V0UmVxdWVzdEhlYWRlcigiSWYtTm9uZS1NYXRjaCIsIFouZXRhZ1tpXSkpLCAoZi5kYXRhICYmIGYuaGFzQ29udGVudCAmJiBmLmNvbnRlbnRUeXBlICE9PSAhMSB8fCBlLmNvbnRlbnRUeXBlKSAmJiB3LnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsIGYuY29udGVudFR5cGUpLCB3LnNldFJlcXVlc3RIZWFkZXIoIkFjY2VwdCIsIGYuZGF0YVR5cGVzWzBdICYmIGYuYWNjZXB0c1tmLmRhdGFUeXBlc1swXV0gPyBmLmFjY2VwdHNbZi5kYXRhVHlwZXNbMF1dICsgKCIqIiAhPT0gZi5kYXRhVHlwZXNbMF0gPyAiLCAiICsgeGUgKyAiOyBxPTAuMDEiIDogIiIpIDogZi5hY2NlcHRzWyIqIl0pOwogICAgICAgICAgICAgICAgICAgIGZvciAobCBpbiBmLmhlYWRlcnMpIHcuc2V0UmVxdWVzdEhlYWRlcihsLCBmLmhlYWRlcnNbbF0pOwogICAgICAgICAgICAgICAgICAgIGlmIChmLmJlZm9yZVNlbmQgJiYgKGYuYmVmb3JlU2VuZC5jYWxsKHAsIHcsIGYpID09PSAhMSB8fCAyID09PSBiKSkgcmV0dXJuIHcuYWJvcnQoKTsKICAgICAgICAgICAgICAgICAgICB4ID0gImFib3J0IjsKICAgICAgICAgICAgICAgICAgICBmb3IgKGwgaW4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IDEKICAgICAgICAgICAgICAgICAgICAgICAgfSkgd1tsXShmW2xdKTsKICAgICAgICAgICAgICAgICAgICBpZiAociA9IFAoYmUsIGYsIGUsIHcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHcucmVhZHlTdGF0ZSA9IDEsIGMgJiYgaC50cmlnZ2VyKCJhamF4U2VuZCIsIFt3LCBmXSksIGYuYXN5bmMgJiYgZi50aW1lb3V0ID4gMCAmJiAocyA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LmFib3J0KCJ0aW1lb3V0IikKICAgICAgICAgICAgICAgICAgICAgICAgfSwgZi50aW1lb3V0KSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0gMSwgci5zZW5kKHksIG4pCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKF8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKDIgPiBiKSkgdGhyb3cgXzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4oLTEsIF8pCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbigtMSwgIk5vIFRyYW5zcG9ydCIpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB3CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZ2V0SlNPTjogZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmdldCh0LCBlLCBuLCAianNvbiIpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZ2V0U2NyaXB0OiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFouZ2V0KHQsIHZvaWQgMCwgZSwgInNjcmlwdCIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmVhY2goWyJnZXQiLCAicG9zdCJdLCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICBaW2VdID0gZnVuY3Rpb24odCwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmlzRnVuY3Rpb24obikgJiYgKGkgPSBpIHx8IHIsIHIgPSBuLCBuID0gdm9pZCAwKSwgWi5hamF4KHsKICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB0LAogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBlLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogaSwKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbiwKICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogcgogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLl9ldmFsVXJsID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFouYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiB0LAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAic2NyaXB0IiwKICAgICAgICAgICAgICAgICAgICBhc3luYzogITEsCiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsOiAhMSwKICAgICAgICAgICAgICAgICAgICAidGhyb3dzIjogITAKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0sIFouZm4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgIHdyYXBBbGw6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gWi5pc0Z1bmN0aW9uKHQpID8gdGhpcy5lYWNoKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgWih0aGlzKS53cmFwQWxsKHQuY2FsbCh0aGlzLCBlKSkKICAgICAgICAgICAgICAgICAgICB9KSA6ICh0aGlzWzBdICYmIChlID0gWih0LCB0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSwgdGhpc1swXS5wYXJlbnROb2RlICYmIGUuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLCBlLm1hcChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXM7IHQuZmlyc3RFbGVtZW50Q2hpbGQ7KSB0ID0gdC5maXJzdEVsZW1lbnRDaGlsZDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmQodGhpcykpLCB0aGlzKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdyYXBJbm5lcjogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmlzRnVuY3Rpb24odCkgPyB0aGlzLmVhY2goZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICBaKHRoaXMpLndyYXBJbm5lcih0LmNhbGwodGhpcywgZSkpCiAgICAgICAgICAgICAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gWih0aGlzKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlLmNvbnRlbnRzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG4ubGVuZ3RoID8gbi53cmFwQWxsKHQpIDogZS5hcHBlbmQodCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdyYXA6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFouaXNGdW5jdGlvbih0KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgWih0aGlzKS53cmFwQWxsKGUgPyB0LmNhbGwodGhpcywgbikgOiB0KQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgdW53cmFwOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBaLm5vZGVOYW1lKHRoaXMsICJib2R5IikgfHwgWih0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpCiAgICAgICAgICAgICAgICAgICAgfSkuZW5kKCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouZXhwci5maWx0ZXJzLmhpZGRlbiA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0Lm9mZnNldFdpZHRoIDw9IDAgJiYgdC5vZmZzZXRIZWlnaHQgPD0gMAogICAgICAgICAgICB9LCBaLmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuICFaLmV4cHIuZmlsdGVycy5oaWRkZW4odCkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIGtlID0gLyUyMC9nLAogICAgICAgICAgICAgICAgVGUgPSAvXFtcXSQvLAogICAgICAgICAgICAgICAgRWUgPSAvXHI/XG4vZywKICAgICAgICAgICAgICAgIGplID0gL14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLAogICAgICAgICAgICAgICAgQ2UgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7CiAgICAgICAgICAgIFoucGFyYW0gPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICB2YXIgbiwgciA9IFtdLAogICAgICAgICAgICAgICAgICAgIGkgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBaLmlzRnVuY3Rpb24oZSkgPyBlKCkgOiBudWxsID09IGUgPyAiIiA6IGUsIHJbci5sZW5ndGhdID0gZW5jb2RlVVJJQ29tcG9uZW50KHQpICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KGUpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGUgJiYgKGUgPSBaLmFqYXhTZXR0aW5ncyAmJiBaLmFqYXhTZXR0aW5ncy50cmFkaXRpb25hbCksIFouaXNBcnJheSh0KSB8fCB0LmpxdWVyeSAmJiAhWi5pc1BsYWluT2JqZWN0KHQpKSBaLmVhY2godCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgaSh0aGlzLm5hbWUsIHRoaXMudmFsdWUpCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBmb3IgKG4gaW4gdCkgTShuLCB0W25dLCBlLCBpKTsKICAgICAgICAgICAgICAgIHJldHVybiByLmpvaW4oIiYiKS5yZXBsYWNlKGtlLCAiKyIpCiAgICAgICAgICAgIH0sIFouZm4uZXh0ZW5kKHsKICAgICAgICAgICAgICAgIHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFoucGFyYW0odGhpcy5zZXJpYWxpemVBcnJheSgpKQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gWi5wcm9wKHRoaXMsICJlbGVtZW50cyIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA/IFoubWFrZUFycmF5KHQpIDogdGhpcwogICAgICAgICAgICAgICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnR5cGU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWUgJiYgIVoodGhpcykuaXMoIjpkaXNhYmxlZCIpICYmIENlLnRlc3QodGhpcy5ub2RlTmFtZSkgJiYgIWplLnRlc3QodCkgJiYgKHRoaXMuY2hlY2tlZCB8fCAhVHQudGVzdCh0KSkKICAgICAgICAgICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFoodGhpcykudmFsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IG4gPyBudWxsIDogWi5pc0FycmF5KG4pID8gWi5tYXAobiwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBlLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHQucmVwbGFjZShFZSwgIlxyXG4iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KSA6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGUubmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBuLnJlcGxhY2UoRWUsICJcclxuIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLmdldCgpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdAogICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge30KICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIFNlID0gMCwKICAgICAgICAgICAgICAgIEFlID0ge30sCiAgICAgICAgICAgICAgICBOZSA9IHsKICAgICAgICAgICAgICAgICAgICAwOiAyMDAsCiAgICAgICAgICAgICAgICAgICAgMTIyMzogMjA0CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgUmUgPSBaLmFqYXhTZXR0aW5ncy54aHIoKTsKICAgICAgICAgICAgdC5hdHRhY2hFdmVudCAmJiB0LmF0dGFjaEV2ZW50KCJvbnVubG9hZCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgdCBpbiBBZSkgQWVbdF0oKQogICAgICAgICAgICB9KSwgWS5jb3JzID0gISFSZSAmJiAid2l0aENyZWRlbnRpYWxzIiBpbiBSZSwgWS5hamF4ID0gUmUgPSAhIVJlLCBaLmFqYXhUcmFuc3BvcnQoZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgdmFyIGU7CiAgICAgICAgICAgICAgICByZXR1cm4gWS5jb3JzIHx8IFJlICYmICF0LmNyb3NzRG9tYWluID8gewogICAgICAgICAgICAgICAgICAgIHNlbmQ6IGZ1bmN0aW9uKG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGksIG8gPSB0LnhocigpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9ICsrU2U7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLm9wZW4odC50eXBlLCB0LnVybCwgdC5hc3luYywgdC51c2VybmFtZSwgdC5wYXNzd29yZCksIHQueGhyRmllbGRzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpIGluIHQueGhyRmllbGRzKSBvW2ldID0gdC54aHJGaWVsZHNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIHQubWltZVR5cGUgJiYgby5vdmVycmlkZU1pbWVUeXBlICYmIG8ub3ZlcnJpZGVNaW1lVHlwZSh0Lm1pbWVUeXBlKSwgdC5jcm9zc0RvbWFpbiB8fCBuWyJYLVJlcXVlc3RlZC1XaXRoIl0gfHwgKG5bIlgtUmVxdWVzdGVkLVdpdGgiXSA9ICJYTUxIdHRwUmVxdWVzdCIpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgaW4gbikgby5zZXRSZXF1ZXN0SGVhZGVyKGksIG5baV0pOwogICAgICAgICAgICAgICAgICAgICAgICBlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgKGRlbGV0ZSBBZVthXSwgZSA9IG8ub25sb2FkID0gby5vbmVycm9yID0gbnVsbCwgImFib3J0IiA9PT0gdCA/IG8uYWJvcnQoKSA6ICJlcnJvciIgPT09IHQgPyByKG8uc3RhdHVzLCBvLnN0YXR1c1RleHQpIDogcihOZVtvLnN0YXR1c10gfHwgby5zdGF0dXMsIG8uc3RhdHVzVGV4dCwgInN0cmluZyIgPT0gdHlwZW9mIG8ucmVzcG9uc2VUZXh0ID8gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBvLnJlc3BvbnNlVGV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB2b2lkIDAsIG8uZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LCBvLm9ubG9hZCA9IGUoKSwgby5vbmVycm9yID0gZSgiZXJyb3IiKSwgZSA9IEFlW2FdID0gZSgiYWJvcnQiKTsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2VuZCh0Lmhhc0NvbnRlbnQgJiYgdC5kYXRhIHx8IG51bGwpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKSB0aHJvdyBzCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGFib3J0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSAmJiBlKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IDogdm9pZCAwCiAgICAgICAgICAgIH0pLCBaLmFqYXhTZXR1cCh7CiAgICAgICAgICAgICAgICBhY2NlcHRzOiB7CiAgICAgICAgICAgICAgICAgICAgc2NyaXB0OiAidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHQiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgY29udGVudHM6IHsKICAgICAgICAgICAgICAgICAgICBzY3JpcHQ6IC8oPzpqYXZhfGVjbWEpc2NyaXB0LwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGNvbnZlcnRlcnM6IHsKICAgICAgICAgICAgICAgICAgICAidGV4dCBzY3JpcHQiOiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBaLmdsb2JhbEV2YWwodCksIHQKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmFqYXhQcmVmaWx0ZXIoInNjcmlwdCIsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gdC5jYWNoZSAmJiAodC5jYWNoZSA9ICExKSwgdC5jcm9zc0RvbWFpbiAmJiAodC50eXBlID0gIkdFVCIpCiAgICAgICAgICAgIH0pLCBaLmFqYXhUcmFuc3BvcnQoInNjcmlwdCIsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIGlmICh0LmNyb3NzRG9tYWluKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG47CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2VuZDogZnVuY3Rpb24ociwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IFooIjxzY3JpcHQ+IikucHJvcCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJzZXQ6IHQuc2NyaXB0Q2hhcnNldCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHQudXJsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5vbigibG9hZCBlcnJvciIsIG4gPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZW1vdmUoKSwgbiA9IG51bGwsIHQgJiYgaSgiZXJyb3IiID09PSB0LnR5cGUgPyA0MDQgOiAyMDAsIHQudHlwZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBRLmhlYWQuYXBwZW5kQ2hpbGQoZVswXSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiAmJiBuKCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBJZSA9IFtdLAogICAgICAgICAgICAgICAgT2UgPSAvKD0pXD8oPz0mfCQpfFw/XD8vOwogICAgICAgICAgICBaLmFqYXhTZXR1cCh7CiAgICAgICAgICAgICAgICBqc29ucDogImNhbGxiYWNrIiwKICAgICAgICAgICAgICAgIGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gSWUucG9wKCkgfHwgWi5leHBhbmRvICsgIl8iICsgY2UrKzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t0XSA9ICEwLCB0CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmFqYXhQcmVmaWx0ZXIoImpzb24ganNvbnAiLCBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICB2YXIgaSwgbywgYSwgcyA9IGUuanNvbnAgIT09ICExICYmIChPZS50ZXN0KGUudXJsKSA/ICJ1cmwiIDogInN0cmluZyIgPT0gdHlwZW9mIGUuZGF0YSAmJiAhKGUuY29udGVudFR5cGUgfHwgIiIpLmluZGV4T2YoImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIpICYmIE9lLnRlc3QoZS5kYXRhKSAmJiAiZGF0YSIpOwogICAgICAgICAgICAgICAgcmV0dXJuIHMgfHwgImpzb25wIiA9PT0gZS5kYXRhVHlwZXNbMF0gPyAoaSA9IGUuanNvbnBDYWxsYmFjayA9IFouaXNGdW5jdGlvbihlLmpzb25wQ2FsbGJhY2spID8gZS5qc29ucENhbGxiYWNrKCkgOiBlLmpzb25wQ2FsbGJhY2ssIHMgPyBlW3NdID0gZVtzXS5yZXBsYWNlKE9lLCAiJDEiICsgaSkgOiBlLmpzb25wICE9PSAhMSAmJiAoZS51cmwgKz0gKGxlLnRlc3QoZS51cmwpID8gIiYiIDogIj8iKSArIGUuanNvbnAgKyAiPSIgKyBpKSwgZS5jb252ZXJ0ZXJzWyJzY3JpcHQganNvbiJdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgfHwgWi5lcnJvcihpICsgIiB3YXMgbm90IGNhbGxlZCIpLCBhWzBdCiAgICAgICAgICAgICAgICB9LCBlLmRhdGFUeXBlc1swXSA9ICJqc29uIiwgbyA9IHRbaV0sIHRbaV0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBhID0gYXJndW1lbnRzCiAgICAgICAgICAgICAgICB9LCByLmFsd2F5cyhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB0W2ldID0gbywgZVtpXSAmJiAoZS5qc29ucENhbGxiYWNrID0gbi5qc29ucENhbGxiYWNrLCBJZS5wdXNoKGkpKSwgYSAmJiBaLmlzRnVuY3Rpb24obykgJiYgbyhhWzBdKSwgYSA9IG8gPSB2b2lkIDAKICAgICAgICAgICAgICAgIH0pLCAic2NyaXB0IikgOiB2b2lkIDAKICAgICAgICAgICAgfSksIFoucGFyc2VIVE1MID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgaWYgKCF0IHx8ICJzdHJpbmciICE9IHR5cGVvZiB0KSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICJib29sZWFuIiA9PSB0eXBlb2YgZSAmJiAobiA9IGUsIGUgPSAhMSksIGUgPSBlIHx8IFE7CiAgICAgICAgICAgICAgICB2YXIgciA9IGF0LmV4ZWModCksCiAgICAgICAgICAgICAgICAgICAgaSA9ICFuICYmIFtdOwogICAgICAgICAgICAgICAgcmV0dXJuIHIgPyBbZS5jcmVhdGVFbGVtZW50KHJbMV0pXSA6IChyID0gWi5idWlsZEZyYWdtZW50KFt0XSwgZSwgaSksIGkgJiYgaS5sZW5ndGggJiYgWihpKS5yZW1vdmUoKSwgWi5tZXJnZShbXSwgci5jaGlsZE5vZGVzKSkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIExlID0gWi5mbi5sb2FkOwogICAgICAgICAgICBaLmZuLmxvYWQgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgIT0gdHlwZW9mIHQgJiYgTGUpIHJldHVybiBMZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgdmFyIHIsIGksIG8sIGEgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgIHMgPSB0LmluZGV4T2YoIiAiKTsKICAgICAgICAgICAgICAgIHJldHVybiBzID49IDAgJiYgKHIgPSBaLnRyaW0odC5zbGljZShzKSksIHQgPSB0LnNsaWNlKDAsIHMpKSwgWi5pc0Z1bmN0aW9uKGUpID8gKG4gPSBlLCBlID0gdm9pZCAwKSA6IGUgJiYgIm9iamVjdCIgPT0gdHlwZW9mIGUgJiYgKGkgPSAiUE9TVCIpLCBhLmxlbmd0aCA+IDAgJiYgWi5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHQsCiAgICAgICAgICAgICAgICAgICAgdHlwZTogaSwKICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogImh0bWwiLAogICAgICAgICAgICAgICAgICAgIGRhdGE6IGUKICAgICAgICAgICAgICAgIH0pLmRvbmUoZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIG8gPSBhcmd1bWVudHMsIGEuaHRtbChyID8gWigiPGRpdj4iKS5hcHBlbmQoWi5wYXJzZUhUTUwodCkpLmZpbmQocikgOiB0KQogICAgICAgICAgICAgICAgfSkuY29tcGxldGUobiAmJiBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgYS5lYWNoKG4sIG8gfHwgW3QucmVzcG9uc2VUZXh0LCBlLCB0XSkKICAgICAgICAgICAgICAgIH0pLCB0aGlzCiAgICAgICAgICAgIH0sIFouZWFjaChbImFqYXhTdGFydCIsICJhamF4U3RvcCIsICJhamF4Q29tcGxldGUiLCAiYWpheEVycm9yIiwgImFqYXhTdWNjZXNzIiwgImFqYXhTZW5kIl0sIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIFouZm5bZV0gPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub24oZSwgdCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouZXhwci5maWx0ZXJzLmFuaW1hdGVkID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFouZ3JlcChaLnRpbWVycywgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBlLmVsZW0KICAgICAgICAgICAgICAgIH0pLmxlbmd0aAogICAgICAgICAgICB9OwogICAgICAgICAgICB2YXIgRGUgPSB0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKICAgICAgICAgICAgWi5vZmZzZXQgPSB7CiAgICAgICAgICAgICAgICBzZXRPZmZzZXQ6IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciwgaSwgbywgYSwgcywgdSwgYywgbCA9IFouY3NzKHQsICJwb3NpdGlvbiIpLAogICAgICAgICAgICAgICAgICAgICAgICBmID0gWih0KSwKICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHt9OwogICAgICAgICAgICAgICAgICAgICJzdGF0aWMiID09PSBsICYmICh0LnN0eWxlLnBvc2l0aW9uID0gInJlbGF0aXZlIiksIHMgPSBmLm9mZnNldCgpLCBvID0gWi5jc3ModCwgInRvcCIpLCB1ID0gWi5jc3ModCwgImxlZnQiKSwgYyA9ICgiYWJzb2x1dGUiID09PSBsIHx8ICJmaXhlZCIgPT09IGwpICYmIChvICsgdSkuaW5kZXhPZigiYXV0byIpID4gLTEsIGMgPyAociA9IGYucG9zaXRpb24oKSwgYSA9IHIudG9wLCBpID0gci5sZWZ0KSA6IChhID0gcGFyc2VGbG9hdChvKSB8fCAwLCBpID0gcGFyc2VGbG9hdCh1KSB8fCAwKSwgWi5pc0Z1bmN0aW9uKGUpICYmIChlID0gZS5jYWxsKHQsIG4sIHMpKSwgbnVsbCAhPSBlLnRvcCAmJiAocC50b3AgPSBlLnRvcCAtIHMudG9wICsgYSksIG51bGwgIT0gZS5sZWZ0ICYmIChwLmxlZnQgPSBlLmxlZnQgLSBzLmxlZnQgKyBpKSwgInVzaW5nIiBpbiBlID8gZS51c2luZy5jYWxsKHQsIHApIDogZi5jc3MocCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgWi5mbi5leHRlbmQoewogICAgICAgICAgICAgICAgb2Zmc2V0OiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB2b2lkIDAgPT09IHQgPyB0aGlzIDogdGhpcy5lYWNoKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgWi5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsIHQsIGUpCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG4sIHIgPSB0aGlzWzBdLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogMAogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBvID0gciAmJiByLm93bmVyRG9jdW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHJldHVybiBlID0gby5kb2N1bWVudEVsZW1lbnQsIFouY29udGFpbnMoZSwgcikgPyAodHlwZW9mIHIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSBFdCAmJiAoaSA9IHIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLCBuID0gRihvKSwgewogICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGkudG9wICsgbi5wYWdlWU9mZnNldCAtIGUuY2xpZW50VG9wLAogICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBpLmxlZnQgKyBuLnBhZ2VYT2Zmc2V0IC0gZS5jbGllbnRMZWZ0CiAgICAgICAgICAgICAgICAgICAgfSkgOiBpCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcG9zaXRpb246IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzWzBdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0LCBlLCBuID0gdGhpc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZml4ZWQiID09PSBaLmNzcyhuLCAicG9zaXRpb24iKSA/IGUgPSBuLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDogKHQgPSB0aGlzLm9mZnNldFBhcmVudCgpLCBlID0gdGhpcy5vZmZzZXQoKSwgWi5ub2RlTmFtZSh0WzBdLCAiaHRtbCIpIHx8IChyID0gdC5vZmZzZXQoKSksIHIudG9wICs9IFouY3NzKHRbMF0sICJib3JkZXJUb3BXaWR0aCIsICEwKSwgci5sZWZ0ICs9IFouY3NzKHRbMF0sICJib3JkZXJMZWZ0V2lkdGgiLCAhMCkpLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGUudG9wIC0gci50b3AgLSBaLmNzcyhuLCAibWFyZ2luVG9wIiwgITApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogZS5sZWZ0IC0gci5sZWZ0IC0gWi5jc3MobiwgIm1hcmdpbkxlZnQiLCAhMCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IERlOyB0ICYmICFaLm5vZGVOYW1lKHQsICJodG1sIikgJiYgInN0YXRpYyIgPT09IFouY3NzKHQsICJwb3NpdGlvbiIpOykgdCA9IHQub2Zmc2V0UGFyZW50OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCB8fCBEZQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLCBaLmVhY2goewogICAgICAgICAgICAgICAgc2Nyb2xsTGVmdDogInBhZ2VYT2Zmc2V0IiwKICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogInBhZ2VZT2Zmc2V0IgogICAgICAgICAgICB9LCBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9ICJwYWdlWU9mZnNldCIgPT09IG47CiAgICAgICAgICAgICAgICBaLmZuW2VdID0gZnVuY3Rpb24oaSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2dCh0aGlzLCBmdW5jdGlvbihlLCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gRihlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gbyA/IGEgPyBhW25dIDogZVtpXSA6IHZvaWQoYSA/IGEuc2Nyb2xsVG8ociA/IHQucGFnZVhPZmZzZXQgOiBvLCByID8gbyA6IHQucGFnZVlPZmZzZXQpIDogZVtpXSA9IG8pCiAgICAgICAgICAgICAgICAgICAgfSwgZSwgaSwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIFouZWFjaChbInRvcCIsICJsZWZ0Il0sIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgIFouY3NzSG9va3NbZV0gPSBfKFkucGl4ZWxQb3NpdGlvbiwgZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID8gKG4gPSB3KHQsIGUpLCBCdC50ZXN0KG4pID8gWih0KS5wb3NpdGlvbigpW2VdICsgInB4IiA6IG4pIDogdm9pZCAwCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9KSwgWi5lYWNoKHsKICAgICAgICAgICAgICAgIEhlaWdodDogImhlaWdodCIsCiAgICAgICAgICAgICAgICBXaWR0aDogIndpZHRoIgogICAgICAgICAgICB9LCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICBaLmVhY2goewogICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICJpbm5lciIgKyB0LAogICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGUsCiAgICAgICAgICAgICAgICAgICAgIiI6ICJvdXRlciIgKyB0CiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbihuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgWi5mbltyXSA9IGZ1bmN0aW9uKHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBhcmd1bWVudHMubGVuZ3RoICYmIChuIHx8ICJib29sZWFuIiAhPSB0eXBlb2YgciksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gbiB8fCAociA9PT0gITAgfHwgaSA9PT0gITAgPyAibWFyZ2luIiA6ICJib3JkZXIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZ0KHRoaXMsIGZ1bmN0aW9uKGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFouaXNXaW5kb3coZSkgPyBlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsiY2xpZW50IiArIHRdIDogOSA9PT0gZS5ub2RlVHlwZSA/IChpID0gZS5kb2N1bWVudEVsZW1lbnQsIE1hdGgubWF4KGUuYm9keVsic2Nyb2xsIiArIHRdLCBpWyJzY3JvbGwiICsgdF0sIGUuYm9keVsib2Zmc2V0IiArIHRdLCBpWyJvZmZzZXQiICsgdF0sIGlbImNsaWVudCIgKyB0XSkpIDogdm9pZCAwID09PSByID8gWi5jc3MoZSwgbiwgYSkgOiBaLnN0eWxlKGUsIG4sIHIsIGEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGUsIG8gPyByIDogdm9pZCAwLCBvLCBudWxsKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pLCBaLmZuLnNpemUgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aAogICAgICAgICAgICB9LCBaLmZuLmFuZFNlbGYgPSBaLmZuLmFkZEJhY2ssICJmdW5jdGlvbiIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kICYmIGRlZmluZSgianF1ZXJ5IiwgW10sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFoKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBQZSA9IHQualF1ZXJ5LAogICAgICAgICAgICAgICAgJGUgPSB0LiQ7CiAgICAgICAgICAgIHJldHVybiBaLm5vQ29uZmxpY3QgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdC4kID09PSBaICYmICh0LiQgPSAkZSksIGUgJiYgdC5qUXVlcnkgPT09IFogJiYgKHQualF1ZXJ5ID0gUGUpLCBaCiAgICAgICAgICAgIH0sIHR5cGVvZiBlID09PSBFdCAmJiAodC5qUXVlcnkgPSB0LiQgPSBaKSwgWgogICAgICAgIH0pCiAgICB9LCB7fV0sCiAgICAxNjogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAoZnVuY3Rpb24odCkgewogICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBmdW5jdGlvbiByKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG51bGwgPT09IHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gdCA9PT0gRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0ID09PSB0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG51bGwgPT09IGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gZSA9PT0gRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSBlID09PSBlOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA+IGUgJiYgIW8gfHwgIWkgfHwgbiAmJiAhYSAmJiBzIHx8IHIgJiYgcykgcmV0dXJuIDE7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlID4gdCAmJiAhbiB8fCAhcyB8fCBvICYmICFyICYmIGkgfHwgYSAmJiBpKSByZXR1cm4gLTEKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBpKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gdC5sZW5ndGgsIGkgPSBuID8gciA6IC0xOyBuID8gaS0tIDogKytpIDwgcjspCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKHRbaV0sIGksIHQpKSByZXR1cm4gaTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBvKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZSAhPT0gZSkgcmV0dXJuIHYodCwgbik7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IG4gLSAxLCBpID0gdC5sZW5ndGg7ICsrciA8IGk7KQogICAgICAgICAgICAgICAgICAgICAgICBpZiAodFtyXSA9PT0gZSkgcmV0dXJuIHI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gYSh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJmdW5jdGlvbiIgPT0gdHlwZW9mIHQgfHwgITEKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSB0ID8gIiIgOiB0ICsgIiIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHIgPSB0Lmxlbmd0aDsgKytuIDwgciAmJiBlLmluZGV4T2YodC5jaGFyQXQobikpID4gLTE7KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGModCwgZSkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSB0Lmxlbmd0aDsgbi0tICYmIGUuaW5kZXhPZih0LmNoYXJBdChuKSkgPiAtMTspOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gbCh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIodC5jcml0ZXJpYSwgZS5jcml0ZXJpYSkgfHwgdC5pbmRleCAtIGUuaW5kZXgKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gLTEsIG8gPSB0LmNyaXRlcmlhLCBhID0gZS5jcml0ZXJpYSwgcyA9IG8ubGVuZ3RoLCB1ID0gbi5sZW5ndGg7ICsraSA8IHM7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gcihvW2ldLCBhW2ldKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID49IHUpIHJldHVybiBjOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBuW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgKiAoImFzYyIgPT09IGwgfHwgbCA9PT0gITAgPyAxIDogLTEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5kZXggLSBlLmluZGV4CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gcCh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFd0W3RdCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gaCh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHp0W3RdCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZCh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPyB0ID0gWHRbdF0gOiBuICYmICh0ID0gSnRbdF0pLCAiXFwiICsgdAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGcodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiXFwiICsgSnRbdF0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2KHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gdC5sZW5ndGgsIGkgPSBlICsgKG4gPyAwIDogLTEpOyBuID8gaS0tIDogKytpIDwgcjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0W2ldOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobyAhPT0gbykgcmV0dXJuIGkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24geSh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdCAmJiAib2JqZWN0IiA9PSB0eXBlb2YgdAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG0odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAxNjAgPj0gdCAmJiB0ID49IDkgJiYgMTMgPj0gdCB8fCAzMiA9PSB0IHx8IDE2MCA9PSB0IHx8IDU3NjAgPT0gdCB8fCA2MTU4ID09IHQgfHwgdCA+PSA4MTkyICYmICg4MjAyID49IHQgfHwgODIzMiA9PSB0IHx8IDgyMzMgPT0gdCB8fCA4MjM5ID09IHQgfHwgODI4NyA9PSB0IHx8IDEyMjg4ID09IHQgfHwgNjUyNzkgPT0gdCkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBiKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHIgPSB0Lmxlbmd0aCwgaSA9IC0xLCBvID0gW107ICsrbiA8IHI7KSB0W25dID09PSBlICYmICh0W25dID0gVywgb1srK2ldID0gbik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB4KHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuLCByID0gLTEsIGkgPSB0Lmxlbmd0aCwgbyA9IC0xLCBhID0gW107ICsrciA8IGk7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gdFtyXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBlID8gZShzLCByLCB0KSA6IHM7CiAgICAgICAgICAgICAgICAgICAgICAgIHIgJiYgbiA9PT0gdSB8fCAobiA9IHUsIGFbKytvXSA9IHMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gdyh0KSB7CiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IC0xLCBuID0gdC5sZW5ndGg7ICsrZSA8IG4gJiYgbSh0LmNoYXJDb2RlQXQoZSkpOyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBfKHQpIHsKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gdC5sZW5ndGg7IGUtLSAmJiBtKHQuY2hhckNvZGVBdChlKSk7KTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGsodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBWdFt0XQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFQodCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGUodCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoeSh0KSAmJiAhQXModCkgJiYgISh0IGluc3RhbmNlb2YgUSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgbSkgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWEuY2FsbCh0LCAiX19jaGFpbl9fIikgJiYgZWEuY2FsbCh0LCAiX193cmFwcGVkX18iKSkgcmV0dXJuIGhyKHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBtKHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKCkge30KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX193cmFwcGVkX18gPSB0LCB0aGlzLl9fYWN0aW9uc19fID0gbiB8fCBbXSwgdGhpcy5fX2NoYWluX18gPSAhIWUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFEodCkgewogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdCwgdGhpcy5fX2FjdGlvbnNfXyA9IFtdLCB0aGlzLl9fZGlyX18gPSAxLCB0aGlzLl9fZmlsdGVyZWRfXyA9ICExLCB0aGlzLl9faXRlcmF0ZWVzX18gPSBbXSwgdGhpcy5fX3Rha2VDb3VudF9fID0gU2EsIHRoaXMuX192aWV3c19fID0gW10KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGV0KCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBRKHRoaXMuX193cmFwcGVkX18pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5fX2FjdGlvbnNfXyA9IHRlKHRoaXMuX19hY3Rpb25zX18pLCB0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX18sIHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX18sIHQuX19pdGVyYXRlZXNfXyA9IHRlKHRoaXMuX19pdGVyYXRlZXNfXyksIHQuX190YWtlQ291bnRfXyA9IHRoaXMuX190YWtlQ291bnRfXywgdC5fX3ZpZXdzX18gPSB0ZSh0aGlzLl9fdmlld3NfXyksIHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJ0KCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fX2ZpbHRlcmVkX18pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gbmV3IFEodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Ll9fZGlyX18gPSAtMSwgdC5fX2ZpbHRlcmVkX18gPSAhMAogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdCA9IHRoaXMuY2xvbmUoKSwgdC5fX2Rpcl9fICo9IC0xOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gV3QoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX19kaXJfXywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBBcyh0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAwID4gZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBuID8gdC5sZW5ndGggOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFZuKDAsIGksIHRoaXMuX192aWV3c19fKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBvLnN0YXJ0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IG8uZW5kLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHMgLSBhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHIgPyBzIDogYSAtIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdGhpcy5fX2l0ZXJhdGVlc19fLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGwubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0ga2EodSwgdGhpcy5fX3Rha2VDb3VudF9fKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuIHx8IE0gPiBpIHx8IGkgPT0gdSAmJiBoID09IHUpIHJldHVybiBubihyICYmIG4gPyB0LnJldmVyc2UoKSA6IHQsIHRoaXMuX19hY3Rpb25zX18pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICB0OiBmb3IgKDsgdS0tICYmIGggPiBwOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyArPSBlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZyA9IC0xLCB2ID0gdFtjXTsgKytnIDwgZjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGxbZ10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSB5Lml0ZXJhdGVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiID0geS50eXBlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gbSh2KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYiA9PSBCKSB2ID0geDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgheCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYiA9PSBGKSBjb250aW51ZSB0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayB0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZFtwKytdID0gdgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB6dCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fX2RhdGFfXyA9IHt9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBWdCh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmhhcyh0KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1t0XQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gR3QodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIl9fcHJvdG9fXyIgPT0gdCA/IEUgOiB0aGlzLl9fZGF0YV9fW3RdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBYdCh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiX19wcm90b19fIiAhPSB0ICYmIGVhLmNhbGwodGhpcy5fX2RhdGFfXywgdCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEp0KHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJfX3Byb3RvX18iICE9IHQgJiYgKHRoaXMuX19kYXRhX19bdF0gPSBlKSwgdGhpcwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gWXQodCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQgPyB0Lmxlbmd0aCA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodGhpcy5kYXRhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2g6IHlhKG51bGwpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogbmV3IGZhCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyBlLS07KSB0aGlzLnB1c2godFtlXSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFF0KHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0LmRhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gInN0cmluZyIgPT0gdHlwZW9mIGUgfHwgTGkoZSkgPyBuLnNldC5oYXMoZSkgOiBuLmhhc2hbZV07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gMCA6IC0xCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBLdCh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdGhpcy5kYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAic3RyaW5nIiA9PSB0eXBlb2YgdCB8fCBMaSh0KSA/IGUuc2V0LmFkZCh0KSA6IGUuaGFzaFt0XSA9ICEwCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBadCh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMSwgciA9IHQubGVuZ3RoLCBpID0gLTEsIG8gPSBlLmxlbmd0aCwgYSA9IEZvKHIgKyBvKTsgKytuIDwgcjspIGFbbl0gPSB0W25dOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgKytpIDwgbzspIGFbbisrXSA9IGVbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0ZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gLTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoZSB8fCAoZSA9IEZvKHIpKTsgKytuIDwgcjspIGVbbl0gPSB0W25dOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZWUodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHIgPSB0Lmxlbmd0aDsgKytuIDwgciAmJiBlKHRbbl0sIG4sIHQpICE9PSAhMTspOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaWUodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gdC5sZW5ndGg7IG4tLSAmJiBlKHRbbl0sIG4sIHQpICE9PSAhMTspOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gb2UodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHIgPSB0Lmxlbmd0aDsgKytuIDwgcjspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWUodFtuXSwgbiwgdCkpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhZSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAtMSwgbyA9IHQubGVuZ3RoLCBhID0gciwgcyA9IGE7ICsraSA8IG87KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHRbaV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9ICtlKHUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbihjLCBhKSAmJiAoYSA9IGMsIHMgPSB1KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMSwgciA9IHQubGVuZ3RoLCBpID0gLTEsIG8gPSBbXTsgKytuIDwgcjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gdFtuXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUoYSwgbiwgdCkgJiYgKG9bKytpXSA9IGEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCByID0gdC5sZW5ndGgsIGkgPSBGbyhyKTsgKytuIDwgcjspIGlbbl0gPSBlKHRbbl0sIG4sIHQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY2UodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHIgPSBlLmxlbmd0aCwgaSA9IHQubGVuZ3RoOyArK24gPCByOykgdFtpICsgbl0gPSBlW25dOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbGUodCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHQubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHIgJiYgbyAmJiAobiA9IHRbKytpXSk7ICsraSA8IG87KSBuID0gZShuLCB0W2ldLCBpLCB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZlKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChyICYmIGkgJiYgKG4gPSB0Wy0taV0pOyBpLS07KSBuID0gZShuLCB0W2ldLCBpLCB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCByID0gdC5sZW5ndGg7ICsrbiA8IHI7KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUodFtuXSwgbiwgdCkpIHJldHVybiAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBoZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSB0Lmxlbmd0aCwgciA9IDA7IG4tLTspIHIgKz0gK2UodFtuXSkgfHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IEUgPyBlIDogdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2UodCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCAhPT0gRSAmJiBlYS5jYWxsKHIsIG4pID8gdCA6IGUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZlKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IC0xLCBpID0gTXMoZSksIG8gPSBpLmxlbmd0aDsgKytyIDwgbzspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gaVtyXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gdFthXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gbihzLCBlW2FdLCBhLCB0LCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1ID09PSB1ID8gdSA9PT0gcyA6IHMgIT09IHMpICYmIChzICE9PSBFIHx8IGEgaW4gdCkgfHwgKHRbYV0gPSB1KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB5ZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IGUgPyB0IDogYmUoZSwgTXMoZSksIHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBtZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMSwgciA9IG51bGwgPT0gdCwgaSA9ICFyICYmIFFuKHQpLCBvID0gaSA/IHQubGVuZ3RoIDogMCwgYSA9IGUubGVuZ3RoLCBzID0gRm8oYSk7ICsrbiA8IGE7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGVbbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID8gc1tuXSA9IEtuKHUsIG8pID8gdFt1XSA6IEUgOiBzW25dID0gciA/IEUgOiB0W3VdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJlKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbiB8fCAobiA9IHt9KTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IC0xLCBpID0gZS5sZW5ndGg7ICsrciA8IGk7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGVbcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW29dID0gdFtvXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB4ZSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdHlwZW9mIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHIgPyBlID09PSBFID8gdCA6IGFuKHQsIGUsIG4pIDogbnVsbCA9PSB0ID8gU28gOiAib2JqZWN0IiA9PSByID8gSGUodCkgOiBlID09PSBFID8gTG8odCkgOiBNZSh0LCBlKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd2UodCwgZSwgbiwgciwgaSwgbywgYSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgczsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gJiYgKHMgPSBpID8gbih0LCByLCBpKSA6IG4odCkpLCBzICE9PSBFKSByZXR1cm4gczsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFMaSh0KSkgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gQXModCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocyA9IEduKHQpLCAhZSkgcmV0dXJuIHRlKHQsIHMpCiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHJhLmNhbGwodCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGMgPT0gWTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjICE9IFogJiYgYyAhPSB6ICYmICghbCB8fCBpKSkgcmV0dXJuIFV0W2NdID8gSm4odCwgYywgZSkgOiBpID8gdCA6IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPSBYbihsID8ge30gOiB0KSwgIWUpIHJldHVybiB5ZShzLCB0KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG8gfHwgKG8gPSBbXSksIGEgfHwgKGEgPSBbXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGYgPSBvLmxlbmd0aDsgZi0tOykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvW2ZdID09IHQpIHJldHVybiBhW2ZdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5wdXNoKHQpLCBhLnB1c2gocyksICh1ID8gZWUgOiBSZSkodCwgZnVuY3Rpb24ociwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc1tpXSA9IHdlKHIsIGUsIG4sIGksIHQsIG8sIGEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBzCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfZSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYShmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuYXBwbHkoRSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSwgZSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGtlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0ID8gdC5sZW5ndGggOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHJldHVybiByOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IFVuKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gYSA9PSBvLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHMgJiYgZS5sZW5ndGggPj0gTSA/IGduKGUpIDogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgdSAmJiAoYSA9IFF0LCBzID0gITEsIGUgPSB1KTsKICAgICAgICAgICAgICAgICAgICAgICAgdDogZm9yICg7ICsraSA8IG47KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAmJiBsID09PSBsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZiA9IGM7IGYtLTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlW2ZdID09PSBsKSBjb250aW51ZSB0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIucHVzaChsKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGEoZSwgbCwgMCkgPCAwICYmIHIucHVzaChsKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQYSh0LCBmdW5jdGlvbih0LCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA9ICEhZSh0LCByLCBpKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgbgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRWUodCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhKHQsIGZ1bmN0aW9uKHQsIGEsIHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gK2UodCwgYSwgcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobih1LCBpKSB8fCB1ID09PSByICYmIHUgPT09IG8pICYmIChpID0gdSwgbyA9IHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBvCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBqZSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobiA9IG51bGwgPT0gbiA/IDAgOiArbiB8fCAwLCAwID4gbiAmJiAobiA9IC1uID4gaSA/IDAgOiBpICsgbiksIHIgPSByID09PSBFIHx8IHIgPiBpID8gaSA6ICtyIHx8IDAsIDAgPiByICYmIChyICs9IGkpLCBpID0gbiA+IHIgPyAwIDogciA+Pj4gMCwgbiA+Pj49IDA7IGkgPiBuOykgdFtuKytdID0gZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBhKHQsIGZ1bmN0aW9uKHQsIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUodCwgciwgaSkgJiYgbi5wdXNoKHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBTZSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbih0LCBmdW5jdGlvbih0LCBuLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0LCBuLCBvKSA/IChpID0gciA/IG4gOiB0LCAhMSkgOiB2b2lkIDAKICAgICAgICAgICAgICAgICAgICAgICAgfSksIGkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEFlKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgciB8fCAociA9IFtdKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IC0xLCBvID0gdC5sZW5ndGg7ICsraSA8IG87KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHRbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5KGEpICYmIFFuKGEpICYmIChuIHx8IEFzKGEpIHx8IEVpKGEpKSA/IGUgPyBBZShhLCBlLCBuLCByKSA6IGNlKHIsIGEpIDogbiB8fCAocltyLmxlbmd0aF0gPSBhKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBOZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxYSh0LCBlLCB0bykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFhKHQsIGUsIE1zKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSWUodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSGEodCwgZSwgTXMpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBPZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAtMSwgciA9IGUubGVuZ3RoLCBpID0gLTEsIG8gPSBbXTsgKytuIDwgcjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gZVtuXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9pKHRbYV0pICYmIChvWysraV0gPSBhKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBMZSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9IHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gIT09IEUgJiYgbiBpbiBmcih0KSAmJiAoZSA9IFtuXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMCwgaSA9IGUubGVuZ3RoOyBudWxsICE9IHQgJiYgaSA+IHI7KSB0ID0gdFtlW3IrK11dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgJiYgciA9PSBpID8gdCA6IEUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRGUodCwgZSwgbiwgciwgaSwgbykgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gZSA/ICEwIDogbnVsbCA9PSB0IHx8IG51bGwgPT0gZSB8fCAhTGkodCkgJiYgIXkoZSkgPyB0ICE9PSB0ICYmIGUgIT09IGUgOiBQZSh0LCBlLCBEZSwgbiwgciwgaSwgbykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBlKHQsIGUsIG4sIHIsIGksIG8sIGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBBcyh0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBBcyhlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBWLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IFY7CiAgICAgICAgICAgICAgICAgICAgICAgIHMgfHwgKGMgPSByYS5jYWxsKHQpLCBjID09IHogPyBjID0gWiA6IGMgIT0gWiAmJiAocyA9IFVpKHQpKSksIHUgfHwgKGwgPSByYS5jYWxsKGUpLCBsID09IHogPyBsID0gWiA6IGwgIT0gWiAmJiAodSA9IFVpKGUpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gYyA9PSBaLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGwgPT0gWiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGggPSBjID09IGw7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoICYmICFzICYmICFmKSByZXR1cm4gSG4odCwgZSwgYyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBmICYmIGVhLmNhbGwodCwgIl9fd3JhcHBlZF9fIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHAgJiYgZWEuY2FsbChlLCAiX193cmFwcGVkX18iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkIHx8IGcpIHJldHVybiBuKGQgPyB0LnZhbHVlKCkgOiB0LCBnID8gZS52YWx1ZSgpIDogZSwgciwgaSwgbywgYSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWgpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgbyB8fCAobyA9IFtdKSwgYSB8fCAoYSA9IFtdKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdiA9IG8ubGVuZ3RoOyB2LS07KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9bdl0gPT0gdCkgcmV0dXJuIGFbdl0gPT0gZTsKICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKHQpLCBhLnB1c2goZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gKHMgPyBxbiA6IE1uKSh0LCBlLCBuLCByLCBpLCBvLCBhKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8ucG9wKCksIGEucG9wKCksIHkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICRlKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICFuOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSB0KSByZXR1cm4gIWk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodCA9IGZyKHQpOyByLS07KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGVbcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiBhWzJdID8gYVsxXSAhPT0gdFthWzBdXSA6ICEoYVswXSBpbiB0KSkgcmV0dXJuICExCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICsrciA8IGk7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gZVtyXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gYVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gdFtzXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gYVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvICYmIGFbMl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodSA9PT0gRSAmJiAhKHMgaW4gdCkpIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IG4gPyBuKHUsIGMsIHMpIDogRTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShsID09PSBFID8gRGUoYywgdSwgbiwgITApIDogbCkpIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcWUodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IFFuKHQpID8gRm8odC5sZW5ndGgpIDogW107CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQYSh0LCBmdW5jdGlvbih0LCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByWysrbl0gPSBlKHQsIGksIG8pCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCByCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBIZSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gV24odCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09IGUubGVuZ3RoICYmIGVbMF1bMl0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZVswXVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZVswXVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/ICExIDogdFtuXSA9PT0gciAmJiAociAhPT0gRSB8fCBuIGluIGZyKHQpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGUodCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTWUodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IEFzKHQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHRyKHQpICYmIHJyKGUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHQgKyAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBwcih0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBvKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID0gZnIobyksIChuIHx8ICFyKSAmJiAhKGEgaW4gbykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8gPSAxID09IHQubGVuZ3RoID8gbyA6IExlKG8sIFhlKHQsIDAsIC0xKSksIG51bGwgPT0gbykgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0ganIodCksIG8gPSBmcihvKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1thXSA9PT0gZSA/IGUgIT09IEUgfHwgYSBpbiBvIDogRGUoZSwgb1thXSwgRSwgITApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBGZSh0LCBlLCBuLCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTGkodCkpIHJldHVybiB0OwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IFFuKGUpICYmIChBcyhlKSB8fCBVaShlKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gbyA/IEUgOiBNcyhlKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVlKGEgfHwgZSwgZnVuY3Rpb24ocywgdSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgJiYgKHUgPSBzLCBzID0gZVt1XSksIHkocykpIHIgfHwgKHIgPSBbXSksIGkgfHwgKGkgPSBbXSksIEJlKHQsIGUsIHUsIEZlLCBuLCByLCBpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gdFt1XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IG4gPyBuKGMsIHMsIHUsIHQsIGUpIDogRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGwgPT09IEU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiAmJiAobCA9IHMpLCBsID09PSBFICYmICghbyB8fCB1IGluIHQpIHx8ICFmICYmIChsID09PSBsID8gbCA9PT0gYyA6IGMgIT09IGMpIHx8ICh0W3VdID0gbCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksIHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEJlKHQsIGUsIG4sIHIsIGksIG8sIGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IG8ubGVuZ3RoLCB1ID0gZVtuXTsgcy0tOykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvW3NdID09IHUpIHJldHVybiB2b2lkKHRbbl0gPSBhW3NdKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSB0W25dLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGkgPyBpKGMsIHUsIG4sIHQsIGUpIDogRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBsID09PSBFOwogICAgICAgICAgICAgICAgICAgICAgICBmICYmIChsID0gdSwgUW4odSkgJiYgKEFzKHUpIHx8IFVpKHUpKSA/IGwgPSBBcyhjKSA/IGMgOiBRbihjKSA/IHRlKGMpIDogW10gOiBNaSh1KSB8fCBFaSh1KSA/IGwgPSBFaShjKSA/IFhpKGMpIDogTWkoYykgPyBjIDoge30gOiBmID0gITEpLCBvLnB1c2godSksIGEucHVzaChsKSwgZiA/IHRbbl0gPSByKGwsIHUsIGksIG8sIGEpIDogKGwgPT09IGwgPyBsICE9PSBjIDogYyA9PT0gYykgJiYgKHRbbl0gPSBsKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVWUodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gZSA/IEUgOiBlW3RdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFdlKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0ICsgIiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gcHIodCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExlKG4sIHQsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB6ZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSB0ID8gZS5sZW5ndGggOiAwOyBuLS07KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGVbbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAociAhPSBpICYmIEtuKHIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSByOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhLmNhbGwodCwgciwgMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVmUodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCArIG1hKGphKCkgKiAoZSAtIHQgKyAxKSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEdlKHQsIGUsIG4sIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkodCwgZnVuY3Rpb24odCwgaSwgbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHIgPyAociA9ICExLCB0KSA6IGUobiwgdCwgaSwgbykKICAgICAgICAgICAgICAgICAgICAgICAgfSksIG4KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFhlKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAtMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IG51bGwgPT0gZSA/IDAgOiArZSB8fCAwLCAwID4gZSAmJiAoZSA9IC1lID4gaSA/IDAgOiBpICsgZSksIG4gPSBuID09PSBFIHx8IG4gPiBpID8gaSA6ICtuIHx8IDAsIDAgPiBuICYmIChuICs9IGkpLCBpID0gZSA+IG4gPyAwIDogbiAtIGUgPj4+IDAsIGUgPj4+PSAwOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gRm8oaSk7ICsrciA8IGk7KSBvW3JdID0gdFtyICsgZV07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBKZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGEodCwgZnVuY3Rpb24odCwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBlKHQsIHIsIGkpLCAhbgogICAgICAgICAgICAgICAgICAgICAgICB9KSwgISFuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBZZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodC5zb3J0KGUpOyBuLS07KSB0W25dID0gdFtuXS52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFFlKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBGbigpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC0xOwogICAgICAgICAgICAgICAgICAgICAgICBlID0gdWUoZSwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIodCkKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gcWUodCwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB1ZShlLCBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcml0ZXJpYTogbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogKytpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWWUobywgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCwgZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEtlKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGEodCwgZnVuY3Rpb24odCwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiArPSArZSh0LCByLCBpKSB8fCAwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBaZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gLTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gVW4oKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0Lmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSByID09IG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gYSAmJiBpID49IE0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gcyA/IGduKCkgOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICB1ID8gKHIgPSBRdCwgYSA9ICExKSA6IChzID0gITEsIHUgPSBlID8gW10gOiBjKTsKICAgICAgICAgICAgICAgICAgICAgICAgdDogZm9yICg7ICsrbiA8IGk7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRbbl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGUgPyBlKGwsIG4sIHQpIDogbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmIGwgPT09IGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwID0gdS5sZW5ndGg7IHAtLTspCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1W3BdID09PSBmKSBjb250aW51ZSB0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgJiYgdS5wdXNoKGYpLCBjLnB1c2gobCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSByKHUsIGYsIDApIDwgMCAmJiAoKGUgfHwgcykgJiYgdS5wdXNoKGYpLCBjLnB1c2gobCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRuKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCByID0gZS5sZW5ndGgsIGkgPSBGbyhyKTsgKytuIDwgcjspIGlbbl0gPSB0W2Vbbl1dOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZW4odCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gdC5sZW5ndGgsIG8gPSByID8gaSA6IC0xOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHIgPyBvLS0gOiArK28gPCBpKSAmJiBlKHRbb10sIG8sIHQpOyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuID8gWGUodCwgciA/IDAgOiBvLCByID8gbyArIDEgOiBpKSA6IFhlKHQsIHIgPyBvICsgMSA6IDAsIHIgPyBpIDogbykKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG5uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0OwogICAgICAgICAgICAgICAgICAgICAgICBuIGluc3RhbmNlb2YgUSAmJiAobiA9IG4udmFsdWUoKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAtMSwgaSA9IGUubGVuZ3RoOyArK3IgPCBpOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlW3JdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG8uZnVuYy5hcHBseShvLnRoaXNBcmcsIGNlKFtuXSwgby5hcmdzKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcm4odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdCA/IHQubGVuZ3RoIDogcjsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJudW1iZXIiID09IHR5cGVvZiBlICYmIGUgPT09IGUgJiYgUmEgPj0gaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IGkgPiByOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gciArIGkgPj4+IDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0W29dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChuID8gZSA+PSBhIDogZSA+IGEpICYmIG51bGwgIT09IGEgPyByID0gbyArIDEgOiBpID0gbwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb24odCwgZSwgU28sIG4pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvbih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBuKGUpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbyA9IHQgPyB0Lmxlbmd0aCA6IDAsIGEgPSBlICE9PSBlLCBzID0gbnVsbCA9PT0gZSwgdSA9IGUgPT09IEU7IG8gPiBpOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBtYSgoaSArIG8pIC8gMiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IG4odFtjXSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGwgIT09IEUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IGwgPT09IGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSkgdmFyIGggPSBwIHx8IHI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGggPSBzID8gcCAmJiBmICYmIChyIHx8IG51bGwgIT0gbCkgOiB1ID8gcCAmJiAociB8fCBmKSA6IG51bGwgPT0gbCA/ICExIDogciA/IGUgPj0gbCA6IGUgPiBsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA/IGkgPSBjICsgMSA6IG8gPSBjCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGthKG8sIE5hKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYW4odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiAhPSB0eXBlb2YgdCkgcmV0dXJuIFNvOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PT0gRSkgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuLCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgbiwgciwgaSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuLCByLCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgbiwgciwgaSwgbykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuLCByLCBpLCBvLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgbiwgciwgaSwgbywgYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkoZSwgYXJndW1lbnRzKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gbmV3IGFhKHQuYnl0ZUxlbmd0aCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gbmV3IGRhKGUpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5zZXQobmV3IGRhKHQpKSwgZQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdW4odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gbi5sZW5ndGgsIGkgPSAtMSwgbyA9IF9hKHQubGVuZ3RoIC0gciwgMCksIGEgPSAtMSwgcyA9IGUubGVuZ3RoLCB1ID0gRm8ocyArIG8pOyArK2EgPCBzOykgdVthXSA9IGVbYV07CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyArK2kgPCByOykgdVtuW2ldXSA9IHRbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBvLS07KSB1W2ErK10gPSB0W2krK107CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAtMSwgaSA9IG4ubGVuZ3RoLCBvID0gLTEsIGEgPSBfYSh0Lmxlbmd0aCAtIGksIDApLCBzID0gLTEsIHUgPSBlLmxlbmd0aCwgYyA9IEZvKGEgKyB1KTsgKytvIDwgYTspIGNbb10gPSB0W29dOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsID0gbzsgKytzIDwgdTspIGNbbCArIHNdID0gZVtzXTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICsrciA8IGk7KSBjW2wgKyBuW3JdXSA9IHRbbysrXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGxuKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4sIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gZSA/IGUoKSA6IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPSBGbihyLCBpLCAzKSwgQXMobikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IC0xLCBzID0gbi5sZW5ndGg7ICsrYSA8IHM7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gblthXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdChvLCB1LCByKHUsIGEsIG4pLCBuKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBQYShuLCBmdW5jdGlvbihlLCBuLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQobywgZSwgcihlLCBuLCBpKSwgaSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZuKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlpKGZ1bmN0aW9uKGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gLTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG51bGwgPT0gZSA/IDAgOiBuLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gaSA+IDIgPyBuW2kgLSAyXSA6IEUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGkgPiAyID8gblsyXSA6IEUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGkgPiAxID8gbltpIC0gMV0gOiBFOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICgiZnVuY3Rpb24iID09IHR5cGVvZiBvID8gKG8gPSBhbihvLCBzLCA1KSwgaSAtPSAyKSA6IChvID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgcyA/IHMgOiBFLCBpIC09IG8gPyAxIDogMCksIGEgJiYgWm4oblswXSwgblsxXSwgYSkgJiYgKG8gPSAzID4gaSA/IEUgOiBvLCBpID0gMSk7ICsrciA8IGk7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBuW3JdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgJiYgdChlLCB1LCBvKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHBuKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gbiA/IEJhKG4pIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbnIoaSkpIHJldHVybiB0KG4sIHIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IGUgPyBpIDogLTEsIGEgPSBmcihuKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZSA/IG8tLSA6ICsrbyA8IGkpICYmIHIoYVtvXSwgbywgYSkgIT09ICExOyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBobih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZnIoZSksIG8gPSByKGUpLCBhID0gby5sZW5ndGgsIHMgPSB0ID8gYSA6IC0xOyB0ID8gcy0tIDogKytzIDwgYTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IG9bc107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4oaVt1XSwgdSwgaSkgPT09ICExKSBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZG4odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzICYmIHRoaXMgIT09IG5lICYmIHRoaXMgaW5zdGFuY2VvZiBuID8gciA6IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5hcHBseShlLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB5bih0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGduKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlhICYmIGZhID8gbmV3IFl0KHQpIDogbnVsbAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdm4odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCByID0gRW8obG8oZSkpLCBpID0gci5sZW5ndGgsIG8gPSAiIjsgKytuIDwgaTspIG8gPSB0KG8sIHJbbl0sIG4pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24geW4odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGFyZ3VtZW50czsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdLCBlWzNdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdLCBlWzNdLCBlWzRdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdLCBlWzNdLCBlWzRdLCBlWzVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdChlWzBdLCBlWzFdLCBlWzJdLCBlWzNdLCBlWzRdLCBlWzVdLCBlWzZdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBEYSh0LnByb3RvdHlwZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHQuYXBwbHkobiwgZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGkocikgPyByIDogbgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBtbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGUobiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSAmJiBabihuLCByLCBpKSAmJiAociA9IEUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSAkbihuLCB0LCBFLCBFLCBFLCBFLCBFLCByKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvLnBsYWNlaG9sZGVyID0gZS5wbGFjZWhvbGRlciwgbwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBibih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5aShmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG5bMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSByID8gciA6IChuLnB1c2goZSksIHQuYXBwbHkoRSwgbikpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB4bih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuLCByLCBpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAmJiBabihuLCByLCBpKSAmJiAociA9IEUpLCByID0gRm4ociwgaSwgMyksIDEgPT0gci5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gQXMobikgPyBuIDogbHIobik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBhZShuLCByLCB0LCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4ubGVuZ3RoIHx8IG8gIT09IGUpIHJldHVybiBvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRWUobiwgciwgdCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obiwgciwgbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPSBGbihyLCBvLCAzKSwgQXMobikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGkobiwgciwgZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPiAtMSA/IG5bYV0gOiBFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2UobiwgciwgdCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gX24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgJiYgZS5sZW5ndGggPyAobiA9IEZuKG4sIHIsIDMpLCBpKGUsIG4sIHQpKSA6IC0xCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGtuKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuID0gRm4obiwgciwgMyksIFNlKGUsIG4sIHQsICEwKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUsIG4gPSBhcmd1bWVudHMubGVuZ3RoLCByID0gdCA/IG4gOiAtMSwgaSA9IDAsIG8gPSBGbyhuKTsgdCA/IHItLSA6ICsrciA8IG47KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBvW2krK10gPSBhcmd1bWVudHNbcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIGEpIHRocm93IG5ldyBZbyhVKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZSAmJiBtLnByb3RvdHlwZS50aHJ1ICYmICJ3cmFwcGVyIiA9PSBCbihhKSAmJiAoZSA9IG5ldyBtKFtdLCAhMCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHIgPSBlID8gLTEgOiBuOyArK3IgPCBuOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBvW3JdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gQm4oYSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSAid3JhcHBlciIgPT0gcyA/IEZhKGEpIDogRTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdSAmJiBlcih1WzBdKSAmJiB1WzFdID09IChMIHwgTiB8IEkgfCBEKSAmJiAhdVs0XS5sZW5ndGggJiYgMSA9PSB1WzldID8gZVtCbih1WzBdKV0uYXBwbHkoZSwgdVszXSkgOiAxID09IGEubGVuZ3RoICYmIGVyKGEpID8gZVtzXSgpIDogZS50aHJ1KGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBhcmd1bWVudHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0WzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlICYmIDEgPT0gdC5sZW5ndGggJiYgQXMocikgJiYgci5sZW5ndGggPj0gTSkgcmV0dXJuIGUucGxhbnQocikudmFsdWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgYSA9IG4gPyBvW2ldLmFwcGx5KHRoaXMsIHQpIDogcjsgKytpIDwgbjspIGEgPSBvW2ldLmNhbGwodGhpcywgYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRW4odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJmdW5jdGlvbiIgPT0gdHlwZW9mIHIgJiYgaSA9PT0gRSAmJiBBcyhuKSA/IHQobiwgcikgOiBlKG4sIGFuKHIsIGksIDMpKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBqbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCJmdW5jdGlvbiIgIT0gdHlwZW9mIG4gfHwgciAhPT0gRSkgJiYgKG4gPSBhbihuLCByLCAzKSksIHQoZSwgbiwgdG8pCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENuKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoImZ1bmN0aW9uIiAhPSB0eXBlb2YgbiB8fCByICE9PSBFKSAmJiAobiA9IGFuKG4sIHIsIDMpKSwgdChlLCBuKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBTbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBGbihuLCByLCAzKSwgUmUoZSwgZnVuY3Rpb24oZSwgciwgbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gbihlLCByLCBvKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gdCA/IGEgOiByLCBlID0gdCA/IGUgOiBhLCBpW3JdID0gZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQW4odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBzKGUpLCAodCA/IGUgOiAiIikgKyBPbihlLCBuLCByKSArICh0ID8gIiIgOiBlKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBObih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0geWkoZnVuY3Rpb24obiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBiKHIsIGUucGxhY2Vob2xkZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRuKG4sIHQsIEUsIHIsIGkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUm4odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obiwgciwgaSwgbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBhcmd1bWVudHMubGVuZ3RoIDwgMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiByICYmIG8gPT09IEUgJiYgQXMobikgPyB0KG4sIHIsIGksIGEpIDogR2UobiwgRm4ociwgbywgNCksIGksIGEsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEluKHQsIGUsIG4sIHIsIGksIG8sIGEsIHMsIHUsIGMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG0gPSBhcmd1bWVudHMubGVuZ3RoLCB4ID0gbSwgdyA9IEZvKG0pOyB4LS07KSB3W3hdID0gYXJndW1lbnRzW3hdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgKHcgPSB1bih3LCByLCBpKSksIG8gJiYgKHcgPSBjbih3LCBvLCBhKSksIGQgfHwgdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfID0gbC5wbGFjZWhvbGRlciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgayA9IGIodywgXyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0gLT0gay5sZW5ndGgsIGMgPiBtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBUID0gcyA/IHRlKHMpIDogRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogPSBfYShjIC0gbSwgMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBID0gZCA/IGsgOiBFLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTiA9IGQgPyBFIDogaywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFIgPSBkID8gdyA6IEUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMID0gZCA/IEUgOiB3OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlIHw9IGQgPyBJIDogTywgZSAmPSB+KGQgPyBPIDogSSksIGcgfHwgKGUgJj0gfihDIHwgUykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgRCA9IFt0LCBlLCBuLCBSLCBBLCBMLCBOLCBULCB1LCBqXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFAgPSBJbi5hcHBseShFLCBEKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVyKHQpICYmIFVhKFAsIEQpLCBQLnBsYWNlaG9sZGVyID0gXywgUAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciAkID0gcCA/IG4gOiB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBoID8gJFt0XSA6IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyAmJiAodyA9IHVyKHcsIHMpKSwgZiAmJiB1IDwgdy5sZW5ndGggJiYgKHcubGVuZ3RoID0gdSksIHRoaXMgJiYgdGhpcyAhPT0gbmUgJiYgdGhpcyBpbnN0YW5jZW9mIGwgJiYgKHEgPSB5IHx8IHluKHQpKSwgcS5hcHBseSgkLCB3KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmID0gZSAmIEwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gZSAmIEMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoID0gZSAmIFMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gZSAmIE4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnID0gZSAmIEEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gZSAmIFIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gaCA/IEUgOiB5bih0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGwKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSArZSwgciA+PSBlIHx8ICF4YShlKSkgcmV0dXJuICIiOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGUgLSByOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA9IG51bGwgPT0gbiA/ICIgIiA6IG4gKyAiIiwgeW8obiwgdmEoaSAvIG4ubGVuZ3RoKSkuc2xpY2UoMCwgaSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIExuKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaSgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAtMSwgcyA9IGFyZ3VtZW50cy5sZW5ndGgsIHUgPSAtMSwgYyA9IHIubGVuZ3RoLCBsID0gRm8oYyArIHMpOyArK3UgPCBjOykgbFt1XSA9IHJbdV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgcy0tOykgbFt1KytdID0gYXJndW1lbnRzWysrZV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IHRoaXMgJiYgdGhpcyAhPT0gbmUgJiYgdGhpcyBpbnN0YW5jZW9mIGkgPyBhIDogdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmLmFwcGx5KG8gPyBuIDogdGhpcywgbCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGUgJiBDLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHluKHQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRG4odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHpvW3RdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBuID09PSBFID8gMCA6ICtuIHx8IDAsIG4gPyAobiA9IGNhKDEwLCBuKSwgZSh0ICogbikgLyBuKSA6IGUodCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUG4odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBGbihyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHIgJiYgbyA9PT0geGUgPyBybihlLCBuLCB0KSA6IG9uKGUsIG4sIG8ociwgaSwgMSksIHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICRuKHQsIGUsIG4sIHIsIGksIG8sIGEsIHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSBlICYgUzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1ICYmICJmdW5jdGlvbiIgIT0gdHlwZW9mIHQpIHRocm93IG5ldyBZbyhVKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSByID8gci5sZW5ndGggOiAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyB8fCAoZSAmPSB+KEkgfCBPKSwgciA9IGkgPSBFKSwgYyAtPSBpID8gaS5sZW5ndGggOiAwLCBlICYgTykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IGkgPSBFCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSB1ID8gRSA6IEZhKHQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IFt0LCBlLCBuLCByLCBpLCBsLCBmLCBvLCBhLCBzXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAgJiYgKGlyKGgsIHApLCBlID0gaFsxXSwgcyA9IGhbOV0pLCBoWzldID0gbnVsbCA9PSBzID8gdSA/IDAgOiB0Lmxlbmd0aCA6IF9hKHMgLSBjLCAwKSB8fCAwLCBlID09IEMpIHZhciBkID0gZG4oaFswXSwgaFsyXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZCA9IGUgIT0gSSAmJiBlICE9IChDIHwgSSkgfHwgaFs0XS5sZW5ndGggPyBJbi5hcHBseShFLCBoKSA6IExuLmFwcGx5KEUsIGgpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZyA9IHAgPyBNYSA6IFVhOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZyhkLCBoKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcW4odCwgZSwgbiwgciwgaSwgbywgYSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHQubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyA9IGUubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodSAhPSBjICYmICEoaSAmJiBjID4gdSkpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7ICsrcyA8IHU7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHRbc10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZiA9IGVbc10sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHIgPyByKGkgPyBmIDogbCwgaSA/IGwgOiBmLCBzKSA6IEU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocCAhPT0gRSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwKSBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZShlLCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbCA9PT0gdCB8fCBuKGwsIHQsIHIsIGksIG8sIGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSByZXR1cm4gITEKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobCAhPT0gZiAmJiAhbihsLCBmLCByLCBpLCBvLCBhKSkgcmV0dXJuICExCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBIbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBHOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBYOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiArdCA9PSArZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgSjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5uYW1lID09IGUubmFtZSAmJiB0Lm1lc3NhZ2UgPT0gZS5tZXNzYWdlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBLOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICE9ICt0ID8gZSAhPSArZSA6IHQgPT0gK2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHR0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBudDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBlICsgIiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1uKHQsIGUsIG4sIHIsIGksIG8sIGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBNcyh0KSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBzLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBNcyhlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgPSBjLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHUgIT0gbCAmJiAhaSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmID0gdTsgZi0tOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBzW2ZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA/IHAgaW4gZSA6IGVhLmNhbGwoZSwgcCkpKSByZXR1cm4gITEKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoID0gaTsgKytmIDwgdTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBzW2ZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSB0W3BdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGcgPSBlW3BdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSByID8gcihpID8gZyA6IGQsIGkgPyBkIDogZywgcCkgOiBFOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodiA9PT0gRSA/IG4oZCwgZywgciwgaSwgbywgYSkgOiB2KSkgcmV0dXJuICExOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCB8fCAoaCA9ICJjb25zdHJ1Y3RvciIgPT0gcCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gdC5jb25zdHJ1Y3RvciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gZS5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ICE9IG0gJiYgImNvbnN0cnVjdG9yIiBpbiB0ICYmICJjb25zdHJ1Y3RvciIgaW4gZSAmJiAhKCJmdW5jdGlvbiIgPT0gdHlwZW9mIHkgJiYgeSBpbnN0YW5jZW9mIHkgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgbSAmJiBtIGluc3RhbmNlb2YgbSkpIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRm4odCwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGUuY2FsbGJhY2sgfHwgam87CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID0gaSA9PT0gam8gPyB4ZSA6IGksIHIgPyBpKHQsIG4sIHIpIDogaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQm4odCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gdC5uYW1lLCBuID0gTGFbZV0sIHIgPSBuID8gbi5sZW5ndGggOiAwOyByLS07KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IG5bcl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGkuZnVuYzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IG8gfHwgbyA9PSB0KSByZXR1cm4gaS5uYW1lCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFVuKHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLmluZGV4T2YgfHwgVHI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID0gaSA9PT0gVHIgPyBvIDogaSwgdCA/IGkodCwgbiwgcikgOiBpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBXbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSBlbyh0KSwgbiA9IGUubGVuZ3RoOyBuLS07KSBlW25dWzJdID0gcnIoZVtuXVsxXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB6bih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gbnVsbCA9PSB0ID8gRSA6IHRbZV07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkaShuKSA/IG4gOiBFCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBWbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAtMSwgaSA9IG4ubGVuZ3RoOyArK3IgPCBpOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBuW3JdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBvLnNpemU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG8udHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImRyb3AiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ICs9IGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImRyb3BSaWdodCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgLT0gYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAidGFrZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBrYShlLCB0ICsgYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInRha2VSaWdodCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBfYSh0LCBlIC0gYSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gR24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG5ldyB0LmNvbnN0cnVjdG9yKGUpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSAmJiAic3RyaW5nIiA9PSB0eXBlb2YgdFswXSAmJiBlYS5jYWxsKHQsICJpbmRleCIpICYmIChuLmluZGV4ID0gdC5pbmRleCwgbi5pbnB1dCA9IHQuaW5wdXQpLCBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBYbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdC5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgJiYgZSBpbnN0YW5jZW9mIGUgfHwgKGUgPSBHbyksIG5ldyBlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBKbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGl0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzbih0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgRzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgWDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHIoK3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBvdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgYXQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHN0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB1dDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgY3Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBmdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGh0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5idWZmZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyByKG4gPyBzbihpKSA6IGksIHQuYnl0ZU9mZnNldCwgdC5sZW5ndGgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBLOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBudDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHIodCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHR0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gbmV3IHIodC5zb3VyY2UsIEl0LmV4ZWModCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ubGFzdEluZGV4ID0gdC5sYXN0SW5kZXgKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gWW4odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBudWxsID09IHQgfHwgdHIoZSwgdCkgfHwgKGUgPSBwcihlKSwgdCA9IDEgPT0gZS5sZW5ndGggPyB0IDogTGUodCwgWGUoZSwgMCwgLTEpKSwgZSA9IGpyKGUpKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBudWxsID09IHQgPyB0IDogdFtlXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gciA/IEUgOiByLmFwcGx5KHQsIG4pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBRbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsICE9IHQgJiYgbnIoQmEodCkpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBLbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gIm51bWJlciIgPT0gdHlwZW9mIHQgfHwgRHQudGVzdCh0KSA/ICt0IDogLTEsIGUgPSBudWxsID09IGUgPyBJYSA6IGUsIHQgPiAtMSAmJiB0ICUgMSA9PSAwICYmIGUgPiB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBabih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghTGkobikpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0eXBlb2YgZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJudW1iZXIiID09IHIgPyBRbihuKSAmJiBLbihlLCBuLmxlbmd0aCkgOiAic3RyaW5nIiA9PSByICYmIGUgaW4gbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuW2VdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IHQgPyB0ID09PSBpIDogaSAhPT0gaQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdHIodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHR5cGVvZiB0OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoInN0cmluZyIgPT0gbiAmJiBFdC50ZXN0KHQpIHx8ICJudW1iZXIiID09IG4pIHJldHVybiAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFzKHQpKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gIVR0LnRlc3QodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByIHx8IG51bGwgIT0gZSAmJiB0IGluIGZyKGUpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gQm4odCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG4gaW4gUS5wcm90b3R5cGUpKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gZVtuXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IHIpIHJldHVybiAhMDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBGYShyKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhaSAmJiB0ID09PSBpWzBdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBucih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAibnVtYmVyIiA9PSB0eXBlb2YgdCAmJiB0ID4gLTEgJiYgdCAlIDEgPT0gMCAmJiBJYSA+PSB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBycih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSB0ICYmICFMaSh0KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaXIodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHRbMV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZVsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBuIHwgciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBMID4gaSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSByID09IEwgJiYgbiA9PSBOIHx8IHIgPT0gTCAmJiBuID09IEQgJiYgdFs3XS5sZW5ndGggPD0gZVs4XSB8fCByID09IChMIHwgRCkgJiYgbiA9PSBOOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW8gJiYgIWEpIHJldHVybiB0OwogICAgICAgICAgICAgICAgICAgICAgICByICYgQyAmJiAodFsyXSA9IGVbMl0sIGkgfD0gbiAmIEMgPyAwIDogQSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gZVszXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gdFszXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbM10gPSB1ID8gdW4odSwgcywgZVs0XSkgOiB0ZShzKSwgdFs0XSA9IHUgPyBiKHRbM10sIFcpIDogdGUoZVs0XSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyA9IGVbNV0sIHMgJiYgKHUgPSB0WzVdLCB0WzVdID0gdSA/IGNuKHUsIHMsIGVbNl0pIDogdGUocyksIHRbNl0gPSB1ID8gYih0WzVdLCBXKSA6IHRlKGVbNl0pKSwgcyA9IGVbN10sIHMgJiYgKHRbN10gPSB0ZShzKSksIHIgJiBMICYmICh0WzhdID0gbnVsbCA9PSB0WzhdID8gZVs4XSA6IGthKHRbOF0sIGVbOF0pKSwgbnVsbCA9PSB0WzldICYmICh0WzldID0gZVs5XSksIHRbMF0gPSBlWzBdLCB0WzFdID0gaSwgdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gb3IodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gRSA/IGUgOiBOcyh0LCBlLCBvcikKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFyKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdCA9IGZyKHQpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gLTEsIHIgPSBlLmxlbmd0aCwgaSA9IHt9OyArK24gPCByOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBlW25dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyBpbiB0ICYmIChpW29dID0gdFtvXSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3IodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTmUodCwgZnVuY3Rpb24odCwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0LCByLCBpKSAmJiAobltyXSA9IHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1cih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSB0Lmxlbmd0aCwgciA9IGthKGUubGVuZ3RoLCBuKSwgaSA9IHRlKHQpOyByLS07KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGVbcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W3JdID0gS24obywgbikgPyBpW29dIDogRQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSB0byh0KSwgbiA9IGUubGVuZ3RoLCByID0gbiAmJiB0Lmxlbmd0aCwgaSA9ICEhciAmJiBucihyKSAmJiAoQXModCkgfHwgRWkodCkpLCBvID0gLTEsIGEgPSBbXTsgKytvIDwgbjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gZVtvXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpICYmIEtuKHMsIHIpIHx8IGVhLmNhbGwodCwgcykpICYmIGEucHVzaChzKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBscih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBbXSA6IFFuKHQpID8gTGkodCkgPyB0IDogR28odCkgOiBvbyh0KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZnIodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGkodCkgPyB0IDogR28odCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHByKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFzKHQpKSByZXR1cm4gdDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHModCkucmVwbGFjZShqdCwgZnVuY3Rpb24odCwgbiwgciwgaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHIgPyBpLnJlcGxhY2UoTnQsICIkMSIpIDogbiB8fCB0KQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgZQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaHIodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIFEgPyB0LmNsb25lKCkgOiBuZXcgbSh0Ll9fd3JhcHBlZF9fLCB0Ll9fY2hhaW5fXywgdGUodC5fX2FjdGlvbnNfXykpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBkcih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAobiA/IFpuKHQsIGUsIG4pIDogbnVsbCA9PSBlKSA/IDEgOiBfYShtYShlKSB8fCAxLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSB0ID8gdC5sZW5ndGggOiAwLCBvID0gLTEsIGEgPSBGbyh2YShpIC8gZSkpOyBpID4gcjspIGFbKytvXSA9IFhlKHQsIHIsIHIgKz0gZSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBncih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAtMSwgbiA9IHQgPyB0Lmxlbmd0aCA6IDAsIHIgPSAtMSwgaSA9IFtdOyArK2UgPCBuOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSB0W2VdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyAmJiAoaVsrK3JdID0gbykKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdnIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQgPyB0Lmxlbmd0aCA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gKChuID8gWm4odCwgZSwgbikgOiBudWxsID09IGUpICYmIChlID0gMSksIFhlKHQsIDAgPiBlID8gMCA6IGUpKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB5cih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdCA/IHQubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPyAoKG4gPyBabih0LCBlLCBuKSA6IG51bGwgPT0gZSkgJiYgKGUgPSAxKSwgZSA9IHIgLSAoK2UgfHwgMCksIFhlKHQsIDAsIDAgPiBlID8gMCA6IGUpKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBtcih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gZW4odCwgRm4oZSwgbiwgMyksICEwLCAhMCkgOiBbXQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gYnIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IGVuKHQsIEZuKGUsIG4sIDMpLCAhMCkgOiBbXQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24geHIodCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHQgPyB0Lmxlbmd0aCA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpID8gKG4gJiYgIm51bWJlciIgIT0gdHlwZW9mIG4gJiYgWm4odCwgZSwgbikgJiYgKG4gPSAwLCByID0gaSksIGplKHQsIGUsIG4sIHIpKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB3cih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID8gdFswXSA6IEUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9yKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0ID8gdC5sZW5ndGggOiAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiAmJiBabih0LCBlLCBuKSAmJiAoZSA9ICExKSwgciA/IEFlKHQsIGUpIDogW10KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGtyKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0ID8gdC5sZW5ndGggOiAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA/IEFlKHQsICEwKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUcih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdCA/IHQubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyKSByZXR1cm4gLTE7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgibnVtYmVyIiA9PSB0eXBlb2YgbikgbiA9IDAgPiBuID8gX2EociArIG4sIDApIDogbjsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBybih0LCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID4gaSAmJiAoZSA9PT0gZSA/IGUgPT09IHRbaV0gOiB0W2ldICE9PSB0W2ldKSA/IGkgOiAtMQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvKHQsIGUsIG4gfHwgMCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEVyKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlyKHQsIDEpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBqcih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdCA/IHQubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPyB0W2UgLSAxXSA6IEUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENyKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0ID8gdC5sZW5ndGggOiAwOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHJldHVybiAtMTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSByOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIm51bWJlciIgPT0gdHlwZW9mIG4pIGkgPSAoMCA+IG4gPyBfYShyICsgbiwgMCkgOiBrYShuIHx8IDAsIHIgLSAxKSkgKyAxOwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gcm4odCwgZSwgITApIC0gMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdFtpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZSA9PT0gZSA/IGUgPT09IG8gOiBvICE9PSBvKSA/IGkgOiAtMQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlICE9PSBlKSByZXR1cm4gdih0LCBpLCAhMCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBpLS07KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbaV0gPT09IGUpIHJldHVybiBpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTEKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNyKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGFyZ3VtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0WzBdOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWUgfHwgIWUubGVuZ3RoKSByZXR1cm4gZTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHIgPSBVbigpLCBpID0gdC5sZW5ndGg7ICsrbiA8IGk7KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbyA9IDAsIGEgPSB0W25dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvID0gcihlLCBhLCBvKSkgPiAtMTspIGhhLmNhbGwoZSwgbywgMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBBcih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gW107CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdCB8fCAhdC5sZW5ndGgpIHJldHVybiByOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHQubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSBGbihlLCBuLCAzKTsgKytpIDwgYTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gdFtpXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUocywgaSwgdCkgJiYgKHIucHVzaChzKSwgby5wdXNoKGkpKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB6ZSh0LCBvKSwgcgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTnIodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdnIodCwgMSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFJyKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0ID8gdC5sZW5ndGggOiAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA/IChuICYmICJudW1iZXIiICE9IHR5cGVvZiBuICYmIFpuKHQsIGUsIG4pICYmIChlID0gMCwgbiA9IHIpLCBYZSh0LCBlLCBuKSkgOiBbXQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSXIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQgPyB0Lmxlbmd0aCA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gKChuID8gWm4odCwgZSwgbikgOiBudWxsID09IGUpICYmIChlID0gMSksIFhlKHQsIDAsIDAgPiBlID8gMCA6IGUpKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBPcih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdCA/IHQubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPyAoKG4gPyBabih0LCBlLCBuKSA6IG51bGwgPT0gZSkgJiYgKGUgPSAxKSwgZSA9IHIgLSAoK2UgfHwgMCksIFhlKHQsIDAgPiBlID8gMCA6IGUpKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBMcih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHQubGVuZ3RoID8gZW4odCwgRm4oZSwgbiwgMyksICExLCAhMCkgOiBbXQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRHIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiB0Lmxlbmd0aCA/IGVuKHQsIEZuKGUsIG4sIDMpKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBQcih0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdCA/IHQubGVuZ3RoIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpKSByZXR1cm4gW107CiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgIT0gZSAmJiAiYm9vbGVhbiIgIT0gdHlwZW9mIGUgJiYgKHIgPSBuLCBuID0gWm4odCwgZSwgcikgPyBFIDogZSwgZSA9ICExKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBGbigpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG51bGwgIT0gbiB8fCBhICE9PSB4ZSkgJiYgKG4gPSBhKG4sIHIsIDMpKSwgZSAmJiBVbigpID09IG8gPyB4KHQsIG4pIDogWmUodCwgbikKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICRyKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0IHx8ICF0Lmxlbmd0aCkgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBzZSh0LCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUW4odCkgPyAobiA9IF9hKHQubGVuZ3RoLCBuKSwgITApIDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gRm8obik7ICsrZSA8IG47KSByW2VdID0gdWUodCwgVWUoZSkpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcXIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQgPyB0Lmxlbmd0aCA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcikgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICRyKHQpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbCA9PSBlID8gaSA6IChlID0gYW4oZSwgbiwgNCksIHVlKGksIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsZSh0LCBlLCBFLCAhMCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBIcigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IC0xLCBlID0gYXJndW1lbnRzLmxlbmd0aDsgKyt0IDwgZTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzW3RdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFFuKG4pKSB2YXIgciA9IHIgPyBjZShrZShyLCBuKSwga2UobiwgcikpIDogbgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gWmUocikgOiBbXQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTXIodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHQgPyB0Lmxlbmd0aCA6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoIXIgfHwgZSB8fCBBcyh0WzBdKSB8fCAoZSA9IFtdKTsgKytuIDwgcjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdFtuXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPyBpW29dID0gZVtuXSA6IG8gJiYgKGlbb1swXV0gPSBvWzFdKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBGcih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZSh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uX19jaGFpbl9fID0gITAsIG4KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEJyKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuY2FsbChuLCB0KSwgdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVXIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5jYWxsKG4sIHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBXcigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZyKHRoaXMpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB6cigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBtKHRoaXMudmFsdWUoKSwgdGhpcy5fX2NoYWluX18pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBWcih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUsIHIgPSB0aGlzOyByIGluc3RhbmNlb2YgbjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gaHIocik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID8gby5fX3dyYXBwZWRfXyA9IGkgOiBlID0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSByLl9fd3JhcHBlZF9fCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uX193cmFwcGVkX18gPSB0LCBlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBHcigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLl9fd3JhcHBlZF9fLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiAmJiBuLl9fZGlyX18gPCAwID8gdCA6IHQucmV2ZXJzZSgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCAmJiAobiA9IG5ldyBRKHRoaXMpKSwgbiA9IG4ucmV2ZXJzZSgpLCBuLl9fYWN0aW9uc19fLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmM6IFVyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtlXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzQXJnOiBFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgbmV3IG0obiwgdGhpcy5fX2NoYWluX18pCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhydShlKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gWHIoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlKCkgKyAiIgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSnIoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBubih0aGlzLl9fd3JhcHBlZF9fLCB0aGlzLl9fYWN0aW9uc19fKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gWXIodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IEFzKHQpID8gb2UgOiBUZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gJiYgWm4odCwgZSwgbikgJiYgKGUgPSBFKSwgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIGUgfHwgbiAhPT0gRSkgJiYgKGUgPSBGbihlLCBuLCAzKSksIHIodCwgZSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFFyKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBBcyh0KSA/IHNlIDogQ2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gRm4oZSwgbiwgMyksIHIodCwgZSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEtyKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzKHQsIEhlKGUpKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gWnIodCwgZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHQgPyBCYSh0KSA6IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBucihpKSB8fCAodCA9IG9vKHQpLCBpID0gdC5sZW5ndGgpLCBuID0gIm51bWJlciIgIT0gdHlwZW9mIG4gfHwgciAmJiBabihlLCBuLCByKSA/IDAgOiAwID4gbiA/IF9hKGkgKyBuLCAwKSA6IG4gfHwgMCwgInN0cmluZyIgPT0gdHlwZW9mIHQgfHwgIUFzKHQpICYmIEJpKHQpID8gaSA+PSBuICYmIHQuaW5kZXhPZihlLCBuKSA+IC0xIDogISFpICYmIFVuKHQsIGUsIG4pID4gLTEKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHRpKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBBcyh0KSA/IHVlIDogcWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gRm4oZSwgbiwgMyksIHIodCwgZSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVpKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpKHQsIExvKGUpKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbmkodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IEFzKHQpID8gc2UgOiBDZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBGbihlLCBuLCAzKSwgcih0LCBmdW5jdGlvbih0LCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWUodCwgbiwgcikKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJpKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPyBabih0LCBlLCBuKSA6IG51bGwgPT0gZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdCA9IGxyKHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0Lmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID4gMCA/IHRbVmUoMCwgciAtIDEpXSA6IEUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IEdpKHQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG8ubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHIgLSAxOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGUgPSBrYSgwID4gZSA/IDAgOiArZSB8fCAwLCByKTsgKytpIDwgZTspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gVmUoaSwgYSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IG9bc107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvW3NdID0gb1tpXSwgb1tpXSA9IHUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gby5sZW5ndGggPSBlLCBvCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBpaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByaSh0LCBTYSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9pKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0ID8gQmEodCkgOiAwOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnIoZSkgPyBlIDogTXModCkubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gQXModCkgPyBwZSA6IEplOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiAmJiBabih0LCBlLCBuKSAmJiAoZSA9IEUpLCAoImZ1bmN0aW9uIiAhPSB0eXBlb2YgZSB8fCBuICE9PSBFKSAmJiAoZSA9IEZuKGUsIG4sIDMpKSwgcih0LCBlKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc2kodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSB0KSByZXR1cm4gW107CiAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgWm4odCwgZSwgbikgJiYgKGUgPSBFKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAtMTsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IEZuKGUsIG4sIDMpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHFlKHQsIGZ1bmN0aW9uKHQsIG4sIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JpdGVyaWE6IGUodCwgbiwgaSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6ICsrciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFllKGksIGwpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1aSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyBbXSA6IChyICYmIFpuKGUsIG4sIHIpICYmIChuID0gRSksIEFzKGUpIHx8IChlID0gbnVsbCA9PSBlID8gW10gOiBbZV0pLCBBcyhuKSB8fCAobiA9IG51bGwgPT0gbiA/IFtdIDogW25dKSwgUWUodCwgZSwgbikpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBRcih0LCBIZShlKSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGxpKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gZSwgZSA9IG4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHhhKHQgPSArdCkgPyB0IDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtLXQgPCAxID8gZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDogdm9pZCAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuICYmIFpuKHQsIGUsIG4pICYmIChlID0gRSksIGUgPSB0ICYmIG51bGwgPT0gZSA/IHQubGVuZ3RoIDogX2EoK2UgfHwgMCwgMCksICRuKHQsIEwsIEUsIEUsIEUsIEUsIGUpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBwaSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiAhPSB0eXBlb2YgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIHQpIHRocm93IG5ldyBZbyhVKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBlLCBlID0gcgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtLXQgPiAwICYmIChuID0gZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSwgMSA+PSB0ICYmIChlID0gRSksIG4KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaGkodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCAmJiBzYShoKSwgYyAmJiBzYShjKSwgZyA9IDAsIGMgPSBoID0gZCA9IEUKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaShlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuICYmIHNhKG4pLCBjID0gaCA9IGQgPSBFLCBlICYmIChnID0gZ3MoKSwgbCA9IHQuYXBwbHkocCwgdSksIGggfHwgYyB8fCAodSA9IHAgPSBFKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbygpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZSAtIChncygpIC0gZik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAwID49IHQgfHwgdCA+IGUgPyBpKGQsIGMpIDogaCA9IHBhKG8sIHQpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKHksIGgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHMoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodSA9IGFyZ3VtZW50cywgZiA9IGdzKCksIHAgPSB0aGlzLCBkID0geSAmJiAoaCB8fCAhbSksIHYgPT09ICExKSB2YXIgbiA9IG0gJiYgIWg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjIHx8IG0gfHwgKGcgPSBmKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHYgLSAoZiAtIGcpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gMCA+PSByIHx8IHIgPiB2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPyAoYyAmJiAoYyA9IHNhKGMpKSwgZyA9IGYsIGwgPSB0LmFwcGx5KHAsIHUpKSA6IGMgfHwgKGMgPSBwYShhLCByKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICYmIGggPyBoID0gc2EoaCkgOiBoIHx8IGUgPT09IHYgfHwgKGggPSBwYShvLCBlKSksIG4gJiYgKGkgPSAhMCwgbCA9IHQuYXBwbHkocCwgdSkpLCAhaSB8fCBoIHx8IGMgfHwgKHUgPSBwID0gRSksIGwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSwgYywgbCwgZiwgcCwgaCwgZCwgZyA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gITEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlID0gMCA+IGUgPyAwIDogK2UgfHwgMCwgbiA9PT0gITApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gITEKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIExpKG4pICYmIChtID0gISFuLmxlYWRpbmcsIHYgPSAibWF4V2FpdCIgaW4gbiAmJiBfYSgrbi5tYXhXYWl0IHx8IDAsIGUpLCB5ID0gInRyYWlsaW5nIiBpbiBuID8gISFuLnRyYWlsaW5nIDogeSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmNhbmNlbCA9IHIsIHMKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRpKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIHQgfHwgZSAmJiAiZnVuY3Rpb24iICE9IHR5cGVvZiBlKSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGFyZ3VtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gZSA/IGUuYXBwbHkodGhpcywgcikgOiByWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuLmNhY2hlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uaGFzKGkpKSByZXR1cm4gby5nZXQoaSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHQuYXBwbHkodGhpcywgcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5jYWNoZSA9IG8uc2V0KGksIGEpLCBhCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLmNhY2hlID0gbmV3IGRpLkNhY2hlLCBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHZpKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpKDIsIHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB5aSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0gX2EoZSA9PT0gRSA/IHQubGVuZ3RoIC0gMSA6ICtlIHx8IDAsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IGFyZ3VtZW50cywgciA9IC0xLCBpID0gX2Eobi5sZW5ndGggLSBlLCAwKSwgbyA9IEZvKGkpOyArK3IgPCBpOykgb1tyXSA9IG5bZSArIHJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKHRoaXMsIG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKHRoaXMsIG5bMF0sIG8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKHRoaXMsIG5bMF0sIG5bMV0sIG8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gRm8oZSArIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAociA9IC0xOyArK3IgPCBlOykgYVtyXSA9IG5bcl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbZV0gPSBvLCB0LmFwcGx5KHRoaXMsIGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBtaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5hcHBseSh0aGlzLCBlKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBiaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gITAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gITA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgWW8oVSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuID09PSAhMSA/IHIgPSAhMSA6IExpKG4pICYmIChyID0gImxlYWRpbmciIGluIG4gPyAhIW4ubGVhZGluZyA6IHIsIGkgPSAidHJhaWxpbmciIGluIG4gPyAhIW4udHJhaWxpbmcgOiBpKSwgaGkodCwgZSwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVhZGluZzogciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFdhaXQ6ICtlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhaWxpbmc6IGkKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHhpKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPSBudWxsID09IGUgPyBTbyA6IGUsICRuKGUsIEksIEUsIFt0XSwgW10pCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB3aSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlICYmICJib29sZWFuIiAhPSB0eXBlb2YgZSAmJiBabih0LCBlLCBuKSA/IGUgPSAhMSA6ICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgJiYgKHIgPSBuLCBuID0gZSwgZSA9ICExKSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YgbiA/IHdlKHQsIGUsIGFuKG4sIHIsIDEpKSA6IHdlKHQsIGUpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBfaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiBlID8gd2UodCwgITAsIGFuKGUsIG4sIDEpKSA6IHdlKHQsICEwKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24ga2kodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA+IGUKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFRpKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPj0gZQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRWkodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geSh0KSAmJiBRbih0KSAmJiBlYS5jYWxsKHQsICJjYWxsZWUiKSAmJiAhbGEuY2FsbCh0LCAiY2FsbGVlIikKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGppKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09ICEwIHx8IHQgPT09ICExIHx8IHkodCkgJiYgcmEuY2FsbCh0KSA9PSBHOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQ2kodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geSh0KSAmJiByYS5jYWxsKHQpID09IFgKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFNpKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdCAmJiAxID09PSB0Lm5vZGVUeXBlICYmIHkodCkgJiYgIU1pKHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBBaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09IHQgPyAhMCA6IFFuKHQpICYmIChBcyh0KSB8fCBCaSh0KSB8fCBFaSh0KSB8fCB5KHQpICYmIE9pKHQuc3BsaWNlKSkgPyAhdC5sZW5ndGggOiAhTXModCkubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBOaSh0LCBlLCBuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSAiZnVuY3Rpb24iID09IHR5cGVvZiBuID8gYW4obiwgciwgMykgOiBFOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IG4gPyBuKHQsIGUpIDogRTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IEUgPyBEZSh0LCBlLCBuKSA6ICEhaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUmkodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geSh0KSAmJiAic3RyaW5nIiA9PSB0eXBlb2YgdC5tZXNzYWdlICYmIHJhLmNhbGwodCkgPT0gSgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSWkodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIm51bWJlciIgPT0gdHlwZW9mIHQgJiYgeGEodCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE9pKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExpKHQpICYmIHJhLmNhbGwodCkgPT0gWQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTGkodCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHR5cGVvZiB0OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gISF0ICYmICgib2JqZWN0IiA9PSBlIHx8ICJmdW5jdGlvbiIgPT0gZSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIERpKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSAiZnVuY3Rpb24iID09IHR5cGVvZiBuID8gYW4obiwgciwgMykgOiBFLCAkZSh0LCBXbihlKSwgbikKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFBpKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhpKHQpICYmIHQgIT0gK3QKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICRpKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/ICExIDogT2kodCkgPyBvYS50ZXN0KHRhLmNhbGwodCkpIDogeSh0KSAmJiBMdC50ZXN0KHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBxaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsID09PSB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBIaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAibnVtYmVyIiA9PSB0eXBlb2YgdCB8fCB5KHQpICYmIHJhLmNhbGwodCkgPT0gSwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTWkodCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF5KHQpIHx8IHJhLmNhbGwodCkgIT0gWiB8fCBFaSh0KSB8fCAhZWEuY2FsbCh0LCAiY29uc3RydWN0b3IiKSAmJiAoZSA9IHQuY29uc3RydWN0b3IsICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgJiYgIShlIGluc3RhbmNlb2YgZSkpKSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTmUodCwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUKICAgICAgICAgICAgICAgICAgICAgICAgfSksIG4gPT09IEUgfHwgZWEuY2FsbCh0LCBuKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gRmkodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGkodCkgJiYgcmEuY2FsbCh0KSA9PSB0dAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQmkodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gInN0cmluZyIgPT0gdHlwZW9mIHQgfHwgeSh0KSAmJiByYS5jYWxsKHQpID09IG50CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBVaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5KHQpICYmIG5yKHQubGVuZ3RoKSAmJiAhIUJ0W3JhLmNhbGwodCldCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBXaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBFCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB6aSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gVmkodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA+PSB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBHaSh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gdCA/IEJhKHQpIDogMDsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5yKGUpID8gZSA/IHRlKHQpIDogW10gOiBvbyh0KQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gWGkodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmUodCwgdG8odCkpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBKaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gRGEodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuICYmIFpuKHQsIGUsIG4pICYmIChlID0gRSksIGUgPyB5ZShyLCBlKSA6IHIKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFlpKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9lKHQsIHRvKHQpKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUWkodCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG51bGwgPT0gdCA/IEUgOiBMZSh0LCBwcihlKSwgZSArICIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPT09IEUgPyBuIDogcgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gS2kodCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSB0KSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZWEuY2FsbCh0LCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuICYmICF0cihlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSBwcihlKSwgdCA9IDEgPT0gZS5sZW5ndGggPyB0IDogTGUodCwgWGUoZSwgMCwgLTEpKSwgbnVsbCA9PSB0KSByZXR1cm4gITE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0ganIoZSksIG4gPSBlYS5jYWxsKHQsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gfHwgbnIodC5sZW5ndGgpICYmIEtuKGUsIHQubGVuZ3RoKSAmJiAoQXModCkgfHwgRWkodCkpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBaaSh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgWm4odCwgZSwgbikgJiYgKGUgPSBFKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IC0xLCBpID0gTXModCksIG8gPSBpLmxlbmd0aCwgYSA9IHt9OyArK3IgPCBvOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBpW3JdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSB0W3NdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA/IGVhLmNhbGwoYSwgdSkgPyBhW3VdLnB1c2gocykgOiBhW3VdID0gW3NdIDogYVt1XSA9IHMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdG8odCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSB0KSByZXR1cm4gW107CiAgICAgICAgICAgICAgICAgICAgICAgIExpKHQpIHx8ICh0ID0gR28odCkpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBlID0gZSAmJiBucihlKSAmJiAoQXModCkgfHwgRWkodCkpICYmIGUgfHwgMDsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IHQuY29uc3RydWN0b3IsIHIgPSAtMSwgaSA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIG4gJiYgbi5wcm90b3R5cGUgPT09IHQsIG8gPSBGbyhlKSwgYSA9IGUgPiAwOyArK3IgPCBlOykgb1tyXSA9IHIgKyAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcyBpbiB0KSBhICYmIEtuKHMsIGUpIHx8ICJjb25zdHJ1Y3RvciIgPT0gcyAmJiAoaSB8fCAhZWEuY2FsbCh0LCBzKSkgfHwgby5wdXNoKHMpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZW8odCkgewogICAgICAgICAgICAgICAgICAgICAgICB0ID0gZnIodCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAtMSwgbiA9IE1zKHQpLCByID0gbi5sZW5ndGgsIGkgPSBGbyhyKTsgKytlIDwgcjspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gbltlXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlbZV0gPSBbbywgdFtvXV0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbm8odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG51bGwgPT0gdCA/IEUgOiB0W2VdOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gciA9PT0gRSAmJiAobnVsbCA9PSB0IHx8IHRyKGUsIHQpIHx8IChlID0gcHIoZSksIHQgPSAxID09IGUubGVuZ3RoID8gdCA6IExlKHQsIFhlKGUsIDAsIC0xKSksIHIgPSBudWxsID09IHQgPyBFIDogdFtqcihlKV0pLCByID0gciA9PT0gRSA/IG4gOiByKSwgT2kocikgPyByLmNhbGwodCkgOiByCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBybyh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IHQpIHJldHVybiB0OwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGUgKyAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IG51bGwgIT0gdFtyXSB8fCB0cihlLCB0KSA/IFtyXSA6IHByKGUpOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gLTEsIG8gPSBlLmxlbmd0aCwgYSA9IG8gLSAxLCBzID0gdDsgbnVsbCAhPSBzICYmICsraSA8IG87KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IGVbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaShzKSAmJiAoaSA9PSBhID8gc1t1XSA9IG4gOiBudWxsID09IHNbdV0gJiYgKHNbdV0gPSBLbihlW2kgKyAxXSkgPyBbXSA6IHt9KSksIHMgPSBzW3VdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGlvKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBBcyh0KSB8fCBVaSh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgPSBGbihlLCByLCA0KSwgbnVsbCA9PSBuKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgfHwgTGkodCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IHQuY29uc3RydWN0b3I7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGkgPyBBcyh0KSA/IG5ldyBvIDogW10gOiBEYShPaShvKSA/IG8ucHJvdG90eXBlIDogRSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBuID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSA/IGVlIDogUmUpKHQsIGZ1bmN0aW9uKHQsIHIsIGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlKG4sIHQsIHIsIGkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBuCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBvbyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0bih0LCBNcyh0KSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFvKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRuKHQsIHRvKHQpKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc28odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9ICtlIHx8IDAsIG4gPT09IEUgPyAobiA9IGUsIGUgPSAwKSA6IG4gPSArbiB8fCAwLCB0ID49IGthKGUsIG4pICYmIHQgPCBfYShlLCBuKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdW8odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBuICYmIFpuKHQsIGUsIG4pICYmIChlID0gbiA9IEUpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IG51bGwgPT0gdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBudWxsID09IGU7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IG4gJiYgKGkgJiYgImJvb2xlYW4iID09IHR5cGVvZiB0ID8gKG4gPSB0LCB0ID0gMSkgOiAiYm9vbGVhbiIgPT0gdHlwZW9mIGUgJiYgKG4gPSBlLCBpID0gITApKSwgciAmJiBpICYmIChlID0gMSwgaSA9ICExKSwgdCA9ICt0IHx8IDAsIGkgPyAoZSA9IHQsIHQgPSAwKSA6IGUgPSArZSB8fCAwLCBuIHx8IHQgJSAxIHx8IGUgJSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IGphKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2EodCArIG8gKiAoZSAtIHQgKyB1YSgiMWUtIiArICgobyArICIiKS5sZW5ndGggLSAxKSkpLCBlKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBWZSh0LCBlKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gY28odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHModCksIHQgJiYgdC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHQuc2xpY2UoMSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGxvKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBzKHQpLCB0ICYmIHQucmVwbGFjZShQdCwgcCkucmVwbGFjZShBdCwgIiIpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmbyh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBzKHQpLCBlICs9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA9IG4gPT09IEUgPyByIDoga2EoMCA+IG4gPyAwIDogK24gfHwgMCwgciksIG4gLT0gZS5sZW5ndGgsIG4gPj0gMCAmJiB0LmluZGV4T2YoZSwgbikgPT0gbgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcG8odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHModCksIHQgJiYgeHQudGVzdCh0KSA/IHQucmVwbGFjZShtdCwgaCkgOiB0CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBobyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gcyh0KSwgdCAmJiBTdC50ZXN0KHQpID8gdC5yZXBsYWNlKEN0LCBkKSA6IHQgfHwgIig/OikiCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnbyh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBzKHQpLCBlID0gK2U7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gdC5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyID49IGUgfHwgIXhhKGUpKSByZXR1cm4gdDsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAoZSAtIHIpIC8gMiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBtYShpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB2YShpKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gPSBPbigiIiwgYSwgbiksIG4uc2xpY2UoMCwgbykgKyB0ICsgbgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdm8odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG4gPyBabih0LCBlLCBuKSA6IG51bGwgPT0gZSkgPyBlID0gMCA6IGUgJiYgKGUgPSArZSksIHQgPSB4byh0KSwgRWEodCwgZSB8fCAoT3QudGVzdCh0KSA/IDE2IDogMTApKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24geW8odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9IHModCksIGUgPSArZSwgMSA+IGUgfHwgIXQgfHwgIXhhKGUpKSByZXR1cm4gbjsKICAgICAgICAgICAgICAgICAgICAgICAgZG8gZSAlIDIgJiYgKG4gKz0gdCksIGUgPSBtYShlIC8gMiksIHQgKz0gdDsgd2hpbGUgKGUpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbW8odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHModCksIG4gPSBudWxsID09IG4gPyAwIDoga2EoMCA+IG4gPyAwIDogK24gfHwgMCwgdC5sZW5ndGgpLCB0Lmxhc3RJbmRleE9mKGUsIG4pID09IG4KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGJvKHQsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLnRlbXBsYXRlU2V0dGluZ3M7CiAgICAgICAgICAgICAgICAgICAgICAgIHIgJiYgWm4odCwgbiwgcikgJiYgKG4gPSByID0gRSksIHQgPSBzKHQpLCBuID0gdmUoeWUoe30sIHIgfHwgbiksIGksIGdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG8sIGEsIHUgPSB2ZSh5ZSh7fSwgbi5pbXBvcnRzKSwgaS5pbXBvcnRzLCBnZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gTXModSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdG4odSwgYyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBuLmludGVycG9sYXRlIHx8ICR0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9ICJfX3AgKz0gJyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gWG8oKG4uZXNjYXBlIHx8ICR0KS5zb3VyY2UgKyAifCIgKyBwLnNvdXJjZSArICJ8IiArIChwID09PSBrdCA/IFJ0IDogJHQpLnNvdXJjZSArICJ8IiArIChuLmV2YWx1YXRlIHx8ICR0KS5zb3VyY2UgKyAifCQiLCAiZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdiA9ICIvLyMgc291cmNlVVJMPSIgKyAoInNvdXJjZVVSTCIgaW4gbiA/IG4uc291cmNlVVJMIDogImxvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbIiArICsrRnQgKyAiXSIpICsgIlxuIjsKICAgICAgICAgICAgICAgICAgICAgICAgdC5yZXBsYWNlKGQsIGZ1bmN0aW9uKGUsIG4sIHIsIGksIHMsIHUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByIHx8IChyID0gaSksIGggKz0gdC5zbGljZShmLCB1KS5yZXBsYWNlKHF0LCBnKSwgbiAmJiAobyA9ICEwLCBoICs9ICInICtcbl9fZSgiICsgbiArICIpICtcbiciKSwgcyAmJiAoYSA9ICEwLCBoICs9ICInO1xuIiArIHMgKyAiO1xuX19wICs9ICciKSwgciAmJiAoaCArPSAiJyArXG4oKF9fdCA9ICgiICsgciArICIpKSA9PSBudWxsID8gJycgOiBfX3QpICtcbiciKSwgZiA9IHUgKyBlLmxlbmd0aCwgZQogICAgICAgICAgICAgICAgICAgICAgICB9KSwgaCArPSAiJztcbiI7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ID0gbi52YXJpYWJsZTsKICAgICAgICAgICAgICAgICAgICAgICAgeSB8fCAoaCA9ICJ3aXRoIChvYmopIHtcbiIgKyBoICsgIlxufVxuIiksIGggPSAoYSA/IGgucmVwbGFjZShkdCwgIiIpIDogaCkucmVwbGFjZShndCwgIiQxIikucmVwbGFjZSh2dCwgIiQxOyIpLCBoID0gImZ1bmN0aW9uKCIgKyAoeSB8fCAib2JqIikgKyAiKSB7XG4iICsgKHkgPyAiIiA6ICJvYmogfHwgKG9iaiA9IHt9KTtcbiIpICsgInZhciBfX3QsIF9fcCA9ICcnIiArIChvID8gIiwgX19lID0gXy5lc2NhcGUiIDogIiIpICsgKGEgPyAiLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcbmZ1bmN0aW9uIHByaW50KCkgeyBfX3AgKz0gX19qLmNhbGwoYXJndW1lbnRzLCAnJykgfVxuIiA6ICI7XG4iKSArIGggKyAicmV0dXJuIF9fcFxufSI7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtID0gUXMoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gV28oYywgdiArICJyZXR1cm4gIiArIGgpLmFwcGx5KEUsIGwpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5zb3VyY2UgPSBoLCBSaShtKSkgdGhyb3cgbTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHhvKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHQgPSBzKHQpKSA/IChuID8gWm4ociwgZSwgbikgOiBudWxsID09IGUpID8gdC5zbGljZSh3KHQpLCBfKHQpICsgMSkgOiAoZSArPSAiIiwgdC5zbGljZSh1KHQsIGUpLCBjKHQsIGUpICsgMSkpIDogdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gd28odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gcyh0KSwgdCA/IChuID8gWm4ociwgZSwgbikgOiBudWxsID09IGUpID8gdC5zbGljZSh3KHQpKSA6IHQuc2xpY2UodSh0LCBlICsgIiIpKSA6IHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIF9vKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0OwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IHModCksIHQgPyAobiA/IFpuKHIsIGUsIG4pIDogbnVsbCA9PSBlKSA/IHQuc2xpY2UoMCwgXyh0KSArIDEpIDogdC5zbGljZSgwLCBjKHQsIGUgKyAiIikgKyAxKSA6IHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGtvKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbiAmJiBabih0LCBlLCBuKSAmJiAoZSA9IEUpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IFAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gJDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT0gZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChMaShlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gInNlcGFyYXRvciIgaW4gZSA/IGUuc2VwYXJhdG9yIDogbzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gImxlbmd0aCIgaW4gZSA/ICtlLmxlbmd0aCB8fCAwIDogciwgaSA9ICJvbWlzc2lvbiIgaW4gZSA/IHMoZS5vbWlzc2lvbikgOiBpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgciA9ICtlIHx8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID0gcyh0KSwgciA+PSB0Lmxlbmd0aCkgcmV0dXJuIHQ7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gciAtIGkubGVuZ3RoOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoMSA+IGEpIHJldHVybiBpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdSA9IHQuc2xpY2UoMCwgYSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09IG8pIHJldHVybiB1ICsgaTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpKG8pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5zbGljZShhKS5zZWFyY2gobykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYywgbCwgZiA9IHQuc2xpY2UoMCwgYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvLmdsb2JhbCB8fCAobyA9IFhvKG8uc291cmNlLCAoSXQuZXhlYyhvKSB8fCAiIikgKyAiZyIpKSwgby5sYXN0SW5kZXggPSAwOyBjID0gby5leGVjKGYpOykgbCA9IGMuaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHUuc2xpY2UoMCwgbnVsbCA9PSBsID8gYSA6IGwpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5pbmRleE9mKG8sIGEpICE9IGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gdS5sYXN0SW5kZXhPZihvKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPiAtMSAmJiAodSA9IHUuc2xpY2UoMCwgcCkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHUgKyBpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBUbyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gcyh0KSwgdCAmJiBidC50ZXN0KHQpID8gdC5yZXBsYWNlKHl0LCBrKSA6IHQKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEVvKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gJiYgWm4odCwgZSwgbikgJiYgKGUgPSBFKSwgdCA9IHModCksIHQubWF0Y2goZSB8fCBIdCkgfHwgW10KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGpvKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gJiYgWm4odCwgZSwgbikgJiYgKGUgPSBFKSwgeSh0KSA/IEFvKHQpIDogeGUodCwgZSkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIENvKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gU28odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gQW8odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSGUod2UodCwgITApKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTm8odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWUodCwgd2UoZSwgITApKQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUm8odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PSBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IExpKGUpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSByID8gTXMoZSkgOiBFLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBpICYmIGkubGVuZ3RoID8gT2UoZSwgaSkgOiBFOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgKG8gPyBvLmxlbmd0aCA6IHIpIHx8IChvID0gITEsIG4gPSBlLCBlID0gdCwgdCA9IHRoaXMpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgbyB8fCAobyA9IE9lKGUsIE1zKGUpKSk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gITAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gLTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1ID0gT2kodCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gby5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIG4gPT09ICExID8gYSA9ICExIDogTGkobikgJiYgImNoYWluIiBpbiBuICYmIChhID0gbi5jaGFpbik7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyArK3MgPCBjOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBvW3NdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBlW2xdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdFtsXSA9IGYsIHUgJiYgKHQucHJvdG90eXBlW2xdID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9fY2hhaW5fXzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEgfHwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSB0KHRoaXMuX193cmFwcGVkX18pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSByLl9fYWN0aW9uc19fID0gdGUodGhpcy5fX2FjdGlvbnNfXyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jOiBlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3VtZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzQXJnOiB0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgci5fX2NoYWluX18gPSBuLCByCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuYXBwbHkodCwgY2UoW3RoaXMudmFsdWUoKV0sIGFyZ3VtZW50cykpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfShmKSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gSW8oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZS5fID0gaWEsIHRoaXMKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE9vKCkge30KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gTG8odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHIodCkgPyBVZSh0KSA6IFdlKHQpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBEbyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTGUodCwgcHIoZSksIGUgKyAiIikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUG8odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBuICYmIFpuKHQsIGUsIG4pICYmIChlID0gbiA9IEUpLCB0ID0gK3QgfHwgMCwgbiA9IG51bGwgPT0gbiA/IDEgOiArbiB8fCAwLCBudWxsID09IGUgPyAoZSA9IHQsIHQgPSAwKSA6IGUgPSArZSB8fCAwOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gLTEsIGkgPSBfYSh2YSgoZSAtIHQpIC8gKG4gfHwgMSkpLCAwKSwgbyA9IEZvKGkpOyArK3IgPCBpOykgb1tyXSA9IHQsIHQgKz0gbjsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8KICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICRvKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPSBtYSh0KSwgMSA+IHQgfHwgIXhhKHQpKSByZXR1cm4gW107CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gLTEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gRm8oa2EodCwgQWEpKTsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChlID0gYW4oZSwgbiwgMSk7ICsrciA8IHQ7KSBBYSA+IHIgPyBpW3JdID0gZShyKSA6IGUocik7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBxbyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gKytuYTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHModCkgKyBlCiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBIbyh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoK3QgfHwgMCkgKyAoK2UgfHwgMCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE1vKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gJiYgWm4odCwgZSwgbikgJiYgKGUgPSBFKSwgZSA9IEZuKGUsIG4sIDMpLCAxID09IGUubGVuZ3RoID8gaGUoQXModCkgPyB0IDogbHIodCksIGUpIDogS2UodCwgZSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdCA9IHQgPyByZS5kZWZhdWx0cyhuZS5PYmplY3QoKSwgdCwgcmUucGljayhuZSwgTXQpKSA6IG5lOwogICAgICAgICAgICAgICAgICAgIHZhciBGbyA9IHQuQXJyYXksCiAgICAgICAgICAgICAgICAgICAgICAgIEJvID0gdC5EYXRlLAogICAgICAgICAgICAgICAgICAgICAgICBVbyA9IHQuRXJyb3IsCiAgICAgICAgICAgICAgICAgICAgICAgIFdvID0gdC5GdW5jdGlvbiwKICAgICAgICAgICAgICAgICAgICAgICAgem8gPSB0Lk1hdGgsCiAgICAgICAgICAgICAgICAgICAgICAgIFZvID0gdC5OdW1iZXIsCiAgICAgICAgICAgICAgICAgICAgICAgIEdvID0gdC5PYmplY3QsCiAgICAgICAgICAgICAgICAgICAgICAgIFhvID0gdC5SZWdFeHAsCiAgICAgICAgICAgICAgICAgICAgICAgIEpvID0gdC5TdHJpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgIFlvID0gdC5UeXBlRXJyb3IsCiAgICAgICAgICAgICAgICAgICAgICAgIFFvID0gRm8ucHJvdG90eXBlLAogICAgICAgICAgICAgICAgICAgICAgICBLbyA9IEdvLnByb3RvdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgWm8gPSBKby5wcm90b3R5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgIHRhID0gV28ucHJvdG90eXBlLnRvU3RyaW5nLAogICAgICAgICAgICAgICAgICAgICAgICBlYSA9IEtvLmhhc093blByb3BlcnR5LAogICAgICAgICAgICAgICAgICAgICAgICBuYSA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhID0gS28udG9TdHJpbmcsCiAgICAgICAgICAgICAgICAgICAgICAgIGlhID0gbmUuXywKICAgICAgICAgICAgICAgICAgICAgICAgb2EgPSBYbygiXiIgKyB0YS5jYWxsKGVhKS5yZXBsYWNlKC9bXFxeJC4qKz8oKVtcXXt9fF0vZywgIlxcJCYiKS5yZXBsYWNlKC9oYXNPd25Qcm9wZXJ0eXwoZnVuY3Rpb24pLio/KD89XFxcKCl8IGZvciAuKz8oPz1cXFxdKS9nLCAiJDEuKj8iKSArICIkIiksCiAgICAgICAgICAgICAgICAgICAgICAgIGFhID0gdC5BcnJheUJ1ZmZlciwKICAgICAgICAgICAgICAgICAgICAgICAgc2EgPSB0LmNsZWFyVGltZW91dCwKICAgICAgICAgICAgICAgICAgICAgICAgdWEgPSB0LnBhcnNlRmxvYXQsCiAgICAgICAgICAgICAgICAgICAgICAgIGNhID0gem8ucG93LAogICAgICAgICAgICAgICAgICAgICAgICBsYSA9IEtvLnByb3BlcnR5SXNFbnVtZXJhYmxlLAogICAgICAgICAgICAgICAgICAgICAgICBmYSA9IHpuKHQsICJTZXQiKSwKICAgICAgICAgICAgICAgICAgICAgICAgcGEgPSB0LnNldFRpbWVvdXQsCiAgICAgICAgICAgICAgICAgICAgICAgIGhhID0gUW8uc3BsaWNlLAogICAgICAgICAgICAgICAgICAgICAgICBkYSA9IHQuVWludDhBcnJheSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2EgPSB6bih0LCAiV2Vha01hcCIpLAogICAgICAgICAgICAgICAgICAgICAgICB2YSA9IHpvLmNlaWwsCiAgICAgICAgICAgICAgICAgICAgICAgIHlhID0gem4oR28sICJjcmVhdGUiKSwKICAgICAgICAgICAgICAgICAgICAgICAgbWEgPSB6by5mbG9vciwKICAgICAgICAgICAgICAgICAgICAgICAgYmEgPSB6bihGbywgImlzQXJyYXkiKSwKICAgICAgICAgICAgICAgICAgICAgICAgeGEgPSB0LmlzRmluaXRlLAogICAgICAgICAgICAgICAgICAgICAgICB3YSA9IHpuKEdvLCAia2V5cyIpLAogICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHpvLm1heCwKICAgICAgICAgICAgICAgICAgICAgICAga2EgPSB6by5taW4sCiAgICAgICAgICAgICAgICAgICAgICAgIFRhID0gem4oQm8sICJub3ciKSwKICAgICAgICAgICAgICAgICAgICAgICAgRWEgPSB0LnBhcnNlSW50LAogICAgICAgICAgICAgICAgICAgICAgICBqYSA9IHpvLnJhbmRvbSwKICAgICAgICAgICAgICAgICAgICAgICAgQ2EgPSBWby5ORUdBVElWRV9JTkZJTklUWSwKICAgICAgICAgICAgICAgICAgICAgICAgU2EgPSBWby5QT1NJVElWRV9JTkZJTklUWSwKICAgICAgICAgICAgICAgICAgICAgICAgQWEgPSA0Mjk0OTY3Mjk1LAogICAgICAgICAgICAgICAgICAgICAgICBOYSA9IEFhIC0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgUmEgPSBBYSA+Pj4gMSwKICAgICAgICAgICAgICAgICAgICAgICAgSWEgPSA5MDA3MTk5MjU0NzQwOTkxLAogICAgICAgICAgICAgICAgICAgICAgICBPYSA9IGdhICYmIG5ldyBnYSwKICAgICAgICAgICAgICAgICAgICAgICAgTGEgPSB7fTsKICAgICAgICAgICAgICAgICAgICBlLnN1cHBvcnQgPSB7fTsKICAgICAgICAgICAgICAgICAgICBlLnRlbXBsYXRlU2V0dGluZ3MgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVzY2FwZTogd3QsCiAgICAgICAgICAgICAgICAgICAgICAgIGV2YWx1YXRlOiBfdCwKICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGU6IGt0LAogICAgICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZTogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF86IGUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgdmFyIERhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB0KCkge30KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKExpKGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucHJvdG90eXBlID0gZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wcm90b3R5cGUgPSBFCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuIHx8IHt9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgICAgICAgICAgICAgUGEgPSBwbihSZSksCiAgICAgICAgICAgICAgICAgICAgICAgICRhID0gcG4oSWUsICEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgcWEgPSBobigpLAogICAgICAgICAgICAgICAgICAgICAgICBIYSA9IGhuKCEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgTWEgPSBPYSA/IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYS5zZXQodCwgZSksIHQKICAgICAgICAgICAgICAgICAgICAgICAgfSA6IFNvLAogICAgICAgICAgICAgICAgICAgICAgICBGYSA9IE9hID8gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9hLmdldCh0KQogICAgICAgICAgICAgICAgICAgICAgICB9IDogT28sCiAgICAgICAgICAgICAgICAgICAgICAgIEJhID0gVWUoImxlbmd0aCIpLAogICAgICAgICAgICAgICAgICAgICAgICBVYSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGdzKCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBIIC0gKGkgLSBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9IGksIG8gPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgrK3QgPj0gcSkgcmV0dXJuIG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hKG4sIHIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgICAgICAgICAgICAgV2EgPSB5aShmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geSh0KSAmJiBRbih0KSA/IGtlKHQsIEFlKGUsICExLCAhMCkpIDogW10KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIHphID0gX24oKSwKICAgICAgICAgICAgICAgICAgICAgICAgVmEgPSBfbighMCksCiAgICAgICAgICAgICAgICAgICAgICAgIEdhID0geWkoZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IHQubGVuZ3RoLCBuID0gZSwgciA9IEZvKGYpLCBpID0gVW4oKSwgYSA9IGkgPT0gbywgcyA9IFtdOyBuLS07KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB0W25dID0gUW4odSA9IHRbbl0pID8gdSA6IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJbbl0gPSBhICYmIHUubGVuZ3RoID49IDEyMCA/IGduKG4gJiYgdSkgOiBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHRbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9IC0xLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgPSBjID8gYy5sZW5ndGggOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSByWzBdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdDogZm9yICg7ICsrbCA8IGY7KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1ID0gY1tsXSwgKHAgPyBRdChwLCB1KSA6IGkocywgdSwgMCkpIDwgMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuID0gZTsgLS1uOykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSByW25dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChoID8gUXQoaCwgdSkgOiBpKHRbbl0sIHUsIDApKSA8IDApIGNvbnRpbnVlIHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwICYmIHAucHVzaCh1KSwgcy5wdXNoKHUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIFhhID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IEFlKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBtZSh0LCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB6ZSh0LCBlLnNvcnQocikpLCBuCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBKYSA9IFBuKCksCiAgICAgICAgICAgICAgICAgICAgICAgIFlhID0gUG4oITApLAogICAgICAgICAgICAgICAgICAgICAgICBRYSA9IHlpKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBaZShBZSh0LCAhMSwgITApKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgS2EgPSB5aShmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUW4odCkgPyBrZSh0LCBlKSA6IFtdCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBaYSA9IHlpKCRyKSwKICAgICAgICAgICAgICAgICAgICAgICAgdHMgPSB5aShmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlID4gMiA/IHRbZSAtIDJdIDogRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZSA+IDEgPyB0W2UgLSAxXSA6IEU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA+IDIgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgbiA/IGUgLT0gMiA6IChuID0gZSA+IDEgJiYgImZ1bmN0aW9uIiA9PSB0eXBlb2YgciA/ICgtLWUsIHIpIDogRSwgciA9IEUpLCB0Lmxlbmd0aCA9IGUsIHFyKHQsIG4sIHIpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBlcyA9IHlpKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gQWUodCksIHRoaXMudGhydShmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFp0KEFzKGUpID8gZSA6IFtmcihlKV0sIHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgbnMgPSB5aShmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWUodCwgQWUoZSkpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBycyA9IGxuKGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhLmNhbGwodCwgbikgPyArK3Rbbl0gOiB0W25dID0gMQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgaXMgPSB3bihQYSksCiAgICAgICAgICAgICAgICAgICAgICAgIG9zID0gd24oJGEsICEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgYXMgPSBFbihlZSwgUGEpLAogICAgICAgICAgICAgICAgICAgICAgICBzcyA9IEVuKGllLCAkYSksCiAgICAgICAgICAgICAgICAgICAgICAgIHVzID0gbG4oZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWEuY2FsbCh0LCBuKSA/IHRbbl0ucHVzaChlKSA6IHRbbl0gPSBbZV0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGNzID0gbG4oZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdFtuXSA9IGUKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGxzID0geWkoZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAtMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdHIoZSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IFFuKHQpID8gRm8odC5sZW5ndGgpIDogW107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGEodCwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzID0gaSA/IGUgOiBvICYmIG51bGwgIT0gdCA/IHRbZV0gOiBFOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFbKytyXSA9IHMgPyBzLmFwcGx5KHQsIG4pIDogWW4odCwgZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBhCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBmcyA9IGxuKGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbbiA/IDAgOiAxXS5wdXNoKGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgcHMgPSBSbihsZSwgUGEpLAogICAgICAgICAgICAgICAgICAgICAgICBocyA9IFJuKGZlLCAkYSksCiAgICAgICAgICAgICAgICAgICAgICAgIGRzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuIFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gJiYgWm4oZVswXSwgZVsxXSwgbikgJiYgKGUubGVuZ3RoID0gMSksIFFlKHQsIEFlKGUpLCBbXSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGdzID0gVGEgfHwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG5ldyBCbykuZ2V0VGltZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHZzID0geWkoZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBDOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4ubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBiKG4sIHZzLnBsYWNlaG9sZGVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByIHw9IEkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkbih0LCByLCBlLCBuLCBpKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgeXMgPSB5aShmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gZS5sZW5ndGggPyBBZShlKSA6IFlpKHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IC0xLCByID0gZS5sZW5ndGg7ICsrbiA8IHI7KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlW25dOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbaV0gPSAkbih0W2ldLCBDLCB0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIG1zID0geWkoZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBDIHwgUzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gYihuLCBtcy5wbGFjZWhvbGRlcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciB8PSBJCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJG4oZSwgciwgdCwgbiwgaSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIGJzID0gbW4oTiksCiAgICAgICAgICAgICAgICAgICAgICAgIHhzID0gbW4oUiksCiAgICAgICAgICAgICAgICAgICAgICAgIHdzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9lKHQsIDEsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBfcyA9IHlpKGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZSh0LCBlLCBuKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAga3MgPSBUbigpLAogICAgICAgICAgICAgICAgICAgICAgICBUcyA9IFRuKCEwKSwKICAgICAgICAgICAgICAgICAgICAgICAgRXMgPSB5aShmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA9IEFlKGUpLCAiZnVuY3Rpb24iICE9IHR5cGVvZiB0IHx8ICFvZShlLCBhKSkgdGhyb3cgbmV3IFlvKFUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBlLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5aShmdW5jdGlvbihyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGthKHIubGVuZ3RoLCBuKTsgaS0tOykgcltpXSA9IGVbaV0ocltpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkodGhpcywgcikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBqcyA9IE5uKEkpLAogICAgICAgICAgICAgICAgICAgICAgICBDcyA9IE5uKE8pLAogICAgICAgICAgICAgICAgICAgICAgICBTcyA9IHlpKGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkbih0LCBELCBFLCBFLCBFLCBBZShlKSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIEFzID0gYmEgfHwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkodCkgJiYgbnIodC5sZW5ndGgpICYmIHJhLmNhbGwodCkgPT0gVgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBOcyA9IGZuKEZlKSwKICAgICAgICAgICAgICAgICAgICAgICAgUnMgPSBmbihmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbiA/IHZlKHQsIGUsIG4pIDogeWUodCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIElzID0gYm4oUnMsIGRlKSwKICAgICAgICAgICAgICAgICAgICAgICAgT3MgPSBibihOcywgb3IpLAogICAgICAgICAgICAgICAgICAgICAgICBMcyA9IGtuKFJlKSwKICAgICAgICAgICAgICAgICAgICAgICAgRHMgPSBrbihJZSksCiAgICAgICAgICAgICAgICAgICAgICAgIFBzID0gam4ocWEpLAogICAgICAgICAgICAgICAgICAgICAgICAkcyA9IGpuKEhhKSwKICAgICAgICAgICAgICAgICAgICAgICAgcXMgPSBDbihSZSksCiAgICAgICAgICAgICAgICAgICAgICAgIEhzID0gQ24oSWUpLAogICAgICAgICAgICAgICAgICAgICAgICBNcyA9IHdhID8gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBudWxsID09IHQgPyBFIDogdC5jb25zdHJ1Y3RvcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiBlICYmIGUucHJvdG90eXBlID09PSB0IHx8ICJmdW5jdGlvbiIgIT0gdHlwZW9mIHQgJiYgUW4odCkgPyBjcih0KSA6IExpKHQpID8gd2EodCkgOiBbXQogICAgICAgICAgICAgICAgICAgICAgICB9IDogY3IsCiAgICAgICAgICAgICAgICAgICAgICAgIEZzID0gU24oITApLAogICAgICAgICAgICAgICAgICAgICAgICBCcyA9IFNuKCksCiAgICAgICAgICAgICAgICAgICAgICAgIFVzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gdCkgcmV0dXJuIHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJmdW5jdGlvbiIgIT0gdHlwZW9mIGVbMF0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHVlKEFlKGUpLCBKbyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyKHQsIGtlKHRvKHQpLCBlKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gYW4oZVswXSwgZVsxXSwgMyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3IodCwgZnVuY3Rpb24odCwgZSwgcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhbih0LCBlLCByKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIFdzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT0gdCA/IHt9IDogImZ1bmN0aW9uIiA9PSB0eXBlb2YgZVswXSA/IHNyKHQsIGFuKGVbMF0sIGVbMV0sIDMpKSA6IGFyKHQsIEFlKGUpKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgenMgPSB2bihmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA9IGUudG9Mb3dlckNhc2UoKSwgdCArIChuID8gZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGUuc2xpY2UoMSkgOiBlKQogICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgVnMgPSB2bihmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCArIChuID8gIi0iIDogIiIpICsgZS50b0xvd2VyQ2FzZSgpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICBHcyA9IEFuKCksCiAgICAgICAgICAgICAgICAgICAgICAgIFhzID0gQW4oITApLAogICAgICAgICAgICAgICAgICAgICAgICBKcyA9IHZuKGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICsgKG4gPyAiXyIgOiAiIikgKyBlLnRvTG93ZXJDYXNlKCkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIFlzID0gdm4oZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgKyAobiA/ICIgIiA6ICIiKSArIChlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZS5zbGljZSgxKSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIFFzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5hcHBseShFLCBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSaShuKSA/IG4gOiBuZXcgVW8obikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIEtzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWW4obiwgdCwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIFpzID0geWkoZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWW4odCwgbiwgZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIHR1ID0gRG4oImNlaWwiKSwKICAgICAgICAgICAgICAgICAgICAgICAgZXUgPSBEbigiZmxvb3IiKSwKICAgICAgICAgICAgICAgICAgICAgICAgbnUgPSB4bihraSwgQ2EpLAogICAgICAgICAgICAgICAgICAgICAgICBydSA9IHhuKHppLCBTYSksCiAgICAgICAgICAgICAgICAgICAgICAgIGl1ID0gRG4oInJvdW5kIik7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHJvdG90eXBlID0gbi5wcm90b3R5cGUsIG0ucHJvdG90eXBlID0gRGEobi5wcm90b3R5cGUpLCBtLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG0sIFEucHJvdG90eXBlID0gRGEobi5wcm90b3R5cGUpLCBRLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFEsIHp0LnByb3RvdHlwZVsiZGVsZXRlIl0gPSBWdCwgenQucHJvdG90eXBlLmdldCA9IEd0LCB6dC5wcm90b3R5cGUuaGFzID0gWHQsIHp0LnByb3RvdHlwZS5zZXQgPSBKdCwgWXQucHJvdG90eXBlLnB1c2ggPSBLdCwgZGkuQ2FjaGUgPSB6dCwgZS5hZnRlciA9IGxpLCBlLmFyeSA9IGZpLCBlLmFzc2lnbiA9IFJzLCBlLmF0ID0gbnMsIGUuYmVmb3JlID0gcGksIGUuYmluZCA9IHZzLCBlLmJpbmRBbGwgPSB5cywgZS5iaW5kS2V5ID0gbXMsIGUuY2FsbGJhY2sgPSBqbywgZS5jaGFpbiA9IEZyLCBlLmNodW5rID0gZHIsIGUuY29tcGFjdCA9IGdyLCBlLmNvbnN0YW50ID0gQ28sIGUuY291bnRCeSA9IHJzLCBlLmNyZWF0ZSA9IEppLCBlLmN1cnJ5ID0gYnMsIGUuY3VycnlSaWdodCA9IHhzLCBlLmRlYm91bmNlID0gaGksIGUuZGVmYXVsdHMgPSBJcywgZS5kZWZhdWx0c0RlZXAgPSBPcywgZS5kZWZlciA9IHdzLCBlLmRlbGF5ID0gX3MsIGUuZGlmZmVyZW5jZSA9IFdhLCBlLmRyb3AgPSB2ciwgZS5kcm9wUmlnaHQgPSB5ciwgZS5kcm9wUmlnaHRXaGlsZSA9IG1yLCBlLmRyb3BXaGlsZSA9IGJyLCBlLmZpbGwgPSB4ciwgZS5maWx0ZXIgPSBRciwgZS5mbGF0dGVuID0gX3IsIGUuZmxhdHRlbkRlZXAgPSBrciwgZS5mbG93ID0ga3MsIGUuZmxvd1JpZ2h0ID0gVHMsIGUuZm9yRWFjaCA9IGFzLCBlLmZvckVhY2hSaWdodCA9IHNzLCBlLmZvckluID0gUHMsIGUuZm9ySW5SaWdodCA9ICRzLCBlLmZvck93biA9IHFzLCBlLmZvck93blJpZ2h0ID0gSHMsIGUuZnVuY3Rpb25zID0gWWksIGUuZ3JvdXBCeSA9IHVzLCBlLmluZGV4QnkgPSBjcywgZS5pbml0aWFsID0gRXIsIGUuaW50ZXJzZWN0aW9uID0gR2EsIGUuaW52ZXJ0ID0gWmksIGUuaW52b2tlID0gbHMsIGUua2V5cyA9IE1zLCBlLmtleXNJbiA9IHRvLCBlLm1hcCA9IHRpLCBlLm1hcEtleXMgPSBGcywgZS5tYXBWYWx1ZXMgPSBCcywgZS5tYXRjaGVzID0gQW8sIGUubWF0Y2hlc1Byb3BlcnR5ID0gTm8sIGUubWVtb2l6ZSA9IGRpLCBlLm1lcmdlID0gTnMsIGUubWV0aG9kID0gS3MsIGUubWV0aG9kT2YgPSBacywgZS5taXhpbiA9IFJvLCBlLm1vZEFyZ3MgPSBFcywgZS5uZWdhdGUgPSBnaSwgZS5vbWl0ID0gVXMsIGUub25jZSA9IHZpLCBlLnBhaXJzID0gZW8sIGUucGFydGlhbCA9IGpzLCBlLnBhcnRpYWxSaWdodCA9IENzLCBlLnBhcnRpdGlvbiA9IGZzLCBlLnBpY2sgPSBXcywgZS5wbHVjayA9IGVpLCBlLnByb3BlcnR5ID0gTG8sIGUucHJvcGVydHlPZiA9IERvLCBlLnB1bGwgPSBTciwgZS5wdWxsQXQgPSBYYSwgZS5yYW5nZSA9IFBvLCBlLnJlYXJnID0gU3MsIGUucmVqZWN0ID0gbmksIGUucmVtb3ZlID0gQXIsIGUucmVzdCA9IE5yLCBlLnJlc3RQYXJhbSA9IHlpLCBlLnNldCA9IHJvLCBlLnNodWZmbGUgPSBpaSwgZS5zbGljZSA9IFJyLCBlLnNvcnRCeSA9IHNpLCBlLnNvcnRCeUFsbCA9IGRzLCBlLnNvcnRCeU9yZGVyID0gdWksIGUuc3ByZWFkID0gbWksIGUudGFrZSA9IElyLCBlLnRha2VSaWdodCA9IE9yLCBlLnRha2VSaWdodFdoaWxlID0gTHIsIGUudGFrZVdoaWxlID0gRHIsIGUudGFwID0gQnIsIGUudGhyb3R0bGUgPSBiaSwgZS50aHJ1ID0gVXIsIGUudGltZXMgPSAkbywgZS50b0FycmF5ID0gR2ksIGUudG9QbGFpbk9iamVjdCA9IFhpLCBlLnRyYW5zZm9ybSA9IGlvLCBlLnVuaW9uID0gUWEsIGUudW5pcSA9IFByLCBlLnVuemlwID0gJHIsIGUudW56aXBXaXRoID0gcXIsIGUudmFsdWVzID0gb28sIGUudmFsdWVzSW4gPSBhbywgZS53aGVyZSA9IGNpLCBlLndpdGhvdXQgPSBLYSwgZS53cmFwID0geGksIGUueG9yID0gSHIsIGUuemlwID0gWmEsIGUuemlwT2JqZWN0ID0gTXIsIGUuemlwV2l0aCA9IHRzLCBlLmJhY2tmbG93ID0gVHMsIGUuY29sbGVjdCA9IHRpLCBlLmNvbXBvc2UgPSBUcywgZS5lYWNoID0gYXMsIGUuZWFjaFJpZ2h0ID0gc3MsIGUuZXh0ZW5kID0gUnMsIGUuaXRlcmF0ZWUgPSBqbywgZS5tZXRob2RzID0gWWksIGUub2JqZWN0ID0gTXIsIGUuc2VsZWN0ID0gUXIsIGUudGFpbCA9IE5yLCBlLnVuaXF1ZSA9IFByLCBSbyhlLCBlKSwgZS5hZGQgPSBIbywgZS5hdHRlbXB0ID0gUXMsIGUuY2FtZWxDYXNlID0genMsIGUuY2FwaXRhbGl6ZSA9IGNvLCBlLmNlaWwgPSB0dSwgZS5jbG9uZSA9IHdpLCBlLmNsb25lRGVlcCA9IF9pLCBlLmRlYnVyciA9IGxvLCBlLmVuZHNXaXRoID0gZm8sIGUuZXNjYXBlID0gcG8sIGUuZXNjYXBlUmVnRXhwID0gaG8sIGUuZXZlcnkgPSBZciwgZS5maW5kID0gaXMsIGUuZmluZEluZGV4ID0gemEsIGUuZmluZEtleSA9IExzLCBlLmZpbmRMYXN0ID0gb3MsIGUuZmluZExhc3RJbmRleCA9IFZhLCBlLmZpbmRMYXN0S2V5ID0gRHMsIGUuZmluZFdoZXJlID0gS3IsIGUuZmlyc3QgPSB3ciwgZS5mbG9vciA9IGV1LCBlLmdldCA9IFFpLCBlLmd0ID0ga2ksIGUuZ3RlID0gVGksIGUuaGFzID0gS2ksIGUuaWRlbnRpdHkgPSBTbywgZS5pbmNsdWRlcyA9IFpyLCBlLmluZGV4T2YgPSBUciwgZS5pblJhbmdlID0gc28sIGUuaXNBcmd1bWVudHMgPSBFaSwgZS5pc0FycmF5ID0gQXMsIGUuaXNCb29sZWFuID0gamksIGUuaXNEYXRlID0gQ2ksIGUuaXNFbGVtZW50ID0gU2ksIGUuaXNFbXB0eSA9IEFpLCBlLmlzRXF1YWwgPSBOaSwgZS5pc0Vycm9yID0gUmksIGUuaXNGaW5pdGUgPSBJaSwgZS5pc0Z1bmN0aW9uID0gT2ksIGUuaXNNYXRjaCA9IERpLCBlLmlzTmFOID0gUGksIGUuaXNOYXRpdmUgPSAkaSwgZS5pc051bGwgPSBxaSwgZS5pc051bWJlciA9IEhpLCBlLmlzT2JqZWN0ID0gTGksIGUuaXNQbGFpbk9iamVjdCA9IE1pLCBlLmlzUmVnRXhwID0gRmksIGUuaXNTdHJpbmcgPSBCaSwgZS5pc1R5cGVkQXJyYXkgPSBVaSwgZS5pc1VuZGVmaW5lZCA9IFdpLCBlLmtlYmFiQ2FzZSA9IFZzLCBlLmxhc3QgPSBqciwgZS5sYXN0SW5kZXhPZiA9IENyLCBlLmx0ID0gemksIGUubHRlID0gVmksIGUubWF4ID0gbnUsIGUubWluID0gcnUsIGUubm9Db25mbGljdCA9IElvLCBlLm5vb3AgPSBPbywgZS5ub3cgPSBncywgZS5wYWQgPSBnbywgZS5wYWRMZWZ0ID0gR3MsIGUucGFkUmlnaHQgPSBYcywgZS5wYXJzZUludCA9IHZvLCBlLnJhbmRvbSA9IHVvLCBlLnJlZHVjZSA9IHBzLCBlLnJlZHVjZVJpZ2h0ID0gaHMsIGUucmVwZWF0ID0geW8sIGUucmVzdWx0ID0gbm8sIGUucm91bmQgPSBpdSwgZS5ydW5JbkNvbnRleHQgPSBULCBlLnNpemUgPSBvaSwgZS5zbmFrZUNhc2UgPSBKcywgZS5zb21lID0gYWksIGUuc29ydGVkSW5kZXggPSBKYSwgZS5zb3J0ZWRMYXN0SW5kZXggPSBZYSwgZS5zdGFydENhc2UgPSBZcywgZS5zdGFydHNXaXRoID0gbW8sIGUuc3VtID0gTW8sIGUudGVtcGxhdGUgPSBibywgZS50cmltID0geG8sIGUudHJpbUxlZnQgPSB3bywgZS50cmltUmlnaHQgPSBfbywgZS50cnVuYyA9IGtvLCBlLnVuZXNjYXBlID0gVG8sIGUudW5pcXVlSWQgPSBxbywgZS53b3JkcyA9IEVvLCBlLmFsbCA9IFlyLCBlLmFueSA9IGFpLCBlLmNvbnRhaW5zID0gWnIsIGUuZXEgPSBOaSwgZS5kZXRlY3QgPSBpcywgZS5mb2xkbCA9IHBzLCBlLmZvbGRyID0gaHMsIGUuaGVhZCA9IHdyLCBlLmluY2x1ZGUgPSBaciwgZS5pbmplY3QgPSBwcywgUm8oZSwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSZShlLCBmdW5jdGlvbihuLCByKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByb3RvdHlwZVtyXSB8fCAodFtyXSA9IG4pCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCB0CiAgICAgICAgICAgICAgICAgICAgfSgpLCAhMSksIGUuc2FtcGxlID0gcmksIGUucHJvdG90eXBlLnNhbXBsZSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19jaGFpbl9fIHx8IG51bGwgIT0gdCA/IHRoaXMudGhydShmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmkoZSwgdCkKICAgICAgICAgICAgICAgICAgICAgICAgfSkgOiByaSh0aGlzLnZhbHVlKCkpCiAgICAgICAgICAgICAgICAgICAgfSwgZS5WRVJTSU9OID0gaiwgZWUoWyJiaW5kIiwgImJpbmRLZXkiLCAiY3VycnkiLCAiY3VycnlSaWdodCIsICJwYXJ0aWFsIiwgInBhcnRpYWxSaWdodCJdLCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVbdF0ucGxhY2Vob2xkZXIgPSBlCiAgICAgICAgICAgICAgICAgICAgfSksIGVlKFsiZHJvcCIsICJ0YWtlIl0sIGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgUS5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHRoaXMuX19maWx0ZXJlZF9fOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgIWUpIHJldHVybiBuZXcgUSh0aGlzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBudWxsID09IG4gPyAxIDogX2EobWEobikgfHwgMCwgMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByID8gaS5fX3Rha2VDb3VudF9fID0ga2EoaS5fX3Rha2VDb3VudF9fLCBuKSA6IGkuX192aWV3c19fLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IG4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdCArIChpLl9fZGlyX18gPCAwID8gIlJpZ2h0IiA6ICIiKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIGkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgUS5wcm90b3R5cGVbdCArICJSaWdodCJdID0gZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpW3RdKGUpLnJldmVyc2UoKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksIGVlKFsiZmlsdGVyIiwgIm1hcCIsICJ0YWtlV2hpbGUiXSwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGUgKyAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IG4gIT0gQjsKICAgICAgICAgICAgICAgICAgICAgICAgUS5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IHRoaXMuY2xvbmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLl9faXRlcmF0ZWVzX18ucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZWU6IEZuKHQsIGUsIDEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBpLl9fZmlsdGVyZWRfXyA9IGkuX19maWx0ZXJlZF9fIHx8IHIsIGkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLCBlZShbImZpcnN0IiwgImxhc3QiXSwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9ICJ0YWtlIiArIChlID8gIlJpZ2h0IiA6ICIiKTsKICAgICAgICAgICAgICAgICAgICAgICAgUS5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzW25dKDEpLnZhbHVlKClbMF0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLCBlZShbImluaXRpYWwiLCAicmVzdCJdLCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gImRyb3AiICsgKGUgPyAiIiA6ICJSaWdodCIpOwogICAgICAgICAgICAgICAgICAgICAgICBRLnByb3RvdHlwZVt0XSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19maWx0ZXJlZF9fID8gbmV3IFEodGhpcykgOiB0aGlzW25dKDEpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwgZWUoWyJwbHVjayIsICJ3aGVyZSJdLCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZSA/ICJmaWx0ZXIiIDogIm1hcCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gZSA/IEhlIDogTG87CiAgICAgICAgICAgICAgICAgICAgICAgIFEucHJvdG90eXBlW3RdID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbbl0ocih0KSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLCBRLnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihTbykKICAgICAgICAgICAgICAgICAgICB9LCBRLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID0gRm4odCwgZSwgMSksIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhdChlKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0sIFEucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB0ID0gbnVsbCA9PSB0ID8gMCA6ICt0IHx8IDA7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpczsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uX19maWx0ZXJlZF9fICYmICh0ID4gMCB8fCAwID4gZSkgPyBuZXcgUShuKSA6ICgwID4gdCA/IG4gPSBuLnRha2VSaWdodCgtdCkgOiB0ICYmIChuID0gbi5kcm9wKHQpKSwgZSAhPT0gRSAmJiAoZSA9ICtlIHx8IDAsIG4gPSAwID4gZSA/IG4uZHJvcFJpZ2h0KC1lKSA6IG4udGFrZShlIC0gdCkpLCBuKQogICAgICAgICAgICAgICAgICAgIH0sIFEucHJvdG90eXBlLnRha2VSaWdodFdoaWxlID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkudGFrZVdoaWxlKHQsIGUpLnJldmVyc2UoKQogICAgICAgICAgICAgICAgICAgIH0sIFEucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFrZShTYSkKICAgICAgICAgICAgICAgICAgICB9LCBSZShRLnByb3RvdHlwZSwgZnVuY3Rpb24odCwgbikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IC9eKD86ZmlsdGVyfG1hcHxyZWplY3QpfFdoaWxlJC8udGVzdChuKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAvXig/OmZpcnN0fGxhc3QpJC8udGVzdChuKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlW2kgPyAidGFrZSIgKyAoImxhc3QiID09IG4gPyAiUmlnaHQiIDogIiIpIDogbl07CiAgICAgICAgICAgICAgICAgICAgICAgIG8gJiYgKGUucHJvdG90eXBlW25dID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGkgPyBbMV0gOiBhcmd1bWVudHMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuX19jaGFpbl9fLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSB0aGlzLl9fd3JhcHBlZF9fLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAhIXRoaXMuX19hY3Rpb25zX18ubGVuZ3RoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBhIGluc3RhbmNlb2YgUSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gZVswXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsID0gdSB8fCBBcyhhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwgJiYgciAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBjICYmIDEgIT0gYy5sZW5ndGggJiYgKHUgPSBsID0gITEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpICYmIG4gPyBvKHQsIDEpWzBdIDogby5hcHBseShFLCBjZShbdF0sIGUpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuYzogVXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFtmXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0FyZzogRQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IHUgJiYgIXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAmJiAhbikgcmV0dXJuIGggPyAoYSA9IGEuY2xvbmUoKSwgYS5fX2FjdGlvbnNfXy5wdXNoKHApLCB0LmNhbGwoYSkpIDogby5jYWxsKEUsIHRoaXMudmFsdWUoKSlbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWkgJiYgbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBoID8gYSA6IG5ldyBRKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkID0gdC5hcHBseShhLCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5fX2FjdGlvbnNfXy5wdXNoKHApLCBuZXcgbShkLCBuKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhydShmKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pLCBlZShbImpvaW4iLCAicG9wIiwgInB1c2giLCAicmVwbGFjZSIsICJzaGlmdCIsICJzb3J0IiwgInNwbGljZSIsICJzcGxpdCIsICJ1bnNoaWZ0Il0sIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAoL14oPzpyZXBsYWNlfHNwbGl0KSQvLnRlc3QodCkgPyBabyA6IFFvKVt0XSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSAvXig/OnB1c2h8c29ydHx1bnNoaWZ0KSQvLnRlc3QodCkgPyAidGFwIiA6ICJ0aHJ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAvXig/OmpvaW58cG9wfHJlcGxhY2V8c2hpZnQpJC8udGVzdCh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgZS5wcm90b3R5cGVbdF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gYXJndW1lbnRzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgIXRoaXMuX19jaGFpbl9fID8gbi5hcHBseSh0aGlzLnZhbHVlKCksIHQpIDogdGhpc1tyXShmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uYXBwbHkoZSwgdCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwgUmUoUS5wcm90b3R5cGUsIGZ1bmN0aW9uKHQsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBlW25dOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSByLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IExhW2ldIHx8IChMYVtpXSA9IFtdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jOiByCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksIExhW0luKEUsIFMpLm5hbWVdID0gW3sKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogIndyYXBwZXIiLAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jOiBFCiAgICAgICAgICAgICAgICAgICAgfV0sIFEucHJvdG90eXBlLmNsb25lID0gZXQsIFEucHJvdG90eXBlLnJldmVyc2UgPSBydCwgUS5wcm90b3R5cGUudmFsdWUgPSBXdCwgZS5wcm90b3R5cGUuY2hhaW4gPSBXciwgZS5wcm90b3R5cGUuY29tbWl0ID0genIsIGUucHJvdG90eXBlLmNvbmNhdCA9IGVzLCBlLnByb3RvdHlwZS5wbGFudCA9IFZyLCBlLnByb3RvdHlwZS5yZXZlcnNlID0gR3IsIGUucHJvdG90eXBlLnRvU3RyaW5nID0gWHIsIGUucHJvdG90eXBlLnJ1biA9IGUucHJvdG90eXBlLnRvSlNPTiA9IGUucHJvdG90eXBlLnZhbHVlT2YgPSBlLnByb3RvdHlwZS52YWx1ZSA9IEpyLCBlLnByb3RvdHlwZS5jb2xsZWN0ID0gZS5wcm90b3R5cGUubWFwLCBlLnByb3RvdHlwZS5oZWFkID0gZS5wcm90b3R5cGUuZmlyc3QsIGUucHJvdG90eXBlLnNlbGVjdCA9IGUucHJvdG90eXBlLmZpbHRlciwgZS5wcm90b3R5cGUudGFpbCA9IGUucHJvdG90eXBlLnJlc3QsIGUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBFLCBqID0gIjMuMTAuMSIsCiAgICAgICAgICAgICAgICAgICAgQyA9IDEsCiAgICAgICAgICAgICAgICAgICAgUyA9IDIsCiAgICAgICAgICAgICAgICAgICAgQSA9IDQsCiAgICAgICAgICAgICAgICAgICAgTiA9IDgsCiAgICAgICAgICAgICAgICAgICAgUiA9IDE2LAogICAgICAgICAgICAgICAgICAgIEkgPSAzMiwKICAgICAgICAgICAgICAgICAgICBPID0gNjQsCiAgICAgICAgICAgICAgICAgICAgTCA9IDEyOCwKICAgICAgICAgICAgICAgICAgICBEID0gMjU2LAogICAgICAgICAgICAgICAgICAgIFAgPSAzMCwKICAgICAgICAgICAgICAgICAgICAkID0gIi4uLiIsCiAgICAgICAgICAgICAgICAgICAgcSA9IDE1MCwKICAgICAgICAgICAgICAgICAgICBIID0gMTYsCiAgICAgICAgICAgICAgICAgICAgTSA9IDIwMCwKICAgICAgICAgICAgICAgICAgICBGID0gMSwKICAgICAgICAgICAgICAgICAgICBCID0gMiwKICAgICAgICAgICAgICAgICAgICBVID0gIkV4cGVjdGVkIGEgZnVuY3Rpb24iLAogICAgICAgICAgICAgICAgICAgIFcgPSAiX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyIsCiAgICAgICAgICAgICAgICAgICAgeiA9ICJbb2JqZWN0IEFyZ3VtZW50c10iLAogICAgICAgICAgICAgICAgICAgIFYgPSAiW29iamVjdCBBcnJheV0iLAogICAgICAgICAgICAgICAgICAgIEcgPSAiW29iamVjdCBCb29sZWFuXSIsCiAgICAgICAgICAgICAgICAgICAgWCA9ICJbb2JqZWN0IERhdGVdIiwKICAgICAgICAgICAgICAgICAgICBKID0gIltvYmplY3QgRXJyb3JdIiwKICAgICAgICAgICAgICAgICAgICBZID0gIltvYmplY3QgRnVuY3Rpb25dIiwKICAgICAgICAgICAgICAgICAgICBRID0gIltvYmplY3QgTWFwXSIsCiAgICAgICAgICAgICAgICAgICAgSyA9ICJbb2JqZWN0IE51bWJlcl0iLAogICAgICAgICAgICAgICAgICAgIFogPSAiW29iamVjdCBPYmplY3RdIiwKICAgICAgICAgICAgICAgICAgICB0dCA9ICJbb2JqZWN0IFJlZ0V4cF0iLAogICAgICAgICAgICAgICAgICAgIGV0ID0gIltvYmplY3QgU2V0XSIsCiAgICAgICAgICAgICAgICAgICAgbnQgPSAiW29iamVjdCBTdHJpbmddIiwKICAgICAgICAgICAgICAgICAgICBydCA9ICJbb2JqZWN0IFdlYWtNYXBdIiwKICAgICAgICAgICAgICAgICAgICBpdCA9ICJbb2JqZWN0IEFycmF5QnVmZmVyXSIsCiAgICAgICAgICAgICAgICAgICAgb3QgPSAiW29iamVjdCBGbG9hdDMyQXJyYXldIiwKICAgICAgICAgICAgICAgICAgICBhdCA9ICJbb2JqZWN0IEZsb2F0NjRBcnJheV0iLAogICAgICAgICAgICAgICAgICAgIHN0ID0gIltvYmplY3QgSW50OEFycmF5XSIsCiAgICAgICAgICAgICAgICAgICAgdXQgPSAiW29iamVjdCBJbnQxNkFycmF5XSIsCiAgICAgICAgICAgICAgICAgICAgY3QgPSAiW29iamVjdCBJbnQzMkFycmF5XSIsCiAgICAgICAgICAgICAgICAgICAgbHQgPSAiW29iamVjdCBVaW50OEFycmF5XSIsCiAgICAgICAgICAgICAgICAgICAgZnQgPSAiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0iLAogICAgICAgICAgICAgICAgICAgIHB0ID0gIltvYmplY3QgVWludDE2QXJyYXldIiwKICAgICAgICAgICAgICAgICAgICBodCA9ICJbb2JqZWN0IFVpbnQzMkFycmF5XSIsCiAgICAgICAgICAgICAgICAgICAgZHQgPSAvXGJfX3AgXCs9ICcnOy9nLAogICAgICAgICAgICAgICAgICAgIGd0ID0gL1xiKF9fcCBcKz0pICcnIFwrL2csCiAgICAgICAgICAgICAgICAgICAgdnQgPSAvKF9fZVwoLio/XCl8XGJfX3RcKSkgXCtcbicnOy9nLAogICAgICAgICAgICAgICAgICAgIHl0ID0gLyYoPzphbXB8bHR8Z3R8cXVvdHwjMzl8Izk2KTsvZywKICAgICAgICAgICAgICAgICAgICBtdCA9IC9bJjw+IidgXS9nLAogICAgICAgICAgICAgICAgICAgIGJ0ID0gUmVnRXhwKHl0LnNvdXJjZSksCiAgICAgICAgICAgICAgICAgICAgeHQgPSBSZWdFeHAobXQuc291cmNlKSwKICAgICAgICAgICAgICAgICAgICB3dCA9IC88JS0oW1xzXFNdKz8pJT4vZywKICAgICAgICAgICAgICAgICAgICBfdCA9IC88JShbXHNcU10rPyklPi9nLAogICAgICAgICAgICAgICAgICAgIGt0ID0gLzwlPShbXHNcU10rPyklPi9nLAogICAgICAgICAgICAgICAgICAgIFR0ID0gL1wufFxbKD86W15bXF1dKnwoWyInXSkoPzooPyFcMSlbXlxuXFxdfFxcLikqP1wxKVxdLywKICAgICAgICAgICAgICAgICAgICBFdCA9IC9eXHcqJC8sCiAgICAgICAgICAgICAgICAgICAganQgPSAvW14uW1xdXSt8XFsoPzooLT9cZCsoPzpcLlxkKyk/KXwoWyInXSkoKD86KD8hXDIpW15cblxcXXxcXC4pKj8pXDIpXF0vZywKICAgICAgICAgICAgICAgICAgICBDdCA9IC9eWzohLF18W1xcXiQuKis/KClbXF17fXxcL118KF5bMC05YS1mQS1GbnJ0dXZ4XSl8KFtcblxyXHUyMDI4XHUyMDI5XSkvZywKICAgICAgICAgICAgICAgICAgICBTdCA9IFJlZ0V4cChDdC5zb3VyY2UpLAogICAgICAgICAgICAgICAgICAgIEF0ID0gL1tcdTAzMDAtXHUwMzZmXHVmZTIwLVx1ZmUyM10vZywKICAgICAgICAgICAgICAgICAgICBOdCA9IC9cXChcXCk/L2csCiAgICAgICAgICAgICAgICAgICAgUnQgPSAvXCRceyhbXlxcfV0qKD86XFwuW15cXH1dKikqKVx9L2csCiAgICAgICAgICAgICAgICAgICAgSXQgPSAvXHcqJC8sCiAgICAgICAgICAgICAgICAgICAgT3QgPSAvXjBbeFhdLywKICAgICAgICAgICAgICAgICAgICBMdCA9IC9eXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXSQvLAogICAgICAgICAgICAgICAgICAgIER0ID0gL15cZCskLywKICAgICAgICAgICAgICAgICAgICBQdCA9IC9bXHhjMC1ceGQ2XHhkOC1ceGRlXHhkZi1ceGY2XHhmOC1ceGZmXS9nLAogICAgICAgICAgICAgICAgICAgICR0ID0gLygkXikvLAogICAgICAgICAgICAgICAgICAgIHF0ID0gL1snXG5cclx1MjAyOFx1MjAyOVxcXS9nLAogICAgICAgICAgICAgICAgICAgIEh0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gIltBLVpcXHhjMC1cXHhkNlxceGQ4LVxceGRlXSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gIlthLXpcXHhkZi1cXHhmNlxceGY4LVxceGZmXSsiOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVnRXhwKHQgKyAiKyg/PSIgKyB0ICsgZSArICIpfCIgKyB0ICsgIj8iICsgZSArICJ8IiArIHQgKyAiK3xbMC05XSsiLCAiZyIpCiAgICAgICAgICAgICAgICAgICAgfSgpLAogICAgICAgICAgICAgICAgICAgIE10ID0gWyJBcnJheSIsICJBcnJheUJ1ZmZlciIsICJEYXRlIiwgIkVycm9yIiwgIkZsb2F0MzJBcnJheSIsICJGbG9hdDY0QXJyYXkiLCAiRnVuY3Rpb24iLCAiSW50OEFycmF5IiwgIkludDE2QXJyYXkiLCAiSW50MzJBcnJheSIsICJNYXRoIiwgIk51bWJlciIsICJPYmplY3QiLCAiUmVnRXhwIiwgIlNldCIsICJTdHJpbmciLCAiXyIsICJjbGVhclRpbWVvdXQiLCAiaXNGaW5pdGUiLCAicGFyc2VGbG9hdCIsICJwYXJzZUludCIsICJzZXRUaW1lb3V0IiwgIlR5cGVFcnJvciIsICJVaW50OEFycmF5IiwgIlVpbnQ4Q2xhbXBlZEFycmF5IiwgIlVpbnQxNkFycmF5IiwgIlVpbnQzMkFycmF5IiwgIldlYWtNYXAiXSwKICAgICAgICAgICAgICAgICAgICBGdCA9IC0xLAogICAgICAgICAgICAgICAgICAgIEJ0ID0ge307CiAgICAgICAgICAgICAgICBCdFtvdF0gPSBCdFthdF0gPSBCdFtzdF0gPSBCdFt1dF0gPSBCdFtjdF0gPSBCdFtsdF0gPSBCdFtmdF0gPSBCdFtwdF0gPSBCdFtodF0gPSAhMCwgQnRbel0gPSBCdFtWXSA9IEJ0W2l0XSA9IEJ0W0ddID0gQnRbWF0gPSBCdFtKXSA9IEJ0W1ldID0gQnRbUV0gPSBCdFtLXSA9IEJ0W1pdID0gQnRbdHRdID0gQnRbZXRdID0gQnRbbnRdID0gQnRbcnRdID0gITE7CiAgICAgICAgICAgICAgICB2YXIgVXQgPSB7fTsKICAgICAgICAgICAgICAgIFV0W3pdID0gVXRbVl0gPSBVdFtpdF0gPSBVdFtHXSA9IFV0W1hdID0gVXRbb3RdID0gVXRbYXRdID0gVXRbc3RdID0gVXRbdXRdID0gVXRbY3RdID0gVXRbS10gPSBVdFtaXSA9IFV0W3R0XSA9IFV0W250XSA9IFV0W2x0XSA9IFV0W2Z0XSA9IFV0W3B0XSA9IFV0W2h0XSA9ICEwLCBVdFtKXSA9IFV0W1ldID0gVXRbUV0gPSBVdFtldF0gPSBVdFtydF0gPSAhMTsKICAgICAgICAgICAgICAgIHZhciBXdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgIsOAIjogIkEiLAogICAgICAgICAgICAgICAgICAgICAgICAiw4EiOiAiQSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDgiI6ICJBIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsODIjogIkEiLAogICAgICAgICAgICAgICAgICAgICAgICAiw4QiOiAiQSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDhSI6ICJBIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOgIjogImEiLAogICAgICAgICAgICAgICAgICAgICAgICAiw6EiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDoiI6ICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOjIjogImEiLAogICAgICAgICAgICAgICAgICAgICAgICAiw6QiOiAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDpSI6ICJhIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOHIjogIkMiLAogICAgICAgICAgICAgICAgICAgICAgICAiw6ciOiAiYyIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDkCI6ICJEIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOwIjogImQiLAogICAgICAgICAgICAgICAgICAgICAgICAiw4giOiAiRSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDiSI6ICJFIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOKIjogIkUiLAogICAgICAgICAgICAgICAgICAgICAgICAiw4siOiAiRSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDqCI6ICJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOpIjogImUiLAogICAgICAgICAgICAgICAgICAgICAgICAiw6oiOiAiZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDqyI6ICJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOMIjogIkkiLAogICAgICAgICAgICAgICAgICAgICAgICAiw40iOiAiSSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDjiI6ICJJIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOPIjogIkkiLAogICAgICAgICAgICAgICAgICAgICAgICAiw6wiOiAiaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDrSI6ICJpIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOuIjogImkiLAogICAgICAgICAgICAgICAgICAgICAgICAiw68iOiAiaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDkSI6ICJOIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOxIjogIm4iLAogICAgICAgICAgICAgICAgICAgICAgICAiw5IiOiAiTyIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDkyI6ICJPIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOUIjogIk8iLAogICAgICAgICAgICAgICAgICAgICAgICAiw5UiOiAiTyIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDliI6ICJPIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOYIjogIk8iLAogICAgICAgICAgICAgICAgICAgICAgICAiw7IiOiAibyIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDsyI6ICJvIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsO0IjogIm8iLAogICAgICAgICAgICAgICAgICAgICAgICAiw7UiOiAibyIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDtiI6ICJvIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsO4IjogIm8iLAogICAgICAgICAgICAgICAgICAgICAgICAiw5kiOiAiVSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDmiI6ICJVIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsObIjogIlUiLAogICAgICAgICAgICAgICAgICAgICAgICAiw5wiOiAiVSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDuSI6ICJ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgIsO6IjogInUiLAogICAgICAgICAgICAgICAgICAgICAgICAiw7siOiAidSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDvCI6ICJ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOdIjogIlkiLAogICAgICAgICAgICAgICAgICAgICAgICAiw70iOiAieSIsCiAgICAgICAgICAgICAgICAgICAgICAgICLDvyI6ICJ5IiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOGIjogIkFlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOmIjogImFlIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOeIjogIlRoIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsO+IjogInRoIiwKICAgICAgICAgICAgICAgICAgICAgICAgIsOfIjogInNzIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgenQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICImIjogIiZhbXA7IiwKICAgICAgICAgICAgICAgICAgICAgICAgIjwiOiAiJmx0OyIsCiAgICAgICAgICAgICAgICAgICAgICAgICI+IjogIiZndDsiLAogICAgICAgICAgICAgICAgICAgICAgICAnIic6ICImcXVvdDsiLAogICAgICAgICAgICAgICAgICAgICAgICAiJyI6ICImIzM5OyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJgIjogIiYjOTY7IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgVnQgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICImYW1wOyI6ICImIiwKICAgICAgICAgICAgICAgICAgICAgICAgIiZsdDsiOiAiPCIsCiAgICAgICAgICAgICAgICAgICAgICAgICImZ3Q7IjogIj4iLAogICAgICAgICAgICAgICAgICAgICAgICAiJnF1b3Q7IjogJyInLAogICAgICAgICAgICAgICAgICAgICAgICAiJiMzOTsiOiAiJyIsCiAgICAgICAgICAgICAgICAgICAgICAgICImIzk2OyI6ICJgIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgR3QgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICJmdW5jdGlvbiI6ICEwLAogICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6ICEwCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBYdCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgMDogIngzMCIsCiAgICAgICAgICAgICAgICAgICAgICAgIDE6ICJ4MzEiLAogICAgICAgICAgICAgICAgICAgICAgICAyOiAieDMyIiwKICAgICAgICAgICAgICAgICAgICAgICAgMzogIngzMyIsCiAgICAgICAgICAgICAgICAgICAgICAgIDQ6ICJ4MzQiLAogICAgICAgICAgICAgICAgICAgICAgICA1OiAieDM1IiwKICAgICAgICAgICAgICAgICAgICAgICAgNjogIngzNiIsCiAgICAgICAgICAgICAgICAgICAgICAgIDc6ICJ4MzciLAogICAgICAgICAgICAgICAgICAgICAgICA4OiAieDM4IiwKICAgICAgICAgICAgICAgICAgICAgICAgOTogIngzOSIsCiAgICAgICAgICAgICAgICAgICAgICAgIEE6ICJ4NDEiLAogICAgICAgICAgICAgICAgICAgICAgICBCOiAieDQyIiwKICAgICAgICAgICAgICAgICAgICAgICAgQzogIng0MyIsCiAgICAgICAgICAgICAgICAgICAgICAgIEQ6ICJ4NDQiLAogICAgICAgICAgICAgICAgICAgICAgICBFOiAieDQ1IiwKICAgICAgICAgICAgICAgICAgICAgICAgRjogIng0NiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGE6ICJ4NjEiLAogICAgICAgICAgICAgICAgICAgICAgICBiOiAieDYyIiwKICAgICAgICAgICAgICAgICAgICAgICAgYzogIng2MyIsCiAgICAgICAgICAgICAgICAgICAgICAgIGQ6ICJ4NjQiLAogICAgICAgICAgICAgICAgICAgICAgICBlOiAieDY1IiwKICAgICAgICAgICAgICAgICAgICAgICAgZjogIng2NiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG46ICJ4NmUiLAogICAgICAgICAgICAgICAgICAgICAgICByOiAieDcyIiwKICAgICAgICAgICAgICAgICAgICAgICAgdDogIng3NCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHU6ICJ4NzUiLAogICAgICAgICAgICAgICAgICAgICAgICB2OiAieDc2IiwKICAgICAgICAgICAgICAgICAgICAgICAgeDogIng3OCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIEp0ID0gewogICAgICAgICAgICAgICAgICAgICAgICAiXFwiOiAiXFwiLAogICAgICAgICAgICAgICAgICAgICAgICAiJyI6ICInIiwKICAgICAgICAgICAgICAgICAgICAgICAgIlxuIjogIm4iLAogICAgICAgICAgICAgICAgICAgICAgICAiXHIiOiAiciIsCiAgICAgICAgICAgICAgICAgICAgICAgICJcdTIwMjgiOiAidTIwMjgiLAogICAgICAgICAgICAgICAgICAgICAgICAiXHUyMDI5IjogInUyMDI5IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgWXQgPSBHdFt0eXBlb2Ygbl0gJiYgbiAmJiAhbi5ub2RlVHlwZSAmJiBuLAogICAgICAgICAgICAgICAgICAgIFF0ID0gR3RbdHlwZW9mIGVdICYmIGUgJiYgIWUubm9kZVR5cGUgJiYgZSwKICAgICAgICAgICAgICAgICAgICBLdCA9IFl0ICYmIFF0ICYmICJvYmplY3QiID09IHR5cGVvZiB0ICYmIHQgJiYgdC5PYmplY3QgJiYgdCwKICAgICAgICAgICAgICAgICAgICBadCA9IEd0W3R5cGVvZiBzZWxmXSAmJiBzZWxmICYmIHNlbGYuT2JqZWN0ICYmIHNlbGYsCiAgICAgICAgICAgICAgICAgICAgdGUgPSBHdFt0eXBlb2Ygd2luZG93XSAmJiB3aW5kb3cgJiYgd2luZG93Lk9iamVjdCAmJiB3aW5kb3csCiAgICAgICAgICAgICAgICAgICAgZWUgPSBRdCAmJiBRdC5leHBvcnRzID09PSBZdCAmJiBZdCwKICAgICAgICAgICAgICAgICAgICBuZSA9IEt0IHx8IHRlICE9PSAodGhpcyAmJiB0aGlzLndpbmRvdykgJiYgdGUgfHwgWnQgfHwgdGhpcywKICAgICAgICAgICAgICAgICAgICByZSA9IFQoKTsKICAgICAgICAgICAgICAgICJmdW5jdGlvbiIgPT0gdHlwZW9mIGRlZmluZSAmJiAib2JqZWN0IiA9PSB0eXBlb2YgZGVmaW5lLmFtZCAmJiBkZWZpbmUuYW1kID8gKG5lLl8gPSByZSwgZGVmaW5lKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiByZQogICAgICAgICAgICAgICAgfSkpIDogWXQgJiYgUXQgPyBlZSA/IChRdC5leHBvcnRzID0gcmUpLl8gPSByZSA6IFl0Ll8gPSByZSA6IG5lLl8gPSByZQogICAgICAgICAgICB9KS5jYWxsKHRoaXMpCiAgICAgICAgfSkuY2FsbCh0aGlzLCAidW5kZWZpbmVkIiAhPSB0eXBlb2YgZ2xvYmFsID8gZ2xvYmFsIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlbGYgPyBzZWxmIDogInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHdpbmRvdyA6IHt9KQogICAgfSwge31dLAogICAgMTc6IFtmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgISBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7CiAgICAgICAgICAgICAgICBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2YgYm9vdHN0cmFwKSBib290c3RyYXAoInByb21pc2UiLCB0KTsKICAgICAgICAgICAgICAgIGVsc2UgaWYgKCJvYmplY3QiID09IHR5cGVvZiBuICYmICJvYmplY3QiID09IHR5cGVvZiBlKSBlLmV4cG9ydHMgPSB0KCk7CiAgICAgICAgICAgICAgICBlbHNlIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKHQpOwogICAgICAgICAgICAgICAgZWxzZSBpZiAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIHNlcykgewogICAgICAgICAgICAgICAgICAgIGlmICghc2VzLm9rKCkpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICBzZXMubWFrZVEgPSB0CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2Ygd2luZG93ICYmICJ1bmRlZmluZWQiID09IHR5cGVvZiBzZWxmKSB0aHJvdyBuZXcgRXJyb3IoIlRoaXMgZW52aXJvbm1lbnQgd2FzIG5vdCBhbnRpY2lwYXRlZCBieSBRLiBQbGVhc2UgZmlsZSBhIGJ1Zy4iKTsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiB3aW5kb3cgPyB3aW5kb3cgOiBzZWxmLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gci5ROwogICAgICAgICAgICAgICAgICAgIHIuUSA9IHQoKSwgci5RLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuUSA9IGksIHRoaXMKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAidXNlIHN0cmljdCI7CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZSh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSi5hcHBseSh0LCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG4odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBPYmplY3QodCkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIltvYmplY3QgU3RvcEl0ZXJhdGlvbl0iID09PSBydCh0KSB8fCB0IGluc3RhbmNlb2YgegogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkodCwgZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChCICYmIGUuc3RhY2sgJiYgIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgbnVsbCAhPT0gdCAmJiB0LnN0YWNrICYmIC0xID09PSB0LnN0YWNrLmluZGV4T2YoaXQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSBbXSwgciA9IGU7IHI7IHIgPSByLnNvdXJjZSkgci5zdGFjayAmJiBuLnVuc2hpZnQoci5zdGFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgIG4udW5zaGlmdCh0LnN0YWNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuLmpvaW4oIlxuIiArIGl0ICsgIlxuIik7CiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RhY2sgPSBvKGkpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8odCkgewogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSB0LnNwbGl0KCJcbiIpLCBuID0gW10sIHIgPSAwOyByIDwgZS5sZW5ndGg7ICsrcikgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9IGVbcl07CiAgICAgICAgICAgICAgICAgICAgICAgIHUoaSkgfHwgYShpKSB8fCAhaSB8fCBuLnB1c2goaSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uam9pbigiXG4iKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAtMSAhPT0gdC5pbmRleE9mKCIobW9kdWxlLmpzOiIpIHx8IC0xICE9PSB0LmluZGV4T2YoIihub2RlLmpzOiIpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gcyh0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAvYXQgLisgXCgoLispOihcZCspOig/OlxkKylcKSQvLmV4ZWModCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHJldHVybiBbZVsxXSwgTnVtYmVyKGVbMl0pXTsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IC9hdCAoW14gXSspOihcZCspOig/OlxkKykkLy5leGVjKHQpOwogICAgICAgICAgICAgICAgICAgIGlmIChuKSByZXR1cm4gW25bMV0sIE51bWJlcihuWzJdKV07CiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSAvLipAKC4rKTooXGQrKSQvLmV4ZWModCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgPyBbclsxXSwgTnVtYmVyKHJbMl0pXSA6IHZvaWQgMAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHUodCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gcyh0KTsKICAgICAgICAgICAgICAgICAgICBpZiAoIWUpIHJldHVybiAhMTsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGVbMF0sCiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBlWzFdOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuID09PSBXICYmIHIgPj0gViAmJiBjdCA+PSByCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gYygpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoQikgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHQuc3RhY2suc3BsaXQoIlxuIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZVswXS5pbmRleE9mKCJAIikgPiAwID8gZVsxXSA6IGVbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gcyhuKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBXID0gclswXSwgclsxXQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBsKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgY29uc29sZSAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBjb25zb2xlLndhcm4gJiYgY29uc29sZS53YXJuKGUgKyAiIGlzIGRlcHJlY2F0ZWQsIHVzZSAiICsgbiArICIgaW5zdGVhZC4iLCBuZXcgRXJyb3IoIiIpLnN0YWNrKSwgdC5hcHBseSh0LCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGYodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgZyA/IHQgOiBiKHQpID8gUyh0KSA6IEModCkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBwKCkgewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHQodCkgewogICAgICAgICAgICAgICAgICAgICAgICBlID0gdCwgby5zb3VyY2UgPSB0LCBRKG4sIGZ1bmN0aW9uKGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYubmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wcm9taXNlRGlzcGF0Y2guYXBwbHkodCwgbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCksIG4gPSB2b2lkIDAsIHIgPSB2b2lkIDAKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIGUsIG4gPSBbXSwKICAgICAgICAgICAgICAgICAgICAgICAgciA9IFtdLAogICAgICAgICAgICAgICAgICAgICAgICBpID0gdHQocC5wcm90b3R5cGUpLAogICAgICAgICAgICAgICAgICAgICAgICBvID0gdHQoZy5wcm90b3R5cGUpOwogICAgICAgICAgICAgICAgICAgIGlmIChvLnByb21pc2VEaXNwYXRjaCA9IGZ1bmN0aW9uKHQsIGksIG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gWShhcmd1bWVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA/IChuLnB1c2goYSksICJ3aGVuIiA9PT0gaSAmJiBvWzFdICYmIHIucHVzaChvWzFdKSkgOiBmLm5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJvbWlzZURpc3BhdGNoLmFwcGx5KGUsIGEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9LCBvLnZhbHVlT2YgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuKSByZXR1cm4gbzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0geShlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKHQpICYmIChlID0gdCksIHQKICAgICAgICAgICAgICAgICAgICAgICAgfSwgby5pbnNwZWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA/IGUuaW5zcGVjdCgpIDogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAicGVuZGluZyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSwgZi5sb25nU3RhY2tTdXBwb3J0ICYmIEIpIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcgogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgby5zdGFjayA9IGEuc3RhY2suc3Vic3RyaW5nKGEuc3RhY2suaW5kZXhPZigiXG4iKSArIDEpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBpLnByb21pc2UgPSBvLCBpLnJlc29sdmUgPSBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgfHwgdChmKG4pKQogICAgICAgICAgICAgICAgICAgIH0sIGkuZnVsZmlsbCA9IGZ1bmN0aW9uKG4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgZSB8fCB0KEMobikpCiAgICAgICAgICAgICAgICAgICAgfSwgaS5yZWplY3QgPSBmdW5jdGlvbihuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUgfHwgdChqKG4pKQogICAgICAgICAgICAgICAgICAgIH0sIGkubm90aWZ5ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICBlIHx8IFEociwgZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5uZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuKHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDApCiAgICAgICAgICAgICAgICAgICAgfSwgaQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGgodCkgewogICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iICE9IHR5cGVvZiB0KSB0aHJvdyBuZXcgVHlwZUVycm9yKCJyZXNvbHZlciBtdXN0IGJlIGEgZnVuY3Rpb24uIik7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBwKCk7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdChlLnJlc29sdmUsIGUucmVqZWN0LCBlLm5vdGlmeSkKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGUucmVqZWN0KG4pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnByb21pc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBkKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gaChmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwLCBpID0gdC5sZW5ndGg7IGkgPiByOyByKyspIGYodFtyXSkudGhlbihlLCBuKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gZyh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSBlICYmIChlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaihuZXcgRXJyb3IoIlByb21pc2UgZG9lcyBub3Qgc3VwcG9ydCBvcGVyYXRpb246ICIgKyB0KSkKICAgICAgICAgICAgICAgICAgICB9KSwgdm9pZCAwID09PSBuICYmIChuID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogInVua25vd24iCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHR0KGcucHJvdG90eXBlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoci5wcm9taXNlRGlzcGF0Y2ggPSBmdW5jdGlvbihuLCBpLCBvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHRbaV0gPyB0W2ldLmFwcGx5KHIsIG8pIDogZS5jYWxsKHIsIGksIG8pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IGoocykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgbihhKQogICAgICAgICAgICAgICAgICAgICAgICB9LCByLmluc3BlY3QgPSBuLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gbigpOwogICAgICAgICAgICAgICAgICAgICAgICAicmVqZWN0ZWQiID09PSBpLnN0YXRlICYmIChyLmV4Y2VwdGlvbiA9IGkucmVhc29uKSwgci52YWx1ZU9mID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IG4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAicGVuZGluZyIgPT09IHQuc3RhdGUgfHwgInJlamVjdGVkIiA9PT0gdC5zdGF0ZSA/IHIgOiB0LnZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB2KHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZih0KS50aGVuKGUsIG4sIHIpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24geSh0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKG0odCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSB0Lmluc3BlY3QoKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCJmdWxmaWxsZWQiID09PSBlLnN0YXRlKSByZXR1cm4gZS52YWx1ZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG0odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgZwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGIodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuKHQpICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIHQudGhlbgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHgodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBtKHQpICYmICJwZW5kaW5nIiA9PT0gdC5pbnNwZWN0KCkuc3RhdGUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiB3KHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIW0odCkgfHwgImZ1bGZpbGxlZCIgPT09IHQuaW5zcGVjdCgpLnN0YXRlCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gXyh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0odCkgJiYgInJlamVjdGVkIiA9PT0gdC5pbnNwZWN0KCkuc3RhdGUKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBrKCkgewogICAgICAgICAgICAgICAgICAgIG90Lmxlbmd0aCA9IDAsIGF0Lmxlbmd0aCA9IDAsIHV0IHx8ICh1dCA9ICEwKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFQoZSwgbikgewogICAgICAgICAgICAgICAgICAgIHV0ICYmICgib2JqZWN0IiA9PSB0eXBlb2YgdCAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiB0LmVtaXQgJiYgZi5uZXh0VGljay5ydW5BZnRlcihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLTEgIT09IEsoYXQsIGUpICYmICh0LmVtaXQoInVuaGFuZGxlZFJlamVjdGlvbiIsIG4sIGUpLCBzdC5wdXNoKGUpKQogICAgICAgICAgICAgICAgICAgIH0pLCBhdC5wdXNoKGUpLCBuICYmICJ1bmRlZmluZWQiICE9IHR5cGVvZiBuLnN0YWNrID8gb3QucHVzaChuLnN0YWNrKSA6IG90LnB1c2goIihubyBzdGFjaykgIiArIG4pKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEUoZSkgewogICAgICAgICAgICAgICAgICAgIGlmICh1dCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IEsoYXQsIGUpOyAtIDEgIT09IG4gJiYgKCJvYmplY3QiID09IHR5cGVvZiB0ICYmICJmdW5jdGlvbiIgPT0gdHlwZW9mIHQuZW1pdCAmJiBmLm5leHRUaWNrLnJ1bkFmdGVyKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBLKHN0LCBlKTsgLSAxICE9PSByICYmICh0LmVtaXQoInJlamVjdGlvbkhhbmRsZWQiLCBvdFtuXSwgZSksIHN0LnNwbGljZShyLCAxKSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksIGF0LnNwbGljZShuLCAxKSwgb3Quc3BsaWNlKG4sIDEpKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBqKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGcoewogICAgICAgICAgICAgICAgICAgICAgICB3aGVuOiBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSAmJiBFKHRoaXMpLCBlID8gZSh0KSA6IHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcwogICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICJyZWplY3RlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHQKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBUKGUsIHQpLCBlCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gQyh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGcoewogICAgICAgICAgICAgICAgICAgICAgICB3aGVuOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRbZV0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W2VdID0gbgogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAiZGVsZXRlIjogZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRbZV0KICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgcG9zdDogZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGwgPT09IGUgfHwgdm9pZCAwID09PSBlID8gdC5hcHBseSh2b2lkIDAsIG4pIDogdFtlXS5hcHBseSh0LCBuKQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBhcHBseTogZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkoZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAga2V5czogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnQodCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogImZ1bGZpbGxlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBTKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IHAoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZi5uZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudGhlbihlLnJlc29sdmUsIGUucmVqZWN0LCBlLm5vdGlmeSkKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZWplY3QobikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pLCBlLnByb21pc2UKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBBKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZyh7CiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVmOiBmdW5jdGlvbigpIHt9CiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRCh0LCBlLCBuKQogICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZih0KS5pbnNwZWN0KCkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE4odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLnNwcmVhZChlLCBuKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIFIodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZSh0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidW5kZWZpbmVkIiA9PSB0eXBlb2YgU3RvcEl0ZXJhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBuW3RdKGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAocykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaihzKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5kb25lID8gZihhLnZhbHVlKSA6IHYoYS52YWx1ZSwgaSwgbykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IG5bdF0oZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcihzKSA/IGYocy52YWx1ZSkgOiBqKHMpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdihhLCBpLCBvKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGUuYmluZChlLCAibmV4dCIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGUuYmluZChlLCAidGhyb3ciKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkoKQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBJKHQpIHsKICAgICAgICAgICAgICAgICAgICBmLmRvbmUoZi5hc3luYyh0KSgpKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE8odCkgewogICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyB6KHQpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gTCh0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTihbdGhpcywgUChhcmd1bWVudHMpXSwgZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkoZSwgbikKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gRCh0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkuZGlzcGF0Y2goZSwgbikKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiBQKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdih0LCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBwKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBRKHQsIGZ1bmN0aW9uKHIsIGksIG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbShpKSAmJiAiZnVsZmlsbGVkIiA9PT0gKGEgPSBpLmluc3BlY3QoKSkuc3RhdGUgPyB0W29dID0gYS52YWx1ZSA6ICgrK2UsIHYoaSwgZnVuY3Rpb24ocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbb10gPSByLCAwID09PSAtLWUgJiYgbi5yZXNvbHZlKHQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBuLnJlamVjdCwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ubm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IG8sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKQogICAgICAgICAgICAgICAgICAgICAgICB9LCB2b2lkIDApLCAwID09PSBlICYmIG4ucmVzb2x2ZSh0KSwgbi5wcm9taXNlCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAkKHQpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdC5sZW5ndGgpIHJldHVybiBmLnJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IGYuZGVmZXIoKSwKICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDA7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFEodCwgZnVuY3Rpb24ociwgaSwgbykgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucmVzb2x2ZSh0KQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbi0tLCAwID09PSBuICYmIGUucmVqZWN0KG5ldyBFcnJvcigiQ2FuJ3QgZ2V0IGZ1bGZpbGxtZW50IHZhbHVlIGZyb20gYW55IHByb21pc2UsIGFsbCBwcm9taXNlcyB3ZXJlIHJlamVjdGVkLiIpKQogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubm90aWZ5KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogbywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IHRbb107CiAgICAgICAgICAgICAgICAgICAgICAgIG4rKywgdihjLCBhLCBzLCB1KQogICAgICAgICAgICAgICAgICAgIH0sIHZvaWQgMCksIGUucHJvbWlzZQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHEodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB2KHQsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBaKHQsIGYpLCB2KFAoWih0LCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdih0LCBHLCBHKQogICAgICAgICAgICAgICAgICAgICAgICB9KSksIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEgodCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLmFsbFNldHRsZWQoKQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIE0odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLnRoZW4odm9pZCAwLCB2b2lkIDAsIGUpCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZnVuY3Rpb24gRih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkubm9kZWlmeShlKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIEIgPSAhMTsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yCiAgICAgICAgICAgICAgICB9IGNhdGNoIChVKSB7CiAgICAgICAgICAgICAgICAgICAgQiA9ICEhVS5zdGFjawogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIFcsIHosIFYgPSBjKCksCiAgICAgICAgICAgICAgICAgICAgRyA9IGZ1bmN0aW9uKCkge30sCiAgICAgICAgICAgICAgICAgICAgWCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCwgZTsgci5uZXh0OykgciA9IHIubmV4dCwgdCA9IHIudGFzaywgci50YXNrID0gdm9pZCAwLCBlID0gci5kb21haW4sIGUgJiYgKHIuZG9tYWluID0gdm9pZCAwLCBlLmVudGVyKCkpLCBuKHQsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IHUubGVuZ3RoOykgdCA9IHUucG9wKCksIG4odCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gITEKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbih0LCBuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzKSB0aHJvdyBuICYmIG4uZXhpdCgpLCBzZXRUaW1lb3V0KGUsIDApLCBuICYmIG4uZW50ZXIoKSwgcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyByCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gJiYgbi5leGl0KCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgciA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrOiB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSByLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICExLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFggPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkubmV4dCA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzazogZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBzICYmIHQuZG9tYWluLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbyB8fCAobyA9ICEwLCBhKCkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAib2JqZWN0IiA9PSB0eXBlb2YgdCAmJiAiW29iamVjdCBwcm9jZXNzXSIgPT09IHQudG9TdHJpbmcoKSAmJiB0Lm5leHRUaWNrKSBzID0gITAsIGEgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubmV4dFRpY2soZSkKICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoImZ1bmN0aW9uIiA9PSB0eXBlb2Ygc2V0SW1tZWRpYXRlKSBhID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIHdpbmRvdyA/IHNldEltbWVkaWF0ZS5iaW5kKHdpbmRvdywgZSkgOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEltbWVkaWF0ZShlKQogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgTWVzc2FnZUNoYW5uZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gbmV3IE1lc3NhZ2VDaGFubmVsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gbCwgYy5wb3J0MS5vbm1lc3NhZ2UgPSBlLCBlKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMucG9ydDIucG9zdE1lc3NhZ2UoMCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChlLCAwKSwgbCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBhID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGUsIDApCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBYLnJ1bkFmdGVyID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdS5wdXNoKHQpLCBvIHx8IChvID0gITAsIGEoKSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgWAogICAgICAgICAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgICAgICAgICBKID0gRnVuY3Rpb24uY2FsbCwKICAgICAgICAgICAgICAgICAgICBZID0gZShBcnJheS5wcm90b3R5cGUuc2xpY2UpLAogICAgICAgICAgICAgICAgICAgIFEgPSBlKEFycmF5LnByb3RvdHlwZS5yZWR1Y2UgfHwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgxID09PSBhcmd1bWVudHMubGVuZ3RoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7OykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuIGluIHRoaXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXNbbisrXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCsrbiA+PSByKSB0aHJvdyBuZXcgVHlwZUVycm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoOyByID4gbjsgbisrKSBuIGluIHRoaXMgJiYgKGUgPSB0KGUsIHRoaXNbbl0sIG4pKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBLID0gZShBcnJheS5wcm90b3R5cGUuaW5kZXhPZiB8fCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGUgPSAwOyBlIDwgdGhpcy5sZW5ndGg7IGUrKykKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW2VdID09PSB0KSByZXR1cm4gZTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xCiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgWiA9IGUoQXJyYXkucHJvdG90eXBlLm1hcCB8fCBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFEobiwgZnVuY3Rpb24oaSwgbywgYSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKHQuY2FsbChlLCBvLCBhLCBuKSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdm9pZCAwKSwgcgogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIHR0ID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGUoKSB7fQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5wcm90b3R5cGUgPSB0LCBuZXcgZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXQgPSBlKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpLAogICAgICAgICAgICAgICAgICAgIG50ID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuIGluIHQpIGV0KHQsIG4pICYmIGUucHVzaChuKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHJ0ID0gZShPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKTsKICAgICAgICAgICAgICAgIHogPSAidW5kZWZpbmVkIiAhPSB0eXBlb2YgUmV0dXJuVmFsdWUgPyBSZXR1cm5WYWx1ZSA6IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdAogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBpdCA9ICJGcm9tIHByZXZpb3VzIGV2ZW50OiI7CiAgICAgICAgICAgICAgICBmLnJlc29sdmUgPSBmLCBmLm5leHRUaWNrID0gWCwgZi5sb25nU3RhY2tTdXBwb3J0ID0gITEsICJvYmplY3QiID09IHR5cGVvZiB0ICYmIHQgJiYgdC5lbnYgJiYgdC5lbnYuUV9ERUJVRyAmJiAoZi5sb25nU3RhY2tTdXBwb3J0ID0gITApLCBmLmRlZmVyID0gcCwgcC5wcm90b3R5cGUubWFrZU5vZGVSZXNvbHZlciA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICAgICAgICAgICAgICBlID8gdC5yZWplY3QoZSkgOiBhcmd1bWVudHMubGVuZ3RoID4gMiA/IHQucmVzb2x2ZShZKGFyZ3VtZW50cywgMSkpIDogdC5yZXNvbHZlKG4pCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZi5Qcm9taXNlID0gaCwgZi5wcm9taXNlID0gaCwgaC5yYWNlID0gZCwgaC5hbGwgPSBQLCBoLnJlamVjdCA9IGosIGgucmVzb2x2ZSA9IGYsIGYucGFzc0J5Q29weSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUucGFzc0J5Q29weSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICAgICAgICB9LCBmLmpvaW4gPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkuam9pbihlKQogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZihbdGhpcywgdF0pLnNwcmVhZChmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBlKSByZXR1cm4gdDsKICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW4ndCBqb2luOiBub3QgdGhlIHNhbWU6ICIgKyB0ICsgIiAiICsgZSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgZi5yYWNlID0gZCwgZy5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRoZW4oZi5yYWNlKQogICAgICAgICAgICAgICAgfSwgZi5tYWtlUHJvbWlzZSA9IGcsIGcucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJbb2JqZWN0IFByb21pc2VdIgogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiByKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiB0ID8gdChlKSA6IGUKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGoobikKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gbyh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgiZnVuY3Rpb24iID09IHR5cGVvZiBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKHQsIHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSh0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAobikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqKG4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGoodCkKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGEodCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PSB0eXBlb2YgbiA/IG4odCkgOiB0CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHZhciBzID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgdSA9IHAoKSwKICAgICAgICAgICAgICAgICAgICAgICAgYyA9ICExOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmLm5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBzLnByb21pc2VEaXNwYXRjaChmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjIHx8IChjID0gITAsIHUucmVzb2x2ZShyKHQpKSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgIndoZW4iLCBbZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgYyB8fCAoYyA9ICEwLCB1LnJlc29sdmUobyh0KSkpCiAgICAgICAgICAgICAgICAgICAgICAgIH1dKQogICAgICAgICAgICAgICAgICAgIH0pLCBzLnByb21pc2VEaXNwYXRjaCh2b2lkIDAsICJ3aGVuIiwgW3ZvaWQgMCwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZSwgbiA9ICExOwogICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGEodCkKICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAocikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPSAhMCwgIWYub25lcnJvcikgdGhyb3cgcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYub25lcnJvcihyKQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG4gfHwgdS5ub3RpZnkoZSkKICAgICAgICAgICAgICAgICAgICB9XSksIHUucHJvbWlzZQogICAgICAgICAgICAgICAgfSwgZi50YXAgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkudGFwKGUpCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS50YXAgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPSBmKHQpLCB0aGlzLnRoZW4oZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5mY2FsbChlKS50aGVuUmVzb2x2ZShlKQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCBmLndoZW4gPSB2LCBnLnByb3RvdHlwZS50aGVuUmVzb2x2ZSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdAogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICB9LCBmLnRoZW5SZXNvbHZlID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLnRoZW5SZXNvbHZlKGUpCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS50aGVuUmVqZWN0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IHQKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgZi50aGVuUmVqZWN0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLnRoZW5SZWplY3QoZSkKICAgICAgICAgICAgICAgIH0sIGYubmVhcmVyID0geSwgZi5pc1Byb21pc2UgPSBtLCBmLmlzUHJvbWlzZUFsaWtlID0gYiwgZi5pc1BlbmRpbmcgPSB4LCBnLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gInBlbmRpbmciID09PSB0aGlzLmluc3BlY3QoKS5zdGF0ZQogICAgICAgICAgICAgICAgfSwgZi5pc0Z1bGZpbGxlZCA9IHcsIGcucHJvdG90eXBlLmlzRnVsZmlsbGVkID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICJmdWxmaWxsZWQiID09PSB0aGlzLmluc3BlY3QoKS5zdGF0ZQogICAgICAgICAgICAgICAgfSwgZi5pc1JlamVjdGVkID0gXywgZy5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAicmVqZWN0ZWQiID09PSB0aGlzLmluc3BlY3QoKS5zdGF0ZQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIHZhciBvdCA9IFtdLAogICAgICAgICAgICAgICAgICAgIGF0ID0gW10sCiAgICAgICAgICAgICAgICAgICAgc3QgPSBbXSwKICAgICAgICAgICAgICAgICAgICB1dCA9ICEwOwogICAgICAgICAgICAgICAgZi5yZXNldFVuaGFuZGxlZFJlamVjdGlvbnMgPSBrLCBmLmdldFVuaGFuZGxlZFJlYXNvbnMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3Quc2xpY2UoKQogICAgICAgICAgICAgICAgfSwgZi5zdG9wVW5oYW5kbGVkUmVqZWN0aW9uVHJhY2tpbmcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICBrKCksIHV0ID0gITEKICAgICAgICAgICAgICAgIH0sIGsoKSwgZi5yZWplY3QgPSBqLCBmLmZ1bGZpbGwgPSBDLCBmLm1hc3RlciA9IEEsIGYuc3ByZWFkID0gTiwgZy5wcm90b3R5cGUuc3ByZWFkID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFsbCgpLnRoZW4oZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5hcHBseSh2b2lkIDAsIGUpCiAgICAgICAgICAgICAgICAgICAgfSwgZSkKICAgICAgICAgICAgICAgIH0sIGYuYXN5bmMgPSBSLCBmLnNwYXduID0gSSwgZlsicmV0dXJuIl0gPSBPLCBmLnByb21pc2VkID0gTCwgZi5kaXNwYXRjaCA9IEQsIGcucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgciA9IHAoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZi5uZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbi5wcm9taXNlRGlzcGF0Y2goci5yZXNvbHZlLCB0LCBlKQogICAgICAgICAgICAgICAgICAgIH0pLCByLnByb21pc2UKICAgICAgICAgICAgICAgIH0sIGYuZ2V0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLmRpc3BhdGNoKCJnZXQiLCBbZV0pCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goImdldCIsIFt0XSkKICAgICAgICAgICAgICAgIH0sIGYuc2V0ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLmRpc3BhdGNoKCJzZXQiLCBbZSwgbl0pCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goInNldCIsIFt0LCBlXSkKICAgICAgICAgICAgICAgIH0sIGYuZGVsID0gZlsiZGVsZXRlIl0gPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkuZGlzcGF0Y2goImRlbGV0ZSIsIFtlXSkKICAgICAgICAgICAgICAgIH0sIGcucHJvdG90eXBlLmRlbCA9IGcucHJvdG90eXBlWyJkZWxldGUiXSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaCgiZGVsZXRlIiwgW3RdKQogICAgICAgICAgICAgICAgfSwgZi5tYXBwbHkgPSBmLnBvc3QgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkuZGlzcGF0Y2goInBvc3QiLCBbZSwgbl0pCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5tYXBwbHkgPSBnLnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKCJwb3N0IiwgW3QsIGVdKQogICAgICAgICAgICAgICAgfSwgZi5zZW5kID0gZi5tY2FsbCA9IGYuaW52b2tlID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLmRpc3BhdGNoKCJwb3N0IiwgW2UsIFkoYXJndW1lbnRzLCAyKV0pCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5zZW5kID0gZy5wcm90b3R5cGUubWNhbGwgPSBnLnByb3RvdHlwZS5pbnZva2UgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGF0Y2goInBvc3QiLCBbdCwgWShhcmd1bWVudHMsIDEpXSkKICAgICAgICAgICAgICAgIH0sIGYuZmFwcGx5ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLmRpc3BhdGNoKCJhcHBseSIsIFt2b2lkIDAsIGVdKQogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUuZmFwcGx5ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKCJhcHBseSIsIFt2b2lkIDAsIHRdKQogICAgICAgICAgICAgICAgfSwgZlsidHJ5Il0gPSBmLmZjYWxsID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLmRpc3BhdGNoKCJhcHBseSIsIFt2b2lkIDAsIFkoYXJndW1lbnRzLCAxKV0pCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5mY2FsbCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRpc3BhdGNoKCJhcHBseSIsIFt2b2lkIDAsIFkoYXJndW1lbnRzKV0pCiAgICAgICAgICAgICAgICB9LCBmLmZiaW5kID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgIHZhciBlID0gZih0KSwKICAgICAgICAgICAgICAgICAgICAgICAgbiA9IFkoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmRpc3BhdGNoKCJhcHBseSIsIFt0aGlzLCBuLmNvbmNhdChZKGFyZ3VtZW50cykpXSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5mYmluZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IFkoYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmRpc3BhdGNoKCJhcHBseSIsIFt0aGlzLCBlLmNvbmNhdChZKGFyZ3VtZW50cykpXSkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBmLmtleXMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodCkuZGlzcGF0Y2goImtleXMiLCBbXSkKICAgICAgICAgICAgICAgIH0sIGcucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kaXNwYXRjaCgia2V5cyIsIFtdKQogICAgICAgICAgICAgICAgfSwgZi5hbGwgPSBQLCBnLnByb3RvdHlwZS5hbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gUCh0aGlzKQogICAgICAgICAgICAgICAgfSwgZi5hbnkgPSAkLCBnLnByb3RvdHlwZS5hbnkgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCh0aGlzKQogICAgICAgICAgICAgICAgfSwgZi5hbGxSZXNvbHZlZCA9IGwocSwgImFsbFJlc29sdmVkIiwgImFsbFNldHRsZWQiKSwgZy5wcm90b3R5cGUuYWxsUmVzb2x2ZWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcSh0aGlzKQogICAgICAgICAgICAgICAgfSwgZi5hbGxTZXR0bGVkID0gSCwgZy5wcm90b3R5cGUuYWxsU2V0dGxlZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUChaKHQsIGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaW5zcGVjdCgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IGYodCksIHQudGhlbihlLCBlKQogICAgICAgICAgICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgZi5mYWlsID0gZlsiY2F0Y2giXSA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZih0KS50aGVuKHZvaWQgMCwgZSkKICAgICAgICAgICAgICAgIH0sIGcucHJvdG90eXBlLmZhaWwgPSBnLnByb3RvdHlwZVsiY2F0Y2giXSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgdCkKICAgICAgICAgICAgICAgIH0sIGYucHJvZ3Jlc3MgPSBNLCBnLnByb3RvdHlwZS5wcm9ncmVzcyA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKHZvaWQgMCwgdm9pZCAwLCB0KQogICAgICAgICAgICAgICAgfSwgZi5maW4gPSBmWyJmaW5hbGx5Il0gPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodClbImZpbmFsbHkiXShlKQogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUuZmluID0gZy5wcm90b3R5cGVbImZpbmFsbHkiXSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9IGYodCksIHRoaXMudGhlbihmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmZjYWxsKCkudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5mY2FsbCgpLnRoZW4oZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIH0sIGYuZG9uZSA9IGZ1bmN0aW9uKHQsIGUsIG4sIHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZih0KS5kb25lKGUsIG4sIHIpCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24oZSwgbiwgcikgewogICAgICAgICAgICAgICAgICAgIHZhciBvID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi5uZXh0VGljayhmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSh0LCBhKSwgIWYub25lcnJvcikgdGhyb3cgdDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmLm9uZXJyb3IodCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBlIHx8IG4gfHwgciA/IHRoaXMudGhlbihlLCBuLCByKSA6IHRoaXM7CiAgICAgICAgICAgICAgICAgICAgIm9iamVjdCIgPT0gdHlwZW9mIHQgJiYgdCAmJiB0LmRvbWFpbiAmJiAobyA9IHQuZG9tYWluLmJpbmQobykpLCBhLnRoZW4odm9pZCAwLCBvKQogICAgICAgICAgICAgICAgfSwgZi50aW1lb3V0ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLnRpbWVvdXQoZSwgbikKICAgICAgICAgICAgICAgIH0sIGcucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBwKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZSAmJiAic3RyaW5nIiAhPSB0eXBlb2YgZSB8fCAoZSA9IG5ldyBFcnJvcihlIHx8ICJUaW1lZCBvdXQgYWZ0ZXIgIiArIHQgKyAiIG1zIiksIGUuY29kZSA9ICJFVElNRURPVVQiKSwgbi5yZWplY3QoZSkKICAgICAgICAgICAgICAgICAgICAgICAgfSwgdCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhlbihmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChyKSwgbi5yZXNvbHZlKHQpCiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQociksIG4ucmVqZWN0KHQpCiAgICAgICAgICAgICAgICAgICAgfSwgbi5ub3RpZnkpLCBuLnByb21pc2UKICAgICAgICAgICAgICAgIH0sIGYuZGVsYXkgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZSAmJiAoZSA9IHQsIHQgPSB2b2lkIDApLCBmKHQpLmRlbGF5KGUpCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5kZWxheSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50aGVuKGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBwKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5yZXNvbHZlKGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHQpLCBuLnByb21pc2UKICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgfSwgZi5uZmFwcGx5ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBmKHQpLm5mYXBwbHkoZSkKICAgICAgICAgICAgICAgIH0sIGcucHJvdG90eXBlLm5mYXBwbHkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBwKCksCiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBZKHQpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnB1c2goZS5tYWtlTm9kZVJlc29sdmVyKCkpLCB0aGlzLmZhcHBseShuKS5mYWlsKGUucmVqZWN0KSwgZS5wcm9taXNlCiAgICAgICAgICAgICAgICB9LCBmLm5mY2FsbCA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFkoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZih0KS5uZmFwcGx5KGUpCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5uZmNhbGwgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IFkoYXJndW1lbnRzKSwKICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHAoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5wdXNoKGUubWFrZU5vZGVSZXNvbHZlcigpKSwgdGhpcy5mYXBwbHkodCkuZmFpbChlLnJlamVjdCksIGUucHJvbWlzZQogICAgICAgICAgICAgICAgfSwgZi5uZmJpbmQgPSBmLmRlbm9kZWlmeSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZSA9IFkoYXJndW1lbnRzLCAxKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5jb25jYXQoWShhcmd1bWVudHMpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBwKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnB1c2goci5tYWtlTm9kZVJlc29sdmVyKCkpLCBmKHQpLmZhcHBseShuKS5mYWlsKHIucmVqZWN0KSwgci5wcm9taXNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUubmZiaW5kID0gZy5wcm90b3R5cGUuZGVub2RlaWZ5ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBZKGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQudW5zaGlmdCh0aGlzKSwgZi5kZW5vZGVpZnkuYXBwbHkodm9pZCAwLCB0KQogICAgICAgICAgICAgICAgfSwgZi5uYmluZCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IFkoYXJndW1lbnRzLCAyKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHIoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5hcHBseShlLCBhcmd1bWVudHMpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBuLmNvbmNhdChZKGFyZ3VtZW50cykpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHAoKTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkucHVzaChvLm1ha2VOb2RlUmVzb2x2ZXIoKSksIGYocikuZmFwcGx5KGkpLmZhaWwoby5yZWplY3QpLCBvLnByb21pc2UKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5uYmluZCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gWShhcmd1bWVudHMsIDApOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnVuc2hpZnQodGhpcyksIGYubmJpbmQuYXBwbHkodm9pZCAwLCB0KQogICAgICAgICAgICAgICAgfSwgZi5ubWFwcGx5ID0gZi5ucG9zdCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZih0KS5ucG9zdChlLCBuKQogICAgICAgICAgICAgICAgfSwgZy5wcm90b3R5cGUubm1hcHBseSA9IGcucHJvdG90eXBlLm5wb3N0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gWShlIHx8IFtdKSwKICAgICAgICAgICAgICAgICAgICAgICAgciA9IHAoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5wdXNoKHIubWFrZU5vZGVSZXNvbHZlcigpKSwgdGhpcy5kaXNwYXRjaCgicG9zdCIsIFt0LCBuXSkuZmFpbChyLnJlamVjdCksIHIucHJvbWlzZQogICAgICAgICAgICAgICAgfSwgZi5uc2VuZCA9IGYubm1jYWxsID0gZi5uaW52b2tlID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gWShhcmd1bWVudHMsIDIpLAogICAgICAgICAgICAgICAgICAgICAgICByID0gcCgpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBuLnB1c2goci5tYWtlTm9kZVJlc29sdmVyKCkpLCBmKHQpLmRpc3BhdGNoKCJwb3N0IiwgW2UsIG5dKS5mYWlsKHIucmVqZWN0KSwgci5wcm9taXNlCiAgICAgICAgICAgICAgICB9LCBnLnByb3RvdHlwZS5uc2VuZCA9IGcucHJvdG90eXBlLm5tY2FsbCA9IGcucHJvdG90eXBlLm5pbnZva2UgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBZKGFyZ3VtZW50cywgMSksCiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBwKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUucHVzaChuLm1ha2VOb2RlUmVzb2x2ZXIoKSksIHRoaXMuZGlzcGF0Y2goInBvc3QiLCBbdCwgZV0pLmZhaWwobi5yZWplY3QpLCBuLnByb21pc2UKICAgICAgICAgICAgICAgIH0sIGYubm9kZWlmeSA9IEYsIGcucHJvdG90eXBlLm5vZGVpZnkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPyB2b2lkIHRoaXMudGhlbihmdW5jdGlvbihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGYubmV4dFRpY2soZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0KG51bGwsIGUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmLm5leHRUaWNrKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdChlKQogICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIH0pIDogdGhpcwogICAgICAgICAgICAgICAgfSwgZi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJRLm5vQ29uZmxpY3Qgb25seSB3b3JrcyB3aGVuIFEgaXMgdXNlZCBhcyBhIGdsb2JhbCIpCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgdmFyIGN0ID0gYygpOwogICAgICAgICAgICAgICAgcmV0dXJuIGYKICAgICAgICAgICAgfSkKICAgICAgICB9KS5jYWxsKHRoaXMsIHQoIl9wcm9jZXNzIikpCiAgICB9LCB7CiAgICAgICAgX3Byb2Nlc3M6IDExCiAgICB9XSwKICAgIDE4OiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgIGZ1bmN0aW9uIHIoKSB7fQoKICAgICAgICBmdW5jdGlvbiBpKHQpIHsKICAgICAgICAgICAgdmFyIGUgPSB7fS50b1N0cmluZy5jYWxsKHQpOwogICAgICAgICAgICBzd2l0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgIltvYmplY3QgRmlsZV0iOgogICAgICAgICAgICAgICAgY2FzZSAiW29iamVjdCBCbG9iXSI6CiAgICAgICAgICAgICAgICBjYXNlICJbb2JqZWN0IEZvcm1EYXRhXSI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gITEKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbygpIHsKICAgICAgICAgICAgaWYgKHkuWE1MSHR0cFJlcXVlc3QgJiYgKCJmaWxlOiIgIT0geS5sb2NhdGlvbi5wcm90b2NvbCB8fCAheS5BY3RpdmVYT2JqZWN0KSkgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKQogICAgICAgICAgICB9IGNhdGNoICh0KSB7fQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCJNc3htbDIuWE1MSFRUUC42LjAiKQogICAgICAgICAgICB9IGNhdGNoICh0KSB7fQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCJNc3htbDIuWE1MSFRUUC4zLjAiKQogICAgICAgICAgICB9IGNhdGNoICh0KSB7fQogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCJNc3htbDIuWE1MSFRUUCIpCiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHt9CiAgICAgICAgICAgIHJldHVybiAhMQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYSh0KSB7CiAgICAgICAgICAgIHJldHVybiB0ID09PSBPYmplY3QodCkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHModCkgewogICAgICAgICAgICBpZiAoIWEodCkpIHJldHVybiB0OwogICAgICAgICAgICB2YXIgZSA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBuIGluIHQpIG51bGwgIT0gdFtuXSAmJiBlLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KG4pICsgIj0iICsgZW5jb2RlVVJJQ29tcG9uZW50KHRbbl0pKTsKICAgICAgICAgICAgcmV0dXJuIGUuam9pbigiJiIpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiB1KHQpIHsKICAgICAgICAgICAgZm9yICh2YXIgZSwgbiwgciA9IHt9LCBpID0gdC5zcGxpdCgiJiIpLCBvID0gMCwgYSA9IGkubGVuZ3RoOyBhID4gbzsgKytvKSBuID0gaVtvXSwgZSA9IG4uc3BsaXQoIj0iKSwgcltkZWNvZGVVUklDb21wb25lbnQoZVswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KGVbMV0pOwogICAgICAgICAgICByZXR1cm4gcgogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYyh0KSB7CiAgICAgICAgICAgIHZhciBlLCBuLCByLCBpLCBvID0gdC5zcGxpdCgvXHI/XG4vKSwKICAgICAgICAgICAgICAgIGEgPSB7fTsKICAgICAgICAgICAgby5wb3AoKTsKICAgICAgICAgICAgZm9yICh2YXIgcyA9IDAsIHUgPSBvLmxlbmd0aDsgdSA+IHM7ICsrcykgbiA9IG9bc10sIGUgPSBuLmluZGV4T2YoIjoiKSwgciA9IG4uc2xpY2UoMCwgZSkudG9Mb3dlckNhc2UoKSwgaSA9IG0obi5zbGljZShlICsgMSkpLCBhW3JdID0gaTsKICAgICAgICAgICAgcmV0dXJuIGEKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGwodCkgewogICAgICAgICAgICByZXR1cm4gdC5zcGxpdCgvICo7ICovKS5zaGlmdCgpCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBmKHQpIHsKICAgICAgICAgICAgcmV0dXJuIHYodC5zcGxpdCgvICo7ICovKSwgZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICAgICAgdmFyIG4gPSBlLnNwbGl0KC8gKj0gKi8pLAogICAgICAgICAgICAgICAgICAgIHIgPSBuLnNoaWZ0KCksCiAgICAgICAgICAgICAgICAgICAgaSA9IG4uc2hpZnQoKTsKICAgICAgICAgICAgICAgIHJldHVybiByICYmIGkgJiYgKHRbcl0gPSBpKSwgdAogICAgICAgICAgICB9LCB7fSkKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHAodCwgZSkgewogICAgICAgICAgICBlID0gZSB8fCB7fSwgdGhpcy5yZXEgPSB0LCB0aGlzLnhociA9IHRoaXMucmVxLnhociwgdGhpcy50ZXh0ID0gIkhFQUQiICE9IHRoaXMucmVxLm1ldGhvZCA/IHRoaXMueGhyLnJlc3BvbnNlVGV4dCA6IG51bGwsIHRoaXMuc2V0U3RhdHVzUHJvcGVydGllcyh0aGlzLnhoci5zdGF0dXMpLCB0aGlzLmhlYWRlciA9IHRoaXMuaGVhZGVycyA9IGModGhpcy54aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpLCB0aGlzLmhlYWRlclsiY29udGVudC10eXBlIl0gPSB0aGlzLnhoci5nZXRSZXNwb25zZUhlYWRlcigiY29udGVudC10eXBlIiksIHRoaXMuc2V0SGVhZGVyUHJvcGVydGllcyh0aGlzLmhlYWRlciksIHRoaXMuYm9keSA9ICJIRUFEIiAhPSB0aGlzLnJlcS5tZXRob2QgPyB0aGlzLnBhcnNlQm9keSh0aGlzLnRleHQpIDogbnVsbAogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaCh0LCBlKSB7CiAgICAgICAgICAgIHZhciBuID0gdGhpczsKICAgICAgICAgICAgZy5jYWxsKHRoaXMpLCB0aGlzLl9xdWVyeSA9IHRoaXMuX3F1ZXJ5IHx8IFtdLCB0aGlzLm1ldGhvZCA9IHQsIHRoaXMudXJsID0gZSwgdGhpcy5oZWFkZXIgPSB7fSwgdGhpcy5faGVhZGVyID0ge30sIHRoaXMub24oImVuZCIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgdmFyIHQgPSBudWxsLAogICAgICAgICAgICAgICAgICAgIGUgPSBudWxsOwogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBlID0gbmV3IHAobikKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHIpIHsKICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IEVycm9yKCJQYXJzZXIgaXMgdW5hYmxlIHRvIHBhcnNlIHRoZSByZXNwb25zZSIpLCB0LnBhcnNlID0gITAsIHQub3JpZ2luYWwgPSByCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBuLmNhbGxiYWNrKHQsIGUpCiAgICAgICAgICAgIH0pCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBkKHQsIGUpIHsKICAgICAgICAgICAgcmV0dXJuICJmdW5jdGlvbiIgPT0gdHlwZW9mIGUgPyBuZXcgaCgiR0VUIiwgdCkuZW5kKGUpIDogMSA9PSBhcmd1bWVudHMubGVuZ3RoID8gbmV3IGgoIkdFVCIsIHQpIDogbmV3IGgodCwgZSkKICAgICAgICB9CiAgICAgICAgdmFyIGcgPSB0KCJlbWl0dGVyIiksCiAgICAgICAgICAgIHYgPSB0KCJyZWR1Y2UiKSwKICAgICAgICAgICAgeSA9ICJ1bmRlZmluZWQiID09IHR5cGVvZiB3aW5kb3cgPyB0aGlzIDogd2luZG93LAogICAgICAgICAgICBtID0gIiIudHJpbSA/IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0LnRyaW0oKQogICAgICAgICAgICB9IDogZnVuY3Rpb24odCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHQucmVwbGFjZSgvKF5ccyp8XHMqJCkvZywgIiIpCiAgICAgICAgICAgIH07CiAgICAgICAgZC5zZXJpYWxpemVPYmplY3QgPSBzLCBkLnBhcnNlU3RyaW5nID0gdSwgZC50eXBlcyA9IHsKICAgICAgICAgICAgaHRtbDogInRleHQvaHRtbCIsCiAgICAgICAgICAgIGpzb246ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICAgICAgICAgeG1sOiAiYXBwbGljYXRpb24veG1sIiwKICAgICAgICAgICAgdXJsZW5jb2RlZDogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsCiAgICAgICAgICAgIGZvcm06ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLAogICAgICAgICAgICAiZm9ybS1kYXRhIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIKICAgICAgICB9LCBkLnNlcmlhbGl6ZSA9IHsKICAgICAgICAgICAgImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCI6IHMsCiAgICAgICAgICAgICJhcHBsaWNhdGlvbi9qc29uIjogSlNPTi5zdHJpbmdpZnkKICAgICAgICB9LCBkLnBhcnNlID0gewogICAgICAgICAgICAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIjogdSwKICAgICAgICAgICAgImFwcGxpY2F0aW9uL2pzb24iOiBKU09OLnBhcnNlCiAgICAgICAgfSwgcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5oZWFkZXJbdC50b0xvd2VyQ2FzZSgpXQogICAgICAgIH0sIHAucHJvdG90eXBlLnNldEhlYWRlclByb3BlcnRpZXMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHZhciBlID0gdGhpcy5oZWFkZXJbImNvbnRlbnQtdHlwZSJdIHx8ICIiOwogICAgICAgICAgICB0aGlzLnR5cGUgPSBsKGUpOwogICAgICAgICAgICB2YXIgbiA9IGYoZSk7CiAgICAgICAgICAgIGZvciAodmFyIHIgaW4gbikgdGhpc1tyXSA9IG5bcl0KICAgICAgICB9LCBwLnByb3RvdHlwZS5wYXJzZUJvZHkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHZhciBlID0gZC5wYXJzZVt0aGlzLnR5cGVdOwogICAgICAgICAgICByZXR1cm4gZSAmJiB0ICYmIHQubGVuZ3RoID8gZSh0KSA6IG51bGwKICAgICAgICB9LCBwLnByb3RvdHlwZS5zZXRTdGF0dXNQcm9wZXJ0aWVzID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICB2YXIgZSA9IHQgLyAxMDAgfCAwOwogICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHQsIHRoaXMuc3RhdHVzVHlwZSA9IGUsIHRoaXMuaW5mbyA9IDEgPT0gZSwgdGhpcy5vayA9IDIgPT0gZSwgdGhpcy5jbGllbnRFcnJvciA9IDQgPT0gZSwgdGhpcy5zZXJ2ZXJFcnJvciA9IDUgPT0gZSwgdGhpcy5lcnJvciA9IDQgPT0gZSB8fCA1ID09IGUgPyB0aGlzLnRvRXJyb3IoKSA6ICExLCB0aGlzLmFjY2VwdGVkID0gMjAyID09IHQsIHRoaXMubm9Db250ZW50ID0gMjA0ID09IHQgfHwgMTIyMyA9PSB0LCB0aGlzLmJhZFJlcXVlc3QgPSA0MDAgPT0gdCwgdGhpcy51bmF1dGhvcml6ZWQgPSA0MDEgPT0gdCwgdGhpcy5ub3RBY2NlcHRhYmxlID0gNDA2ID09IHQsIHRoaXMubm90Rm91bmQgPSA0MDQgPT0gdCwgdGhpcy5mb3JiaWRkZW4gPSA0MDMgPT0gdAogICAgICAgIH0sIHAucHJvdG90eXBlLnRvRXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHQgPSB0aGlzLnJlcSwKICAgICAgICAgICAgICAgIGUgPSB0Lm1ldGhvZCwKICAgICAgICAgICAgICAgIG4gPSB0LnVybCwKICAgICAgICAgICAgICAgIHIgPSAiY2Fubm90ICIgKyBlICsgIiAiICsgbiArICIgKCIgKyB0aGlzLnN0YXR1cyArICIpIiwKICAgICAgICAgICAgICAgIGkgPSBuZXcgRXJyb3Iocik7CiAgICAgICAgICAgIHJldHVybiBpLnN0YXR1cyA9IHRoaXMuc3RhdHVzLCBpLm1ldGhvZCA9IGUsIGkudXJsID0gbiwgaQogICAgICAgIH0sIGQuUmVzcG9uc2UgPSBwLCBnKGgucHJvdG90eXBlKSwgaC5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICByZXR1cm4gdCh0aGlzKSwgdGhpcwogICAgICAgIH0sIGgucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lb3V0ID0gdCwgdGhpcwogICAgICAgIH0sIGgucHJvdG90eXBlLmNsZWFyVGltZW91dCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fdGltZW91dCA9IDAsIGNsZWFyVGltZW91dCh0aGlzLl90aW1lciksIHRoaXMKICAgICAgICB9LCBoLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5hYm9ydGVkID8gdm9pZCAwIDogKHRoaXMuYWJvcnRlZCA9ICEwLCB0aGlzLnhoci5hYm9ydCgpLCB0aGlzLmNsZWFyVGltZW91dCgpLCB0aGlzLmVtaXQoImFib3J0IiksIHRoaXMpCiAgICAgICAgfSwgaC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICBpZiAoYSh0KSkgewogICAgICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0KSB0aGlzLnNldChuLCB0W25dKTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlclt0LnRvTG93ZXJDYXNlKCldID0gZSwgdGhpcy5oZWFkZXJbdF0gPSBlLCB0aGlzCiAgICAgICAgfSwgaC5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHJldHVybiBkZWxldGUgdGhpcy5faGVhZGVyW3QudG9Mb3dlckNhc2UoKV0sIGRlbGV0ZSB0aGlzLmhlYWRlclt0XSwgdGhpcwogICAgICAgIH0sIGgucHJvdG90eXBlLmdldEhlYWRlciA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlclt0LnRvTG93ZXJDYXNlKCldCiAgICAgICAgfSwgaC5wcm90b3R5cGUudHlwZSA9IGZ1bmN0aW9uKHQpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0KCJDb250ZW50LVR5cGUiLCBkLnR5cGVzW3RdIHx8IHQpLCB0aGlzCiAgICAgICAgfSwgaC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoIkFjY2VwdCIsIGQudHlwZXNbdF0gfHwgdCksIHRoaXMKICAgICAgICB9LCBoLnByb3RvdHlwZS5hdXRoID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICB2YXIgbiA9IGJ0b2EodCArICI6IiArIGUpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5zZXQoIkF1dGhvcml6YXRpb24iLCAiQmFzaWMgIiArIG4pLCB0aGlzCiAgICAgICAgfSwgaC5wcm90b3R5cGUucXVlcnkgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHJldHVybiAic3RyaW5nIiAhPSB0eXBlb2YgdCAmJiAodCA9IHModCkpLCB0ICYmIHRoaXMuX3F1ZXJ5LnB1c2godCksIHRoaXMKICAgICAgICB9LCBoLnByb3RvdHlwZS5maWVsZCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1EYXRhIHx8ICh0aGlzLl9mb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSksIHRoaXMuX2Zvcm1EYXRhLmFwcGVuZCh0LCBlKSwgdGhpcwogICAgICAgIH0sIGgucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1EYXRhIHx8ICh0aGlzLl9mb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSksIHRoaXMuX2Zvcm1EYXRhLmFwcGVuZCh0LCBlLCBuKSwgdGhpcwogICAgICAgIH0sIGgucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHZhciBlID0gYSh0KSwKICAgICAgICAgICAgICAgIG4gPSB0aGlzLmdldEhlYWRlcigiQ29udGVudC1UeXBlIik7CiAgICAgICAgICAgIGlmIChlICYmIGEodGhpcy5fZGF0YSkpCiAgICAgICAgICAgICAgICBmb3IgKHZhciByIGluIHQpIHRoaXMuX2RhdGFbcl0gPSB0W3JdOwogICAgICAgICAgICBlbHNlICJzdHJpbmciID09IHR5cGVvZiB0ID8gKG4gfHwgdGhpcy50eXBlKCJmb3JtIiksIG4gPSB0aGlzLmdldEhlYWRlcigiQ29udGVudC1UeXBlIiksICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiID09IG4gPyB0aGlzLl9kYXRhID0gdGhpcy5fZGF0YSA/IHRoaXMuX2RhdGEgKyAiJiIgKyB0IDogdCA6IHRoaXMuX2RhdGEgPSAodGhpcy5fZGF0YSB8fCAiIikgKyB0KSA6IHRoaXMuX2RhdGEgPSB0OwogICAgICAgICAgICByZXR1cm4gZSA/IChuIHx8IHRoaXMudHlwZSgianNvbiIpLCB0aGlzKSA6IHRoaXMKICAgICAgICB9LCBoLnByb3RvdHlwZS5jYWxsYmFjayA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgdmFyIG4gPSB0aGlzLl9jYWxsYmFjazsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXJUaW1lb3V0KCksIDIgPT0gbi5sZW5ndGggPyBuKHQsIGUpIDogdCA/IHRoaXMuZW1pdCgiZXJyb3IiLCB0KSA6IHZvaWQgbihlKQogICAgICAgIH0sIGgucHJvdG90eXBlLmNyb3NzRG9tYWluRXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHQgPSBuZXcgRXJyb3IoIk9yaWdpbiBpcyBub3QgYWxsb3dlZCBieSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4iKTsKICAgICAgICAgICAgdC5jcm9zc0RvbWFpbiA9ICEwLCB0aGlzLmNhbGxiYWNrKHQpCiAgICAgICAgfSwgaC5wcm90b3R5cGUudGltZW91dEVycm9yID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciB0ID0gdGhpcy5fdGltZW91dCwKICAgICAgICAgICAgICAgIGUgPSBuZXcgRXJyb3IoInRpbWVvdXQgb2YgIiArIHQgKyAibXMgZXhjZWVkZWQiKTsKICAgICAgICAgICAgZS50aW1lb3V0ID0gdCwgdGhpcy5jYWxsYmFjayhlKQogICAgICAgIH0sIGgucHJvdG90eXBlLndpdGhDcmVkZW50aWFscyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gITAsIHRoaXMKICAgICAgICB9LCBoLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHZhciBlID0gdGhpcywKICAgICAgICAgICAgICAgIG4gPSB0aGlzLnhociA9IG8oKSwKICAgICAgICAgICAgICAgIGEgPSB0aGlzLl9xdWVyeS5qb2luKCImIiksCiAgICAgICAgICAgICAgICBzID0gdGhpcy5fdGltZW91dCwKICAgICAgICAgICAgICAgIHUgPSB0aGlzLl9mb3JtRGF0YSB8fCB0aGlzLl9kYXRhOwogICAgICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2sgPSB0IHx8IHIsIG4ub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDQgPT0gbi5yZWFkeVN0YXRlID8gMCA9PSBuLnN0YXR1cyA/IGUuYWJvcnRlZCA/IGUudGltZW91dEVycm9yKCkgOiBlLmNyb3NzRG9tYWluRXJyb3IoKSA6IHZvaWQgZS5lbWl0KCJlbmQiKSA6IHZvaWQgMAogICAgICAgICAgICAgICAgfSwgbi51cGxvYWQgJiYgKG4udXBsb2FkLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgICAgICAgICAgdC5wZXJjZW50ID0gdC5sb2FkZWQgLyB0LnRvdGFsICogMTAwLCBlLmVtaXQoInByb2dyZXNzIiwgdCkKICAgICAgICAgICAgICAgIH0pLCBzICYmICF0aGlzLl90aW1lciAmJiAodGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGUuYWJvcnQoKQogICAgICAgICAgICAgICAgfSwgcykpLCBhICYmIChhID0gZC5zZXJpYWxpemVPYmplY3QoYSksIHRoaXMudXJsICs9IH50aGlzLnVybC5pbmRleE9mKCI/IikgPyAiJiIgKyBhIDogIj8iICsgYSksIG4ub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmwsICEwKSwgdGhpcy5fd2l0aENyZWRlbnRpYWxzICYmIChuLndpdGhDcmVkZW50aWFscyA9ICEwKSwgIkdFVCIgIT0gdGhpcy5tZXRob2QgJiYgIkhFQUQiICE9IHRoaXMubWV0aG9kICYmICJzdHJpbmciICE9IHR5cGVvZiB1ICYmICFpKHUpKSB7CiAgICAgICAgICAgICAgICB2YXIgYyA9IGQuc2VyaWFsaXplW3RoaXMuZ2V0SGVhZGVyKCJDb250ZW50LVR5cGUiKV07CiAgICAgICAgICAgICAgICBjICYmICh1ID0gYyh1KSkKICAgICAgICAgICAgfQogICAgICAgICAgICBmb3IgKHZhciBsIGluIHRoaXMuaGVhZGVyKSBudWxsICE9IHRoaXMuaGVhZGVyW2xdICYmIG4uc2V0UmVxdWVzdEhlYWRlcihsLCB0aGlzLmhlYWRlcltsXSk7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoInJlcXVlc3QiLCB0aGlzKSwgbi5zZW5kKHUpLCB0aGlzCiAgICAgICAgfSwgZC5SZXF1ZXN0ID0gaCwgZC5nZXQgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgIHZhciByID0gZCgiR0VUIiwgdCk7CiAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiBlICYmIChuID0gZSwgZSA9IG51bGwpLCBlICYmIHIucXVlcnkoZSksIG4gJiYgci5lbmQobiksIHIKICAgICAgICB9LCBkLmhlYWQgPSBmdW5jdGlvbih0LCBlLCBuKSB7CiAgICAgICAgICAgIHZhciByID0gZCgiSEVBRCIsIHQpOwogICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSAmJiAobiA9IGUsIGUgPSBudWxsKSwgZSAmJiByLnNlbmQoZSksIG4gJiYgci5lbmQobiksIHIKICAgICAgICB9LCBkLmRlbCA9IGZ1bmN0aW9uKHQsIGUpIHsKICAgICAgICAgICAgdmFyIG4gPSBkKCJERUxFVEUiLCB0KTsKICAgICAgICAgICAgcmV0dXJuIGUgJiYgbi5lbmQoZSksIG4KICAgICAgICB9LCBkLnBhdGNoID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICB2YXIgciA9IGQoIlBBVENIIiwgdCk7CiAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiBlICYmIChuID0gZSwgZSA9IG51bGwpLCBlICYmIHIuc2VuZChlKSwgbiAmJiByLmVuZChuKSwgcgogICAgICAgIH0sIGQucG9zdCA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgdmFyIHIgPSBkKCJQT1NUIiwgdCk7CiAgICAgICAgICAgIHJldHVybiAiZnVuY3Rpb24iID09IHR5cGVvZiBlICYmIChuID0gZSwgZSA9IG51bGwpLCBlICYmIHIuc2VuZChlKSwgbiAmJiByLmVuZChuKSwgcgogICAgICAgIH0sIGQucHV0ID0gZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgICAgICB2YXIgciA9IGQoIlBVVCIsIHQpOwogICAgICAgICAgICByZXR1cm4gImZ1bmN0aW9uIiA9PSB0eXBlb2YgZSAmJiAobiA9IGUsIGUgPSBudWxsKSwgZSAmJiByLnNlbmQoZSksIG4gJiYgci5lbmQobiksIHIKICAgICAgICB9LCBlLmV4cG9ydHMgPSBkCiAgICB9LCB7CiAgICAgICAgZW1pdHRlcjogMTksCiAgICAgICAgcmVkdWNlOiAyMAogICAgfV0sCiAgICAxOTogW2Z1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICBmdW5jdGlvbiByKHQpIHsKICAgICAgICAgICAgcmV0dXJuIHQgPyBpKHQpIDogdm9pZCAwCiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpKHQpIHsKICAgICAgICAgICAgZm9yICh2YXIgZSBpbiByLnByb3RvdHlwZSkgdFtlXSA9IHIucHJvdG90eXBlW2VdOwogICAgICAgICAgICByZXR1cm4gdAogICAgICAgIH0KICAgICAgICBlLmV4cG9ydHMgPSByLCByLnByb3RvdHlwZS5vbiA9IHIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge30sICh0aGlzLl9jYWxsYmFja3NbdF0gPSB0aGlzLl9jYWxsYmFja3NbdF0gfHwgW10pLnB1c2goZSksIHRoaXMKICAgICAgICB9LCByLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24odCwgZSkgewogICAgICAgICAgICBmdW5jdGlvbiBuKCkgewogICAgICAgICAgICAgICAgci5vZmYodCwgbiksIGUuYXBwbHkodGhpcywgYXJndW1lbnRzKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByID0gdGhpczsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fSwgbi5mbiA9IGUsIHRoaXMub24odCwgbiksIHRoaXMKICAgICAgICB9LCByLnByb3RvdHlwZS5vZmYgPSByLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IHIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9IHIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0LCBlKSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge30sIDAgPT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX2NhbGxiYWNrcyA9IHt9LCB0aGlzOwogICAgICAgICAgICB2YXIgbiA9IHRoaXMuX2NhbGxiYWNrc1t0XTsKICAgICAgICAgICAgaWYgKCFuKSByZXR1cm4gdGhpczsKICAgICAgICAgICAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbdF0sIHRoaXM7CiAgICAgICAgICAgIGZvciAodmFyIHIsIGkgPSAwOyBpIDwgbi5sZW5ndGg7IGkrKykKICAgICAgICAgICAgICAgIGlmIChyID0gbltpXSwgciA9PT0gZSB8fCByLmZuID09PSBlKSB7CiAgICAgICAgICAgICAgICAgICAgbi5zcGxpY2UoaSwgMSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRoaXMKICAgICAgICB9LCByLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307CiAgICAgICAgICAgIHZhciBlID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLAogICAgICAgICAgICAgICAgbiA9IHRoaXMuX2NhbGxiYWNrc1t0XTsKICAgICAgICAgICAgaWYgKG4pIHsKICAgICAgICAgICAgICAgIG4gPSBuLnNsaWNlKDApOwogICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSBuLmxlbmd0aDsgaSA+IHI7ICsrcikgbltyXS5hcHBseSh0aGlzLCBlKQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB0aGlzCiAgICAgICAgfSwgci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24odCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9LCB0aGlzLl9jYWxsYmFja3NbdF0gfHwgW10KICAgICAgICB9LCByLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbih0KSB7CiAgICAgICAgICAgIHJldHVybiAhIXRoaXMubGlzdGVuZXJzKHQpLmxlbmd0aAogICAgICAgIH0KICAgIH0sIHt9XSwKICAgIDIwOiBbZnVuY3Rpb24odCwgZSwgbikgewogICAgICAgIGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHQsIGUsIG4pIHsKICAgICAgICAgICAgZm9yICh2YXIgciA9IDAsIGkgPSB0Lmxlbmd0aCwgbyA9IDMgPT0gYXJndW1lbnRzLmxlbmd0aCA/IG4gOiB0W3IrK107IGkgPiByOykgbyA9IGUuY2FsbChudWxsLCBvLCB0W3JdLCArK3IsIHQpOwogICAgICAgICAgICByZXR1cm4gbwogICAgICAgIH0KICAgIH0sIHt9XQp9LCB7fSwgWzFdKTsK]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:49 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/js/s_code.js.pagespeed.jm.I78cfHQpbQ.js]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/js/s_code.js.pagespeed.jm.I78cfHQpbQ.js]]></path>
    <extension>js</extension>
    <request base64="true"><![CDATA[R0VUIC9qcy9zX2NvZGUuanMucGFnZXNwZWVkLmptLkk3OGNmSFFwYlEuanMgSFRUUC8xLjENCkhvc3Q6IDEwLjEwLjEwLjE4DQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMC4xMC4xOC8NCkNvb2tpZTogc19jYz10cnVlOyBzX2ZpZD0xRDg3QzRDNUYxRkRENTE5LTIxODlGN0FEMDhCODVDMkU7IHNfbnI9MTU5MDYzNzEzOTAwMDsgc19zcT0lNUIlNUJCJTVEJTVEDQoNCg==]]></request>
    <status>200</status>
    <responselength>50918</responselength>
    <mimetype>script</mimetype>
    <response base64="true"><![CDATA[]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:50 IST 2020</time>
    <url><![CDATA[http://10.10.10.18/js/vendor/vendor-48ca455c.js.pagespeed.jm.V7Qfw6bd5C.js]]></url>
    <host ip="10.10.10.18">10.10.10.18</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/js/vendor/vendor-48ca455c.js.pagespeed.jm.V7Qfw6bd5C.js]]></path>
    <extension>js</extension>
    <request base64="true"><![CDATA[R0VUIC9qcy92ZW5kb3IvdmVuZG9yLTQ4Y2E0NTVjLmpzLnBhZ2VzcGVlZC5qbS5WN1FmdzZiZDVDLmpzIEhUVFAvMS4xDQpIb3N0OiAxMC4xMC4xMC4xOA0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgcnY6NjguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC82OC4wDQpBY2NlcHQ6ICovKg0KQWNjZXB0LUxhbmd1YWdlOiBlbi1VUyxlbjtxPTAuNQ0KQWNjZXB0LUVuY29kaW5nOiBnemlwLCBkZWZsYXRlDQpETlQ6IDENCkNvbm5lY3Rpb246IGNsb3NlDQpSZWZlcmVyOiBodHRwOi8vMTAuMTAuMTAuMTgvDQpDb29raWU6IHNfY2M9dHJ1ZTsgc19maWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFOyBzX25yPTE1OTA2MzcxMzkwMDA7IHNfc3E9JTVCJTVCQiU1RCU1RA0KDQo=]]></request>
    <status>200</status>
    <responselength>182358</responselength>
    <mimetype>script</mimetype>
    <response base64="true"><![CDATA[]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 10:07:54 IST 2020</time>
    <url><![CDATA[http://detectportal.firefox.com/success.txt]]></url>
    <host ip="23.32.28.63">detectportal.firefox.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/success.txt]]></path>
    <extension>txt</extension>
    <request base64="true"><![CDATA[R0VUIC9zdWNjZXNzLnR4dCBIVFRQLzEuMQ0KSG9zdDogZGV0ZWN0cG9ydGFsLmZpcmVmb3guY29tDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkNhY2hlLUNvbnRyb2w6IG5vLWNhY2hlDQpQcmFnbWE6IG5vLWNhY2hlDQpETlQ6IDENCkNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></request>
    <status>200</status>
    <responselength>402</responselength>
    <mimetype>text</mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4NCkNvbnRlbnQtTGVuZ3RoOiA4DQpMYXN0LU1vZGlmaWVkOiBNb24sIDE1IE1heSAyMDE3IDE4OjA0OjQwIEdNVA0KRVRhZzogImFlNzgwNTg1ZjQ5Yjk0Y2UxNDQ0ZWI3ZDI4OTA2MTIzIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClNlcnZlcjogQW1hem9uUzMNClgtQW16LUNmLVBvcDogU0lOMi1DMQ0KWC1BbXotQ2YtSWQ6IGFFeXJ1ZjB1OHlQTTdJM1o4X25BNjlGQ3J0em04a3FuWWhmTDI3S3VhUFZEYnItbkJSbkRvZz09DQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoyMTo1NCBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCnN1Y2Nlc3MK]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 10:07:54 IST 2020</time>
    <url><![CDATA[http://detectportal.firefox.com/success.txt?ipv4]]></url>
    <host ip="23.32.28.63">detectportal.firefox.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/success.txt?ipv4]]></path>
    <extension>txt</extension>
    <request base64="true"><![CDATA[R0VUIC9zdWNjZXNzLnR4dD9pcHY0IEhUVFAvMS4xDQpIb3N0OiBkZXRlY3Rwb3J0YWwuZmlyZWZveC5jb20NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IHJ2OjY4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjguMA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KUHJhZ21hOiBuby1jYWNoZQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUNCg0K]]></request>
    <status>200</status>
    <responselength>402</responselength>
    <mimetype>text</mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4NCkNvbnRlbnQtTGVuZ3RoOiA4DQpMYXN0LU1vZGlmaWVkOiBNb24sIDE1IE1heSAyMDE3IDE4OjA0OjQwIEdNVA0KRVRhZzogImFlNzgwNTg1ZjQ5Yjk0Y2UxNDQ0ZWI3ZDI4OTA2MTIzIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClNlcnZlcjogQW1hem9uUzMNClgtQW16LUNmLVBvcDogU0lOMi1DMQ0KWC1BbXotQ2YtSWQ6IGFFeXJ1ZjB1OHlQTTdJM1o4X25BNjlGQ3J0em04a3FuWWhmTDI3S3VhUFZEYnItbkJSbkRvZz09DQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoyMTo1NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCnN1Y2Nlc3MK]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 10:07:54 IST 2020</time>
    <url><![CDATA[http://detectportal.firefox.com/success.txt?ipv6]]></url>
    <host ip="23.32.28.63">detectportal.firefox.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/success.txt?ipv6]]></path>
    <extension>txt</extension>
    <request base64="true"><![CDATA[R0VUIC9zdWNjZXNzLnR4dD9pcHY2IEhUVFAvMS4xDQpIb3N0OiBkZXRlY3Rwb3J0YWwuZmlyZWZveC5jb20NClVzZXItQWdlbnQ6IE1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IHJ2OjY4LjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvNjguMA0KQWNjZXB0OiAqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KUHJhZ21hOiBuby1jYWNoZQ0KQ2FjaGUtQ29udHJvbDogbm8tY2FjaGUNCg0K]]></request>
    <status>200</status>
    <responselength>402</responselength>
    <mimetype>text</mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMjAwIE9LDQpDb250ZW50LVR5cGU6IHRleHQvcGxhaW4NCkNvbnRlbnQtTGVuZ3RoOiA4DQpMYXN0LU1vZGlmaWVkOiBNb24sIDE1IE1heSAyMDE3IDE4OjA0OjQwIEdNVA0KRVRhZzogImFlNzgwNTg1ZjQ5Yjk0Y2UxNDQ0ZWI3ZDI4OTA2MTIzIg0KQWNjZXB0LVJhbmdlczogYnl0ZXMNClNlcnZlcjogQW1hem9uUzMNClgtQW16LUNmLVBvcDogU0lOMi1DMQ0KWC1BbXotQ2YtSWQ6IGFFeXJ1ZjB1OHlQTTdJM1o4X25BNjlGQ3J0em04a3FuWWhmTDI3S3VhUFZEYnItbkJSbkRvZz09DQpDYWNoZS1Db250cm9sOiBuby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZQ0KRGF0ZTogVGh1LCAyOCBNYXkgMjAyMCAwNDoyMTo1NyBHTVQNCkNvbm5lY3Rpb246IGNsb3NlDQoNCnN1Y2Nlc3MK]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:48:54 IST 2020</time>
    <url><![CDATA[http://oimg.nbcuni.com/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s12471566572696?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A18%3A50%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up%20%3A%20Loading%20Sequence&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Features&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up&c6=http%3A%2F%2F10.10.10.18%2F&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up%20%3A%20Loading%20Sequence&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up%20%3A%20Loading%20Sequence&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Features&v43=http%3A%2F%2F10.10.10.18%2F&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CFeatures%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></url>
    <host ip="3.6.119.69">oimg.nbcuni.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s12471566572696?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A18%3A50%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up%20%3A%20Loading%20Sequence&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Features&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up&c6=http%3A%2F%2F10.10.10.18%2F&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up%20%3A%20Loading%20Sequence&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Email%20Sign-Up%20%3A%20Loading%20Sequence&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Features&v43=http%3A%2F%2F10.10.10.18%2F&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CFeatures%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC9iL3NzL25iY3VnbG9iYWwsbmJjdXVzYW5ldHdvcmtkLzEvSC4yNy41L3MxMjQ3MTU2NjU3MjY5Nj9BUUI9MSZuZGg9MSZ0PTI4JTJGNCUyRjIwMjAlMjA0JTNBMTglM0E1MCUyMDQlMjAwJmZpZD0xRDg3QzRDNUYxRkRENTE5LTIxODlGN0FEMDhCODVDMkUmY2U9VVRGLTgmbnM9bmJjdW5pdmVyc2FsJnBhZ2VOYW1lPU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEVtYWlsJTIwU2lnbi1VcCUyMCUzQSUyMExvYWRpbmclMjBTZXF1ZW5jZSZnPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRiZjYz1VU0Qmc2VydmVyPTEwLjEwLjEwLjE4JmV2ZW50cz1ldmVudDYmYzI9RHJhbWEmYzM9RmVhdHVyZXMmYzQ9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JnY0PUQlM0RjNCZjNT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBFbWFpbCUyMFNpZ24tVXAmYzY9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGJmM4PUNhYmxlJnY4PUNhYmxlJmM5PVVTQSUyME5ldHdvcmsmdjk9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwRW1haWwlMjBTaWduLVVwJTIwJTNBJTIwTG9hZGluZyUyMFNlcXVlbmNlJmMxMD1Nci4lMjBSb2JvdCZ2MTA9RCUzRGMxMCZjMTE9TXIuJTIwUm9ib3QlMjAlN0MlMjBNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBFbWFpbCUyMFNpZ24tVXAlMjAlM0ElMjBMb2FkaW5nJTIwU2VxdWVuY2UmYzEyPVVTQSUyME5ldHdvcmslMjAlN0MlMjBNci4lMjBSb2JvdCZjMTM9UmVwZWF0JmMzMj1OZXclMjBTaXRlJnYzMj1GZWF0dXJlcyZ2NDM9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGJnY0NT1VU0ElMjBOZXR3b3JrJmM2MD1Ob3QlMjBTcG9uc29yZWQmYzY4PUQlM0R2NjgmdjY4PURlc2t0b3AlMjBMYXJnZSZjNjk9RCUzRHY2OSZ2Njk9NTg0JmM3MD1EJTNEdjcwJnY3MD0xMzQyJmM3MT1EJTNEdjcxJnY3MT1EZXNrdG9wJmgxPUNhYmxlJTdDVVNBJTIwTmV0d29yayU3Q01yLiUyMFJvYm90JmgyPURyYW1hJTdDTXIuJTIwUm9ib3QlN0NGZWF0dXJlcyU3Q01yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCZoMz0xMC4xMC4xMC4xOCZzPTEzNDJ4NTg0JmM9MjQmaj0xLjYmdj1OJms9WSZidz0xMzQyJmJoPTU4NCZBUUU9MSBIVFRQLzEuMQ0KSG9zdDogb2ltZy5uYmN1bmkuY29tDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogaW1hZ2Uvd2VicCwqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwLjEwLjE4Lw0KDQo=]]></request>
    <status>302</status>
    <responselength>1983</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQp4c2VydmVyOiBhbmVkZ2UtNWQ4ZjU4ODRjYy1ocmxyaw0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp4LWM6IG1hc3Rlci0xMjgxLkkzNGRhZWQuTTAtNDA2DQpkYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjE4OjUyIEdNVA0KY29udGVudC10eXBlOiB0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgNCmV4cGlyZXM6IFdlZCwgMjcgTWF5IDIwMjAgMDQ6MTg6NTIgR01UDQpsYXN0LW1vZGlmaWVkOiBGcmksIDI5IE1heSAyMDIwIDA0OjE4OjUyIEdNVA0KcHJhZ21hOiBuby1jYWNoZQ0KcDNwOiBDUD0iVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5Ig0Kc2VydmVyOiBqYWcNCnNldC1jb29raWU6IHNfdmk9W0NTXXYxfDJGNjc5REQ2MDUxNUI2RjYtNjAwMDBCMDNFQjA1MTU5NltDRV07IFBhdGg9LzsgRG9tYWluPW5iY3VuaS5jb207IE1heC1BZ2U9NjMwNzIwMDA7IEV4cGlyZXM9U2F0LCAyOCBNYXkgMjAyMiAwNDoxODoxOCBHTVQ7IA0KbG9jYXRpb246IGh0dHA6Ly9vaW1nLm5iY3VuaS5jb20vYi9zcy9uYmN1Z2xvYmFsLG5iY3V1c2FuZXR3b3JrZC8xL0guMjcuNS9zMTI0NzE1NjY1NzI2OTY/QVFCPTEmcGNjcj10cnVlJnZpZG49MkY2NzlERDYwNTE1QjZGNi02MDAwMEIwM0VCMDUxNTk2Jm5kaD0xJnQ9MjglMkY0JTJGMjAyMCUyMDQlM0ExOCUzQTUwJTIwNCUyMDAmZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRSZjZT1VVEYtOCZucz1uYmN1bml2ZXJzYWwmcGFnZU5hbWU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwRW1haWwlMjBTaWduLVVwJTIwJTNBJTIwTG9hZGluZyUyMFNlcXVlbmNlJmc9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGJmNjPVVTRCZzZXJ2ZXI9MTAuMTAuMTAuMTgmZXZlbnRzPWV2ZW50NiZjMj1EcmFtYSZjMz1GZWF0dXJlcyZjND1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmdjQ9RCUzRGM0JmM1PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEVtYWlsJTIwU2lnbi1VcCZjNj1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkYmYzg9Q2FibGUmdjg9Q2FibGUmYzk9VVNBJTIwTmV0d29yayZ2OT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBFbWFpbCUyMFNpZ24tVXAlMjAlM0ElMjBMb2FkaW5nJTIwU2VxdWVuY2UmYzEwPU1yLiUyMFJvYm90JnYxMD1EJTNEYzEwJmMxMT1Nci4lMjBSb2JvdCUyMCU3QyUyME1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEVtYWlsJTIwU2lnbi1VcCUyMCUzQSUyMExvYWRpbmclMjBTZXF1ZW5jZSZjMTI9VVNBJTIwTmV0d29yayUyMCU3QyUyME1yLiUyMFJvYm90JmMxMz1SZXBlYXQmYzMyPU5ldyUyMFNpdGUmdjMyPUZlYXR1cmVzJnY0Mz1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkYmdjQ1PVVTQSUyME5ldHdvcmsmYzYwPU5vdCUyMFNwb25zb3JlZCZjNjg9RCUzRHY2OCZ2Njg9RGVza3RvcCUyMExhcmdlJmM2OT1EJTNEdjY5JnY2OT01ODQmYzcwPUQlM0R2NzAmdjcwPTEzNDImYzcxPUQlM0R2NzEmdjcxPURlc2t0b3AmaDE9Q2FibGUlN0NVU0ElMjBOZXR3b3JrJTdDTXIuJTIwUm9ib3QmaDI9RHJhbWElN0NNci4lMjBSb2JvdCU3Q0ZlYXR1cmVzJTdDTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JmgzPTEwLjEwLjEwLjE4JnM9MTM0Mng1ODQmYz0yNCZqPTEuNiZ2PU4maz1ZJmJ3PTEzNDImYmg9NTg0JkFRRT0xDQpjb250ZW50LWxlbmd0aDogMA0KY2FjaGUtY29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG5vLXRyYW5zZm9ybSwgcHJpdmF0ZQ0KeC14c3MtcHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KY29ubmVjdGlvbjogY2xvc2UNCg0K]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 10:03:07 IST 2020</time>
    <url><![CDATA[http://oimg.nbcuni.com/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s12645878837148?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A32%3A46%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20is%20Mr.%20Robot%20%3A%20Inform%20Gallery%20%3A%20Photo%201&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Gallery&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Inform%20Gallery&c6=http%3A%2F%2F10.10.10.18%2Finform&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20is%20Mr.%20Robot%20%3A%20Inform%20Gallery%20%3A%20Photo%201&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20is%20Mr.%20Robot%20%3A%20Inform%20Gallery%20%3A%20Photo%201&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Gallery&v43=http%3A%2F%2F10.10.10.18%2Finform&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CGallery%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cinform&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></url>
    <host ip="3.6.119.69">oimg.nbcuni.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s12645878837148?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A32%3A46%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20is%20Mr.%20Robot%20%3A%20Inform%20Gallery%20%3A%20Photo%201&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Gallery&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Inform%20Gallery&c6=http%3A%2F%2F10.10.10.18%2Finform&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20is%20Mr.%20Robot%20%3A%20Inform%20Gallery%20%3A%20Photo%201&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20is%20Mr.%20Robot%20%3A%20Inform%20Gallery%20%3A%20Photo%201&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Gallery&v43=http%3A%2F%2F10.10.10.18%2Finform&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CGallery%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cinform&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC9iL3NzL25iY3VnbG9iYWwsbmJjdXVzYW5ldHdvcmtkLzEvSC4yNy41L3MxMjY0NTg3ODgzNzE0OD9BUUI9MSZuZGg9MSZ0PTI4JTJGNCUyRjIwMjAlMjA0JTNBMzIlM0E0NiUyMDQlMjAwJmZpZD0xRDg3QzRDNUYxRkRENTE5LTIxODlGN0FEMDhCODVDMkUmY2U9VVRGLTgmbnM9bmJjdW5pdmVyc2FsJnBhZ2VOYW1lPU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwaXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEluZm9ybSUyMEdhbGxlcnklMjAlM0ElMjBQaG90byUyMDEmZz1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkYmY2M9VVNEJnNlcnZlcj0xMC4xMC4xMC4xOCZldmVudHM9ZXZlbnQ2JmMyPURyYW1hJmMzPUdhbGxlcnkmYzQ9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JnY0PUQlM0RjNCZjNT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBJbmZvcm0lMjBHYWxsZXJ5JmM2PWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmluZm9ybSZjOD1DYWJsZSZ2OD1DYWJsZSZjOT1VU0ElMjBOZXR3b3JrJnY5PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwaXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEluZm9ybSUyMEdhbGxlcnklMjAlM0ElMjBQaG90byUyMDEmYzEwPU1yLiUyMFJvYm90JnYxMD1EJTNEYzEwJmMxMT1Nci4lMjBSb2JvdCUyMCU3QyUyME1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwaXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEluZm9ybSUyMEdhbGxlcnklMjAlM0ElMjBQaG90byUyMDEmYzEyPVVTQSUyME5ldHdvcmslMjAlN0MlMjBNci4lMjBSb2JvdCZjMTM9UmVwZWF0JmMzMj1OZXclMjBTaXRlJnYzMj1HYWxsZXJ5JnY0Mz1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkZpbmZvcm0mdjQ1PVVTQSUyME5ldHdvcmsmYzYwPU5vdCUyMFNwb25zb3JlZCZjNjg9RCUzRHY2OCZ2Njg9RGVza3RvcCUyMExhcmdlJmM2OT1EJTNEdjY5JnY2OT01ODQmYzcwPUQlM0R2NzAmdjcwPTEzNDImYzcxPUQlM0R2NzEmdjcxPURlc2t0b3AmaDE9Q2FibGUlN0NVU0ElMjBOZXR3b3JrJTdDTXIuJTIwUm9ib3QmaDI9RHJhbWElN0NNci4lMjBSb2JvdCU3Q0dhbGxlcnklN0NNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmaDM9MTAuMTAuMTAuMTglN0NpbmZvcm0mcz0xMzQyeDU4NCZjPTI0Jmo9MS42JnY9TiZrPVkmYnc9MTM0MiZiaD01ODQmQVFFPTEgSFRUUC8xLjENCkhvc3Q6IG9pbWcubmJjdW5pLmNvbQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgcnY6NjguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC82OC4wDQpBY2NlcHQ6IGltYWdlL3dlYnAsKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMC4xMC4xOC8NCg0K]]></request>
    <status>302</status>
    <responselength>1978</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQp4c2VydmVyOiBhbmVkZ2UtNWQ4ZjU4ODRjYy13enh6Yw0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp4LWM6IG1hc3Rlci0xMjgxLkkzNGRhZWQuTTAtNDA2DQpkYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjMzOjA2IEdNVA0KY29udGVudC10eXBlOiB0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgNCmV4cGlyZXM6IFdlZCwgMjcgTWF5IDIwMjAgMDQ6MzM6MDYgR01UDQpsYXN0LW1vZGlmaWVkOiBGcmksIDI5IE1heSAyMDIwIDA0OjMzOjA2IEdNVA0KcHJhZ21hOiBuby1jYWNoZQ0KcDNwOiBDUD0iVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5Ig0Kc2VydmVyOiBqYWcNCnNldC1jb29raWU6IHNfdmk9W0NTXXYxfDJGNjc5RjgxMDUxNUY4OTItNjAwMDA2MjlDQjE4QjcyNltDRV07IFBhdGg9LzsgRG9tYWluPW5iY3VuaS5jb207IE1heC1BZ2U9NjMwNzIwMDA7IEV4cGlyZXM9U2F0LCAyOCBNYXkgMjAyMiAwNDozMzozMyBHTVQ7IA0KbG9jYXRpb246IGh0dHA6Ly9vaW1nLm5iY3VuaS5jb20vYi9zcy9uYmN1Z2xvYmFsLG5iY3V1c2FuZXR3b3JrZC8xL0guMjcuNS9zMTI2NDU4Nzg4MzcxNDg/QVFCPTEmcGNjcj10cnVlJnZpZG49MkY2NzlGODEwNTE1Rjg5Mi02MDAwMDYyOUNCMThCNzI2Jm5kaD0xJnQ9MjglMkY0JTJGMjAyMCUyMDQlM0EzMiUzQTQ2JTIwNCUyMDAmZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRSZjZT1VVEYtOCZucz1uYmN1bml2ZXJzYWwmcGFnZU5hbWU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBpcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSW5mb3JtJTIwR2FsbGVyeSUyMCUzQSUyMFBob3RvJTIwMSZnPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRiZjYz1VU0Qmc2VydmVyPTEwLjEwLjEwLjE4JmV2ZW50cz1ldmVudDYmYzI9RHJhbWEmYzM9R2FsbGVyeSZjND1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmdjQ9RCUzRGM0JmM1PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEluZm9ybSUyMEdhbGxlcnkmYzY9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGaW5mb3JtJmM4PUNhYmxlJnY4PUNhYmxlJmM5PVVTQSUyME5ldHdvcmsmdjk9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBpcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSW5mb3JtJTIwR2FsbGVyeSUyMCUzQSUyMFBob3RvJTIwMSZjMTA9TXIuJTIwUm9ib3QmdjEwPUQlM0RjMTAmYzExPU1yLiUyMFJvYm90JTIwJTdDJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBpcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSW5mb3JtJTIwR2FsbGVyeSUyMCUzQSUyMFBob3RvJTIwMSZjMTI9VVNBJTIwTmV0d29yayUyMCU3QyUyME1yLiUyMFJvYm90JmMxMz1SZXBlYXQmYzMyPU5ldyUyMFNpdGUmdjMyPUdhbGxlcnkmdjQzPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmluZm9ybSZ2NDU9VVNBJTIwTmV0d29yayZjNjA9Tm90JTIwU3BvbnNvcmVkJmM2OD1EJTNEdjY4JnY2OD1EZXNrdG9wJTIwTGFyZ2UmYzY5PUQlM0R2NjkmdjY5PTU4NCZjNzA9RCUzRHY3MCZ2NzA9MTM0MiZjNzE9RCUzRHY3MSZ2NzE9RGVza3RvcCZoMT1DYWJsZSU3Q1VTQSUyME5ldHdvcmslN0NNci4lMjBSb2JvdCZoMj1EcmFtYSU3Q01yLiUyMFJvYm90JTdDR2FsbGVyeSU3Q01yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCZoMz0xMC4xMC4xMC4xOCU3Q2luZm9ybSZzPTEzNDJ4NTg0JmM9MjQmaj0xLjYmdj1OJms9WSZidz0xMzQyJmJoPTU4NCZBUUU9MQ0KY29udGVudC1sZW5ndGg6IDANCmNhY2hlLWNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBuby10cmFuc2Zvcm0sIHByaXZhdGUNCngteHNzLXByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCmNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 10:02:10 IST 2020</time>
    <url><![CDATA[http://oimg.nbcuni.com/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s13626800113345?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A32%3A3%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Video&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&c6=http%3A%2F%2F10.10.10.18%2Ffsociety&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Video&v43=http%3A%2F%2F10.10.10.18%2Ffsociety&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CVideo%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cfsociety&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></url>
    <host ip="3.6.119.69">oimg.nbcuni.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s13626800113345?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A32%3A3%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Video&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&c6=http%3A%2F%2F10.10.10.18%2Ffsociety&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20fsociety&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Video&v43=http%3A%2F%2F10.10.10.18%2Ffsociety&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CVideo%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cfsociety&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC9iL3NzL25iY3VnbG9iYWwsbmJjdXVzYW5ldHdvcmtkLzEvSC4yNy41L3MxMzYyNjgwMDExMzM0NT9BUUI9MSZuZGg9MSZ0PTI4JTJGNCUyRjIwMjAlMjA0JTNBMzIlM0EzJTIwNCUyMDAmZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRSZjZT1VVEYtOCZucz1uYmN1bml2ZXJzYWwmcGFnZU5hbWU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwZnNvY2lldHkmZz1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkYmY2M9VVNEJnNlcnZlcj0xMC4xMC4xMC4xOCZldmVudHM9ZXZlbnQ2JmMyPURyYW1hJmMzPVZpZGVvJmM0PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCZ2ND1EJTNEYzQmYzU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwZnNvY2lldHkmYzY9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGZnNvY2lldHkmYzg9Q2FibGUmdjg9Q2FibGUmYzk9VVNBJTIwTmV0d29yayZ2OT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBmc29jaWV0eSZjMTA9TXIuJTIwUm9ib3QmdjEwPUQlM0RjMTAmYzExPU1yLiUyMFJvYm90JTIwJTdDJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwZnNvY2lldHkmYzEyPVVTQSUyME5ldHdvcmslMjAlN0MlMjBNci4lMjBSb2JvdCZjMTM9UmVwZWF0JmMzMj1OZXclMjBTaXRlJnYzMj1WaWRlbyZ2NDM9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGZnNvY2lldHkmdjQ1PVVTQSUyME5ldHdvcmsmYzYwPU5vdCUyMFNwb25zb3JlZCZjNjg9RCUzRHY2OCZ2Njg9RGVza3RvcCUyMExhcmdlJmM2OT1EJTNEdjY5JnY2OT01ODQmYzcwPUQlM0R2NzAmdjcwPTEzNDImYzcxPUQlM0R2NzEmdjcxPURlc2t0b3AmaDE9Q2FibGUlN0NVU0ElMjBOZXR3b3JrJTdDTXIuJTIwUm9ib3QmaDI9RHJhbWElN0NNci4lMjBSb2JvdCU3Q1ZpZGVvJTdDTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JmgzPTEwLjEwLjEwLjE4JTdDZnNvY2lldHkmcz0xMzQyeDU4NCZjPTI0Jmo9MS42JnY9TiZrPVkmYnc9MTM0MiZiaD01ODQmQVFFPTEgSFRUUC8xLjENCkhvc3Q6IG9pbWcubmJjdW5pLmNvbQ0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgcnY6NjguMCkgR2Vja28vMjAxMDAxMDEgRmlyZWZveC82OC4wDQpBY2NlcHQ6IGltYWdlL3dlYnAsKi8qDQpBY2NlcHQtTGFuZ3VhZ2U6IGVuLVVTLGVuO3E9MC41DQpBY2NlcHQtRW5jb2Rpbmc6IGd6aXAsIGRlZmxhdGUNCkROVDogMQ0KQ29ubmVjdGlvbjogY2xvc2UNClJlZmVyZXI6IGh0dHA6Ly8xMC4xMC4xMC4xOC8NCg0K]]></request>
    <status>302</status>
    <responselength>1891</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQp4c2VydmVyOiBhbmVkZ2UtNWQ4ZjU4ODRjYy1jbHZ2eg0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp4LWM6IG1hc3Rlci0xMjgxLkkzNGRhZWQuTTAtNDA2DQpkYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjMyOjA4IEdNVA0KY29udGVudC10eXBlOiB0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgNCmV4cGlyZXM6IFdlZCwgMjcgTWF5IDIwMjAgMDQ6MzI6MDkgR01UDQpsYXN0LW1vZGlmaWVkOiBGcmksIDI5IE1heSAyMDIwIDA0OjMyOjA5IEdNVA0KcHJhZ21hOiBuby1jYWNoZQ0KcDNwOiBDUD0iVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5Ig0Kc2VydmVyOiBqYWcNCnNldC1jb29raWU6IHNfdmk9W0NTXXYxfDJGNjc5RjY0ODUxNUExNjAtNDAwMDA5OUE4QjBCNzQ2RVtDRV07IFBhdGg9LzsgRG9tYWluPW5iY3VuaS5jb207IE1heC1BZ2U9NjMwNzIwMDA7IEV4cGlyZXM9U2F0LCAyOCBNYXkgMjAyMiAwNDozMjozMiBHTVQ7IA0KbG9jYXRpb246IGh0dHA6Ly9vaW1nLm5iY3VuaS5jb20vYi9zcy9uYmN1Z2xvYmFsLG5iY3V1c2FuZXR3b3JrZC8xL0guMjcuNS9zMTM2MjY4MDAxMTMzNDU/QVFCPTEmcGNjcj10cnVlJnZpZG49MkY2NzlGNjQ4NTE1QTE2MC00MDAwMDk5QThCMEI3NDZFJm5kaD0xJnQ9MjglMkY0JTJGMjAyMCUyMDQlM0EzMiUzQTMlMjA0JTIwMCZmaWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFJmNlPVVURi04Jm5zPW5iY3VuaXZlcnNhbCZwYWdlTmFtZT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBmc29jaWV0eSZnPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRiZjYz1VU0Qmc2VydmVyPTEwLjEwLjEwLjE4JmV2ZW50cz1ldmVudDYmYzI9RHJhbWEmYzM9VmlkZW8mYzQ9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JnY0PUQlM0RjNCZjNT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBmc29jaWV0eSZjNj1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkZmc29jaWV0eSZjOD1DYWJsZSZ2OD1DYWJsZSZjOT1VU0ElMjBOZXR3b3JrJnY5PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMGZzb2NpZXR5JmMxMD1Nci4lMjBSb2JvdCZ2MTA9RCUzRGMxMCZjMTE9TXIuJTIwUm9ib3QlMjAlN0MlMjBNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBmc29jaWV0eSZjMTI9VVNBJTIwTmV0d29yayUyMCU3QyUyME1yLiUyMFJvYm90JmMxMz1SZXBlYXQmYzMyPU5ldyUyMFNpdGUmdjMyPVZpZGVvJnY0Mz1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkZmc29jaWV0eSZ2NDU9VVNBJTIwTmV0d29yayZjNjA9Tm90JTIwU3BvbnNvcmVkJmM2OD1EJTNEdjY4JnY2OD1EZXNrdG9wJTIwTGFyZ2UmYzY5PUQlM0R2NjkmdjY5PTU4NCZjNzA9RCUzRHY3MCZ2NzA9MTM0MiZjNzE9RCUzRHY3MSZ2NzE9RGVza3RvcCZoMT1DYWJsZSU3Q1VTQSUyME5ldHdvcmslN0NNci4lMjBSb2JvdCZoMj1EcmFtYSU3Q01yLiUyMFJvYm90JTdDVmlkZW8lN0NNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmaDM9MTAuMTAuMTAuMTglN0Nmc29jaWV0eSZzPTEzNDJ4NTg0JmM9MjQmaj0xLjYmdj1OJms9WSZidz0xMzQyJmJoPTU4NCZBUUU9MQ0KY29udGVudC1sZW5ndGg6IDANCmNhY2hlLWNvbnRyb2w6IG5vLWNhY2hlLCBuby1zdG9yZSwgbWF4LWFnZT0wLCBuby10cmFuc2Zvcm0sIHByaXZhdGUNCngteHNzLXByb3RlY3Rpb246IDE7IG1vZGU9YmxvY2sNCngtY29udGVudC10eXBlLW9wdGlvbnM6IG5vc25pZmYNCmNvbm5lY3Rpb246IGNsb3NlDQoNCg==]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 10:02:10 IST 2020</time>
    <url><![CDATA[http://oimg.nbcuni.com/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s14321758627016?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A32%3A8%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Features&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c6=http%3A%2F%2F10.10.10.18%2Ffsociety&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Features&v43=http%3A%2F%2F10.10.10.18%2Ffsociety&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CFeatures%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cfsociety&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></url>
    <host ip="3.6.119.69">oimg.nbcuni.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s14321758627016?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A32%3A8%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Features&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c6=http%3A%2F%2F10.10.10.18%2Ffsociety&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Features&v43=http%3A%2F%2F10.10.10.18%2Ffsociety&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CFeatures%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cfsociety&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC9iL3NzL25iY3VnbG9iYWwsbmJjdXVzYW5ldHdvcmtkLzEvSC4yNy41L3MxNDMyMTc1ODYyNzAxNj9BUUI9MSZuZGg9MSZ0PTI4JTJGNCUyRjIwMjAlMjA0JTNBMzIlM0E4JTIwNCUyMDAmZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRSZjZT1VVEYtOCZucz1uYmN1bml2ZXJzYWwmcGFnZU5hbWU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSGVscCZnPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRiZjYz1VU0Qmc2VydmVyPTEwLjEwLjEwLjE4JmV2ZW50cz1ldmVudDYmYzI9RHJhbWEmYzM9RmVhdHVyZXMmYzQ9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JnY0PUQlM0RjNCZjNT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmM2PWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmZzb2NpZXR5JmM4PUNhYmxlJnY4PUNhYmxlJmM5PVVTQSUyME5ldHdvcmsmdjk9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSGVscCZjMTA9TXIuJTIwUm9ib3QmdjEwPUQlM0RjMTAmYzExPU1yLiUyMFJvYm90JTIwJTdDJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSGVscCZjMTI9VVNBJTIwTmV0d29yayUyMCU3QyUyME1yLiUyMFJvYm90JmMxMz1SZXBlYXQmYzMyPU5ldyUyMFNpdGUmdjMyPUZlYXR1cmVzJnY0Mz1odHRwJTNBJTJGJTJGMTAuMTAuMTAuMTglMkZmc29jaWV0eSZ2NDU9VVNBJTIwTmV0d29yayZjNjA9Tm90JTIwU3BvbnNvcmVkJmM2OD1EJTNEdjY4JnY2OD1EZXNrdG9wJTIwTGFyZ2UmYzY5PUQlM0R2NjkmdjY5PTU4NCZjNzA9RCUzRHY3MCZ2NzA9MTM0MiZjNzE9RCUzRHY3MSZ2NzE9RGVza3RvcCZoMT1DYWJsZSU3Q1VTQSUyME5ldHdvcmslN0NNci4lMjBSb2JvdCZoMj1EcmFtYSU3Q01yLiUyMFJvYm90JTdDRmVhdHVyZXMlN0NNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmaDM9MTAuMTAuMTAuMTglN0Nmc29jaWV0eSZzPTEzNDJ4NTg0JmM9MjQmaj0xLjYmdj1OJms9WSZidz0xMzQyJmJoPTU4NCZBUUU9MSBIVFRQLzEuMQ0KSG9zdDogb2ltZy5uYmN1bmkuY29tDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogaW1hZ2Uvd2VicCwqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwLjEwLjE4Lw0KDQo=]]></request>
    <status>302</status>
    <responselength>1884</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQp4c2VydmVyOiBhbmVkZ2UtNWQ4ZjU4ODRjYy1oODViNQ0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp4LWM6IG1hc3Rlci0xMjgxLkkzNGRhZWQuTTAtNDA2DQpkYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjMyOjA4IEdNVA0KY29udGVudC10eXBlOiB0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgNCmV4cGlyZXM6IFdlZCwgMjcgTWF5IDIwMjAgMDQ6MzI6MDggR01UDQpsYXN0LW1vZGlmaWVkOiBGcmksIDI5IE1heSAyMDIwIDA0OjMyOjA4IEdNVA0KcHJhZ21hOiBuby1jYWNoZQ0KcDNwOiBDUD0iVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5Ig0Kc2VydmVyOiBqYWcNCnNldC1jb29raWU6IHNfdmk9W0NTXXYxfDJGNjc5RjY0MDUxNTgwMjgtNDAwMDA3NERDQjE1Rjk4M1tDRV07IFBhdGg9LzsgRG9tYWluPW5iY3VuaS5jb207IE1heC1BZ2U9NjMwNzIwMDA7IEV4cGlyZXM9U2F0LCAyOCBNYXkgMjAyMiAwNDozMjozMiBHTVQ7IA0KbG9jYXRpb246IGh0dHA6Ly9vaW1nLm5iY3VuaS5jb20vYi9zcy9uYmN1Z2xvYmFsLG5iY3V1c2FuZXR3b3JrZC8xL0guMjcuNS9zMTQzMjE3NTg2MjcwMTY/QVFCPTEmcGNjcj10cnVlJnZpZG49MkY2NzlGNjQwNTE1ODAyOC00MDAwMDc0RENCMTVGOTgzJm5kaD0xJnQ9MjglMkY0JTJGMjAyMCUyMDQlM0EzMiUzQTglMjA0JTIwMCZmaWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFJmNlPVVURi04Jm5zPW5iY3VuaXZlcnNhbCZwYWdlTmFtZT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmc9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGJmNjPVVTRCZzZXJ2ZXI9MTAuMTAuMTAuMTgmZXZlbnRzPWV2ZW50NiZjMj1EcmFtYSZjMz1GZWF0dXJlcyZjND1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmdjQ9RCUzRGM0JmM1PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEhlbHAmYzY9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGZnNvY2lldHkmYzg9Q2FibGUmdjg9Q2FibGUmYzk9VVNBJTIwTmV0d29yayZ2OT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmMxMD1Nci4lMjBSb2JvdCZ2MTA9RCUzRGMxMCZjMTE9TXIuJTIwUm9ib3QlMjAlN0MlMjBNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmMxMj1VU0ElMjBOZXR3b3JrJTIwJTdDJTIwTXIuJTIwUm9ib3QmYzEzPVJlcGVhdCZjMzI9TmV3JTIwU2l0ZSZ2MzI9RmVhdHVyZXMmdjQzPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmZzb2NpZXR5JnY0NT1VU0ElMjBOZXR3b3JrJmM2MD1Ob3QlMjBTcG9uc29yZWQmYzY4PUQlM0R2NjgmdjY4PURlc2t0b3AlMjBMYXJnZSZjNjk9RCUzRHY2OSZ2Njk9NTg0JmM3MD1EJTNEdjcwJnY3MD0xMzQyJmM3MT1EJTNEdjcxJnY3MT1EZXNrdG9wJmgxPUNhYmxlJTdDVVNBJTIwTmV0d29yayU3Q01yLiUyMFJvYm90JmgyPURyYW1hJTdDTXIuJTIwUm9ib3QlN0NGZWF0dXJlcyU3Q01yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCZoMz0xMC4xMC4xMC4xOCU3Q2Zzb2NpZXR5JnM9MTM0Mng1ODQmYz0yNCZqPTEuNiZ2PU4maz1ZJmJ3PTEzNDImYmg9NTg0JkFRRT0xDQpjb250ZW50LWxlbmd0aDogMA0KY2FjaGUtY29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG5vLXRyYW5zZm9ybSwgcHJpdmF0ZQ0KeC14c3MtcHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KY29ubmVjdGlvbjogY2xvc2UNCg0K]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:51:55 IST 2020</time>
    <url><![CDATA[http://oimg.nbcuni.com/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s1548799882323?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A20%3A44%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Features&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c6=http%3A%2F%2F10.10.10.18%2Fjoin&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Features&v43=http%3A%2F%2F10.10.10.18%2Fjoin&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CFeatures%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cjoin&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></url>
    <host ip="3.6.119.69">oimg.nbcuni.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s1548799882323?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A20%3A44%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Features&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c6=http%3A%2F%2F10.10.10.18%2Fjoin&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20Help&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Features&v43=http%3A%2F%2F10.10.10.18%2Fjoin&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CFeatures%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cjoin&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC9iL3NzL25iY3VnbG9iYWwsbmJjdXVzYW5ldHdvcmtkLzEvSC4yNy41L3MxNTQ4Nzk5ODgyMzIzP0FRQj0xJm5kaD0xJnQ9MjglMkY0JTJGMjAyMCUyMDQlM0EyMCUzQTQ0JTIwNCUyMDAmZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRSZjZT1VVEYtOCZucz1uYmN1bml2ZXJzYWwmcGFnZU5hbWU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwSGVscCZnPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRiZjYz1VU0Qmc2VydmVyPTEwLjEwLjEwLjE4JmV2ZW50cz1ldmVudDYmYzI9RHJhbWEmYzM9RmVhdHVyZXMmYzQ9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JnY0PUQlM0RjNCZjNT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmM2PWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmpvaW4mYzg9Q2FibGUmdjg9Q2FibGUmYzk9VVNBJTIwTmV0d29yayZ2OT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmMxMD1Nci4lMjBSb2JvdCZ2MTA9RCUzRGMxMCZjMTE9TXIuJTIwUm9ib3QlMjAlN0MlMjBNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmMxMj1VU0ElMjBOZXR3b3JrJTIwJTdDJTIwTXIuJTIwUm9ib3QmYzEzPVJlcGVhdCZjMzI9TmV3JTIwU2l0ZSZ2MzI9RmVhdHVyZXMmdjQzPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmpvaW4mdjQ1PVVTQSUyME5ldHdvcmsmYzYwPU5vdCUyMFNwb25zb3JlZCZjNjg9RCUzRHY2OCZ2Njg9RGVza3RvcCUyMExhcmdlJmM2OT1EJTNEdjY5JnY2OT01ODQmYzcwPUQlM0R2NzAmdjcwPTEzNDImYzcxPUQlM0R2NzEmdjcxPURlc2t0b3AmaDE9Q2FibGUlN0NVU0ElMjBOZXR3b3JrJTdDTXIuJTIwUm9ib3QmaDI9RHJhbWElN0NNci4lMjBSb2JvdCU3Q0ZlYXR1cmVzJTdDTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JmgzPTEwLjEwLjEwLjE4JTdDam9pbiZzPTEzNDJ4NTg0JmM9MjQmaj0xLjYmdj1OJms9WSZidz0xMzQyJmJoPTU4NCZBUUU9MSBIVFRQLzEuMQ0KSG9zdDogb2ltZy5uYmN1bmkuY29tDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogaW1hZ2Uvd2VicCwqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwLjEwLjE4Lw0KDQo=]]></request>
    <status>302</status>
    <responselength>1872</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQp4c2VydmVyOiBhbmVkZ2UtNWQ4ZjU4ODRjYy04NWsydA0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp4LWM6IG1hc3Rlci0xMjgxLkkzNGRhZWQuTTAtNDA2DQpkYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjIxOjUzIEdNVA0KY29udGVudC10eXBlOiB0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgNCmV4cGlyZXM6IFdlZCwgMjcgTWF5IDIwMjAgMDQ6MjE6NTQgR01UDQpsYXN0LW1vZGlmaWVkOiBGcmksIDI5IE1heSAyMDIwIDA0OjIxOjU0IEdNVA0KcHJhZ21hOiBuby1jYWNoZQ0KcDNwOiBDUD0iVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5Ig0Kc2VydmVyOiBqYWcNCnNldC1jb29raWU6IHNfdmk9W0NTXXYxfDJGNjc5RTMxMDUxNUI0QzctNjAwMDA4RTVFQjA5NjUwMVtDRV07IFBhdGg9LzsgRG9tYWluPW5iY3VuaS5jb207IE1heC1BZ2U9NjMwNzIwMDA7IEV4cGlyZXM9U2F0LCAyOCBNYXkgMjAyMiAwNDoyMToyMSBHTVQ7IA0KbG9jYXRpb246IGh0dHA6Ly9vaW1nLm5iY3VuaS5jb20vYi9zcy9uYmN1Z2xvYmFsLG5iY3V1c2FuZXR3b3JrZC8xL0guMjcuNS9zMTU0ODc5OTg4MjMyMz9BUUI9MSZwY2NyPXRydWUmdmlkbj0yRjY3OUUzMTA1MTVCNEM3LTYwMDAwOEU1RUIwOTY1MDEmbmRoPTEmdD0yOCUyRjQlMkYyMDIwJTIwNCUzQTIwJTNBNDQlMjA0JTIwMCZmaWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFJmNlPVVURi04Jm5zPW5iY3VuaXZlcnNhbCZwYWdlTmFtZT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBIZWxwJmc9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGJmNjPVVTRCZzZXJ2ZXI9MTAuMTAuMTAuMTgmZXZlbnRzPWV2ZW50NiZjMj1EcmFtYSZjMz1GZWF0dXJlcyZjND1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmdjQ9RCUzRGM0JmM1PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEhlbHAmYzY9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGam9pbiZjOD1DYWJsZSZ2OD1DYWJsZSZjOT1VU0ElMjBOZXR3b3JrJnY5PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEhlbHAmYzEwPU1yLiUyMFJvYm90JnYxMD1EJTNEYzEwJmMxMT1Nci4lMjBSb2JvdCUyMCU3QyUyME1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMEhlbHAmYzEyPVVTQSUyME5ldHdvcmslMjAlN0MlMjBNci4lMjBSb2JvdCZjMTM9UmVwZWF0JmMzMj1OZXclMjBTaXRlJnYzMj1GZWF0dXJlcyZ2NDM9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGam9pbiZ2NDU9VVNBJTIwTmV0d29yayZjNjA9Tm90JTIwU3BvbnNvcmVkJmM2OD1EJTNEdjY4JnY2OD1EZXNrdG9wJTIwTGFyZ2UmYzY5PUQlM0R2NjkmdjY5PTU4NCZjNzA9RCUzRHY3MCZ2NzA9MTM0MiZjNzE9RCUzRHY3MSZ2NzE9RGVza3RvcCZoMT1DYWJsZSU3Q1VTQSUyME5ldHdvcmslN0NNci4lMjBSb2JvdCZoMj1EcmFtYSU3Q01yLiUyMFJvYm90JTdDRmVhdHVyZXMlN0NNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmaDM9MTAuMTAuMTAuMTglN0Nqb2luJnM9MTM0Mng1ODQmYz0yNCZqPTEuNiZ2PU4maz1ZJmJ3PTEzNDImYmg9NTg0JkFRRT0xDQpjb250ZW50LWxlbmd0aDogMA0KY2FjaGUtY29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG5vLXRyYW5zZm9ybSwgcHJpdmF0ZQ0KeC14c3MtcHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KY29ubmVjdGlvbjogY2xvc2UNCg0K]]></response>
    <comment></comment>
  </item>
  <item>
    <time>Thu May 28 09:50:14 IST 2020</time>
    <url><![CDATA[http://oimg.nbcuni.com/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s18646303549275?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A20%3A9%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Video&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&c6=http%3A%2F%2F10.10.10.18%2Fjoin&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Video&v43=http%3A%2F%2F10.10.10.18%2Fjoin&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CVideo%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cjoin&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></url>
    <host ip="3.6.119.69">oimg.nbcuni.com</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/b/ss/nbcuglobal,nbcuusanetworkd/1/H.27.5/s18646303549275?AQB=1&ndh=1&t=28%2F4%2F2020%204%3A20%3A9%204%200&fid=1D87C4C5F1FDD519-2189F7AD08B85C2E&ce=UTF-8&ns=nbcuniversal&pageName=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&g=http%3A%2F%2F10.10.10.18%2F&cc=USD&server=10.10.10.18&events=event6&c2=Drama&c3=Video&c4=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&v4=D%3Dc4&c5=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&c6=http%3A%2F%2F10.10.10.18%2Fjoin&c8=Cable&v8=Cable&c9=USA%20Network&v9=Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&c10=Mr.%20Robot&v10=D%3Dc10&c11=Mr.%20Robot%20%7C%20Mr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot%20%3A%20prepare&c12=USA%20Network%20%7C%20Mr.%20Robot&c13=Repeat&c32=New%20Site&v32=Video&v43=http%3A%2F%2F10.10.10.18%2Fjoin&v45=USA%20Network&c60=Not%20Sponsored&c68=D%3Dv68&v68=Desktop%20Large&c69=D%3Dv69&v69=584&c70=D%3Dv70&v70=1342&c71=D%3Dv71&v71=Desktop&h1=Cable%7CUSA%20Network%7CMr.%20Robot&h2=Drama%7CMr.%20Robot%7CVideo%7CMr.%20Robot%20%3A%20Who%20Is%20Mr.%20Robot&h3=10.10.10.18%7Cjoin&s=1342x584&c=24&j=1.6&v=N&k=Y&bw=1342&bh=584&AQE=1]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC9iL3NzL25iY3VnbG9iYWwsbmJjdXVzYW5ldHdvcmtkLzEvSC4yNy41L3MxODY0NjMwMzU0OTI3NT9BUUI9MSZuZGg9MSZ0PTI4JTJGNCUyRjIwMjAlMjA0JTNBMjAlM0E5JTIwNCUyMDAmZmlkPTFEODdDNEM1RjFGREQ1MTktMjE4OUY3QUQwOEI4NUMyRSZjZT1VVEYtOCZucz1uYmN1bml2ZXJzYWwmcGFnZU5hbWU9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JTIwJTNBJTIwcHJlcGFyZSZnPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRiZjYz1VU0Qmc2VydmVyPTEwLjEwLjEwLjE4JmV2ZW50cz1ldmVudDYmYzI9RHJhbWEmYzM9VmlkZW8mYzQ9TXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JnY0PUQlM0RjNCZjNT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBwcmVwYXJlJmM2PWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmpvaW4mYzg9Q2FibGUmdjg9Q2FibGUmYzk9VVNBJTIwTmV0d29yayZ2OT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBwcmVwYXJlJmMxMD1Nci4lMjBSb2JvdCZ2MTA9RCUzRGMxMCZjMTE9TXIuJTIwUm9ib3QlMjAlN0MlMjBNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBwcmVwYXJlJmMxMj1VU0ElMjBOZXR3b3JrJTIwJTdDJTIwTXIuJTIwUm9ib3QmYzEzPVJlcGVhdCZjMzI9TmV3JTIwU2l0ZSZ2MzI9VmlkZW8mdjQzPWh0dHAlM0ElMkYlMkYxMC4xMC4xMC4xOCUyRmpvaW4mdjQ1PVVTQSUyME5ldHdvcmsmYzYwPU5vdCUyMFNwb25zb3JlZCZjNjg9RCUzRHY2OCZ2Njg9RGVza3RvcCUyMExhcmdlJmM2OT1EJTNEdjY5JnY2OT01ODQmYzcwPUQlM0R2NzAmdjcwPTEzNDImYzcxPUQlM0R2NzEmdjcxPURlc2t0b3AmaDE9Q2FibGUlN0NVU0ElMjBOZXR3b3JrJTdDTXIuJTIwUm9ib3QmaDI9RHJhbWElN0NNci4lMjBSb2JvdCU3Q1ZpZGVvJTdDTXIuJTIwUm9ib3QlMjAlM0ElMjBXaG8lMjBJcyUyME1yLiUyMFJvYm90JmgzPTEwLjEwLjEwLjE4JTdDam9pbiZzPTEzNDJ4NTg0JmM9MjQmaj0xLjYmdj1OJms9WSZidz0xMzQyJmJoPTU4NCZBUUU9MSBIVFRQLzEuMQ0KSG9zdDogb2ltZy5uYmN1bmkuY29tDQpVc2VyLUFnZW50OiBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBydjo2OC4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzY4LjANCkFjY2VwdDogaW1hZ2Uvd2VicCwqLyoNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KRE5UOiAxDQpDb25uZWN0aW9uOiBjbG9zZQ0KUmVmZXJlcjogaHR0cDovLzEwLjEwLjEwLjE4Lw0KDQo=]]></request>
    <status>302</status>
    <responselength>1875</responselength>
    <mimetype></mimetype>
    <response base64="true"><![CDATA[SFRUUC8xLjEgMzAyIEZvdW5kDQp4c2VydmVyOiBhbmVkZ2UtNWQ4ZjU4ODRjYy16Mm44dw0KYWNjZXNzLWNvbnRyb2wtYWxsb3ctb3JpZ2luOiAqDQp4LWM6IG1hc3Rlci0xMjgxLkkzNGRhZWQuTTAtNDA2DQpkYXRlOiBUaHUsIDI4IE1heSAyMDIwIDA0OjIwOjEyIEdNVA0KY29udGVudC10eXBlOiB0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgNCmV4cGlyZXM6IFdlZCwgMjcgTWF5IDIwMjAgMDQ6MjA6MTMgR01UDQpsYXN0LW1vZGlmaWVkOiBGcmksIDI5IE1heSAyMDIwIDA0OjIwOjEzIEdNVA0KcHJhZ21hOiBuby1jYWNoZQ0KcDNwOiBDUD0iVGhpcyBpcyBub3QgYSBQM1AgcG9saWN5Ig0Kc2VydmVyOiBqYWcNCnNldC1jb29raWU6IHNfdmk9W0NTXXYxfDJGNjc5REZFODUxNUNDNjktNjAwMDBCREI0QjA4NjRGRVtDRV07IFBhdGg9LzsgRG9tYWluPW5iY3VuaS5jb207IE1heC1BZ2U9NjMwNzIwMDA7IEV4cGlyZXM9U2F0LCAyOCBNYXkgMjAyMiAwNDoyMDoyMCBHTVQ7IA0KbG9jYXRpb246IGh0dHA6Ly9vaW1nLm5iY3VuaS5jb20vYi9zcy9uYmN1Z2xvYmFsLG5iY3V1c2FuZXR3b3JrZC8xL0guMjcuNS9zMTg2NDYzMDM1NDkyNzU/QVFCPTEmcGNjcj10cnVlJnZpZG49MkY2NzlERkU4NTE1Q0M2OS02MDAwMEJEQjRCMDg2NEZFJm5kaD0xJnQ9MjglMkY0JTJGMjAyMCUyMDQlM0EyMCUzQTklMjA0JTIwMCZmaWQ9MUQ4N0M0QzVGMUZERDUxOS0yMTg5RjdBRDA4Qjg1QzJFJmNlPVVURi04Jm5zPW5iY3VuaXZlcnNhbCZwYWdlTmFtZT1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QlMjAlM0ElMjBwcmVwYXJlJmc9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGJmNjPVVTRCZzZXJ2ZXI9MTAuMTAuMTAuMTgmZXZlbnRzPWV2ZW50NiZjMj1EcmFtYSZjMz1WaWRlbyZjND1Nci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmdjQ9RCUzRGM0JmM1PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMHByZXBhcmUmYzY9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGam9pbiZjOD1DYWJsZSZ2OD1DYWJsZSZjOT1VU0ElMjBOZXR3b3JrJnY5PU1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMHByZXBhcmUmYzEwPU1yLiUyMFJvYm90JnYxMD1EJTNEYzEwJmMxMT1Nci4lMjBSb2JvdCUyMCU3QyUyME1yLiUyMFJvYm90JTIwJTNBJTIwV2hvJTIwSXMlMjBNci4lMjBSb2JvdCUyMCUzQSUyMHByZXBhcmUmYzEyPVVTQSUyME5ldHdvcmslMjAlN0MlMjBNci4lMjBSb2JvdCZjMTM9UmVwZWF0JmMzMj1OZXclMjBTaXRlJnYzMj1WaWRlbyZ2NDM9aHR0cCUzQSUyRiUyRjEwLjEwLjEwLjE4JTJGam9pbiZ2NDU9VVNBJTIwTmV0d29yayZjNjA9Tm90JTIwU3BvbnNvcmVkJmM2OD1EJTNEdjY4JnY2OD1EZXNrdG9wJTIwTGFyZ2UmYzY5PUQlM0R2NjkmdjY5PTU4NCZjNzA9RCUzRHY3MCZ2NzA9MTM0MiZjNzE9RCUzRHY3MSZ2NzE9RGVza3RvcCZoMT1DYWJsZSU3Q1VTQSUyME5ldHdvcmslN0NNci4lMjBSb2JvdCZoMj1EcmFtYSU3Q01yLiUyMFJvYm90JTdDVmlkZW8lN0NNci4lMjBSb2JvdCUyMCUzQSUyMFdobyUyMElzJTIwTXIuJTIwUm9ib3QmaDM9MTAuMTAuMTAuMTglN0Nqb2luJnM9MTM0Mng1ODQmYz0yNCZqPTEuNiZ2PU4maz1ZJmJ3PTEzNDImYmg9NTg0JkFRRT0xDQpjb250ZW50LWxlbmd0aDogMA0KY2FjaGUtY29udHJvbDogbm8tY2FjaGUsIG5vLXN0b3JlLCBtYXgtYWdlPTAsIG5vLXRyYW5zZm9ybSwgcHJpdmF0ZQ0KeC14c3MtcHJvdGVjdGlvbjogMTsgbW9kZT1ibG9jaw0KeC1jb250ZW50LXR5cGUtb3B0aW9uczogbm9zbmlmZg0KY29ubmVjdGlvbjogY2xvc2UNCg0K]]></response>
    <comment></comment>
  </item>
</items>
